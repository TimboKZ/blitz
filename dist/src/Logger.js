"use strict";
var colors = require('colors');
var Util_1 = require('./Util');
(function (LogLevel) {
    LogLevel[LogLevel["Log"] = 0] = "Log";
    LogLevel[LogLevel["Warn"] = 1] = "Warn";
    LogLevel[LogLevel["Error"] = 2] = "Error";
    LogLevel[LogLevel["Debug"] = 3] = "Debug";
})(exports.LogLevel || (exports.LogLevel = {}));
var LogLevel = exports.LogLevel;
var Logger = (function () {
    function Logger() {
    }
    Logger.brand = function (text) {
        return colors.cyan(text);
    };
    Logger.logWithPrefix = function (prefix, object, print) {
        if (print === void 0) { print = true; }
        var logString = prefix + ' ' + object.toString();
        if (print) {
            return console.log(logString);
        }
        return logString;
    };
    Logger.log = function (object, level, print) {
        if (level === void 0) { level = LogLevel.Log; }
        if (print === void 0) { print = true; }
        if (level === LogLevel.Debug && !global.debug) {
            return;
        }
        if ((level === LogLevel.Log || level === LogLevel.Warn) && !global.verbose) {
            return;
        }
        var prefix;
        switch (level) {
            case LogLevel.Warn:
                prefix = colors.yellow('[Blitz WRN]');
                break;
            case LogLevel.Error:
                prefix = colors.red('[Blitz ERR]');
                break;
            case LogLevel.Debug:
                prefix = colors.magenta('[Blitz DBG]');
                break;
            default:
                prefix = Logger.brand('[Blitz LOG]');
        }
        if (Util_1.Util.isString(object)) {
            object = object.replace(/\n/g, '\n' + (new Array(colors.strip(prefix).length + 2)).join(' '));
        }
        return Logger.logWithPrefix(prefix, object, print);
    };
    Logger.logMany = function (objects, level) {
        if (level === void 0) { level = LogLevel.Log; }
        for (var i = 0; i < objects.length; i++) {
            Logger.log(objects[i], level);
        }
    };
    Logger.split = function (stringWithNewlines) {
        stringWithNewlines = stringWithNewlines.replace(/^(\n)*/g, '');
        stringWithNewlines = stringWithNewlines.replace(/(\n)*$/g, '');
        return stringWithNewlines.split('\n');
    };
    return Logger;
}());
exports.Logger = Logger;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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c0IsT0FBYyxFQUFFLEtBQThCO1FBQTlCLHFCQUE4QixHQUE5QixRQUFrQixRQUFRLENBQUMsR0FBRztRQUNoRSxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztZQUN0QyxNQUFNLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUNsQyxDQUFDO0lBQ0wsQ0FBQztJQU1hLFlBQUssR0FBbkIsVUFBb0Isa0JBQTBCO1FBQzFDLGtCQUFrQixHQUFHLGtCQUFrQixDQUFDLE9BQU8sQ0FBQyxTQUFTLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDL0Qsa0JBQWtCLEdBQUcsa0JBQWtCLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUMvRCxNQUFNLENBQUMsa0JBQWtCLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzFDLENBQUM7SUFDTCxhQUFDO0FBQUQsQ0F4RUEsQUF3RUMsSUFBQTtBQXhFWSxjQUFNLFNBd0VsQixDQUFBIiwiZmlsZSI6InNyYy9Mb2dnZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlIENvbnRhaW5zIGNvZGUgcmVsYXRlZCB0byBkYXRhIGxvZ2dpbmdcbiAqIEBhdXRob3IgVGltdXIgS3V6aGFnYWxpeWV2IDx0aW0ua3V6aEBnbWFpbC5jb20+XG4gKiBAY29weXJpZ2h0IDIwMTZcbiAqIEBsaWNlbnNlIEdQTC0zLjBcbiAqIEBzaW5jZSAwLjIuMFxuICovXG5cbmltcG9ydCAqIGFzIGNvbG9ycyBmcm9tICdjb2xvcnMnO1xuaW1wb3J0IHtVdGlsfSBmcm9tICcuL1V0aWwnO1xuXG4vKipcbiAqIExvZyBsZXZlbHMgd2hpY2ggY2hhbmdlIHByZWZpeGVzLCBjb25kaXRpb25zIGZvciBsb2dnaW5nIGFuZCBjb2xvdXJzXG4gKi9cbmV4cG9ydCBlbnVtIExvZ0xldmVsIHtcbiAgICBMb2csXG4gICAgV2FybixcbiAgICBFcnJvcixcbiAgICBEZWJ1Zyxcbn1cblxuLyoqXG4gKiBAY2xhc3MgSG9sZHMgdmFyaW91cyBzdGF0aWMgbWV0aG9kcyBmb3IgbG9nZ2luZyBvZiBkYXRhIGludG8gY29uc29sZVxuICogQHNpbmNlIDAuMi4wXG4gKi9cbmV4cG9ydCBjbGFzcyBMb2dnZXIge1xuICAgIC8qKlxuICAgICAqIENoYW5nZXMgdGhlIGNvbG9yIG9mIHN1cHBsaWVkIHN0cmluZyB0byBCbGl0eiBicmFuZCBjb2xvclxuICAgICAqIEBzaW5jZSAwLjIuMFxuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgYnJhbmQodGV4dDogc3RyaW5nKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIGNvbG9ycy5jeWFuKHRleHQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIExvZ3MgYW4gb2JqZWN0IHRvIGNvbnNvbGUgcHJlZml4aW5nIGl0IHdpdGggdGhlIHNwZWNpZmllZCBzdHJpbmcuXG4gICAgICogQHNpbmNlIDAuMi4wXG4gICAgICovXG4gICAgcHVibGljIHN0YXRpYyBsb2dXaXRoUHJlZml4KHByZWZpeDogc3RyaW5nLCBvYmplY3Q6IGFueSwgcHJpbnQ6IGJvb2xlYW4gPSB0cnVlKTogc3RyaW5nfHZvaWQge1xuICAgICAgICBsZXQgbG9nU3RyaW5nID0gcHJlZml4ICsgJyAnICsgb2JqZWN0LnRvU3RyaW5nKCk7XG4gICAgICAgIGlmIChwcmludCkge1xuICAgICAgICAgICAgcmV0dXJuIGNvbnNvbGUubG9nKGxvZ1N0cmluZyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGxvZ1N0cmluZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBMb2dzIGEgc2luZ2xlIG9iamVjdCBpbnRvIGNvbnNvbGUuIFRyaW1zIG5ld2xpbmUgY2hhcmFjdGVycyBhbmQgaW5kZW50cyBhbGwgcmVtYWluaW5nIG5ldyBsaW5lcyB0byB0aGUgbGVuZ3RoXG4gICAgICogb2YgdGhlIHByZWZpeC5cbiAgICAgKiBAc2luY2UgMC4yLjBcbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIGxvZyhvYmplY3Q6IGFueSwgbGV2ZWw6IExvZ0xldmVsID0gTG9nTGV2ZWwuTG9nLCBwcmludDogYm9vbGVhbiA9IHRydWUpOiBzdHJpbmd8dm9pZCB7XG4gICAgICAgIGlmIChsZXZlbCA9PT0gTG9nTGV2ZWwuRGVidWcgJiYgIWdsb2JhbC5kZWJ1Zykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICgobGV2ZWwgPT09IExvZ0xldmVsLkxvZyB8fCBsZXZlbCA9PT0gTG9nTGV2ZWwuV2FybikgJiYgIWdsb2JhbC52ZXJib3NlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHByZWZpeDtcbiAgICAgICAgc3dpdGNoIChsZXZlbCkge1xuICAgICAgICAgICAgY2FzZSBMb2dMZXZlbC5XYXJuOlxuICAgICAgICAgICAgICAgIHByZWZpeCA9IGNvbG9ycy55ZWxsb3coJ1tCbGl0eiBXUk5dJyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIExvZ0xldmVsLkVycm9yOlxuICAgICAgICAgICAgICAgIHByZWZpeCA9IGNvbG9ycy5yZWQoJ1tCbGl0eiBFUlJdJyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIExvZ0xldmVsLkRlYnVnOlxuICAgICAgICAgICAgICAgIHByZWZpeCA9IGNvbG9ycy5tYWdlbnRhKCdbQmxpdHogREJHXScpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBwcmVmaXggPSBMb2dnZXIuYnJhbmQoJ1tCbGl0eiBMT0ddJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKFV0aWwuaXNTdHJpbmcob2JqZWN0KSkge1xuICAgICAgICAgICAgb2JqZWN0ID0gb2JqZWN0LnJlcGxhY2UoL1xcbi9nLCAnXFxuJyArIChuZXcgQXJyYXkoY29sb3JzLnN0cmlwKHByZWZpeCkubGVuZ3RoICsgMikpLmpvaW4oJyAnKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIExvZ2dlci5sb2dXaXRoUHJlZml4KHByZWZpeCwgb2JqZWN0LCBwcmludCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTG9ncyBhbiBhcnJheSBvZiBvYmplY3RzIHRvIGNvbnNvbGVcbiAgICAgKiBAc2luY2UgMC4yLjBcbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIGxvZ01hbnkob2JqZWN0czogYW55W10sIGxldmVsOiBMb2dMZXZlbCA9IExvZ0xldmVsLkxvZykge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG9iamVjdHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIExvZ2dlci5sb2cob2JqZWN0c1tpXSwgbGV2ZWwpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU3RyaXBzIGxlYWRpbmcgYW5kIHRyYWlsaW5nIG5ld2xpbmVzIGJlZm9yZSBzcGxpdHRpbmcgaW50byBzdWJzdHJpbmdzIHVzaW5nIG5ld2xpbmUgYXMgZGVsaW1pdGVyXG4gICAgICogQHNpbmNlIDAuMi4wXG4gICAgICovXG4gICAgcHVibGljIHN0YXRpYyBzcGxpdChzdHJpbmdXaXRoTmV3bGluZXM6IHN0cmluZyk6IHN0cmluZ1tdIHtcbiAgICAgICAgc3RyaW5nV2l0aE5ld2xpbmVzID0gc3RyaW5nV2l0aE5ld2xpbmVzLnJlcGxhY2UoL14oXFxuKSovZywgJycpO1xuICAgICAgICBzdHJpbmdXaXRoTmV3bGluZXMgPSBzdHJpbmdXaXRoTmV3bGluZXMucmVwbGFjZSgvKFxcbikqJC9nLCAnJyk7XG4gICAgICAgIHJldHVybiBzdHJpbmdXaXRoTmV3bGluZXMuc3BsaXQoJ1xcbicpO1xuICAgIH1cbn1cbiJdfQ==
