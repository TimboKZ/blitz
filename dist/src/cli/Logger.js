"use strict";
var colors = require("colors");
var Util_1 = require("../helpers/Util");
var LogLevel;
(function (LogLevel) {
    LogLevel[LogLevel["Log"] = 0] = "Log";
    LogLevel[LogLevel["Warn"] = 1] = "Warn";
    LogLevel[LogLevel["Error"] = 2] = "Error";
    LogLevel[LogLevel["Debug"] = 3] = "Debug";
})(LogLevel = exports.LogLevel || (exports.LogLevel = {}));
var Logger = (function () {
    function Logger() {
    }
    Logger.brand = function (text) {
        return colors.cyan(text);
    };
    Logger.logWithPrefix = function (prefix, object, print) {
        if (print === void 0) { print = true; }
        var logString = prefix + ' ' + object.toString();
        if (print) {
            return console.log(logString);
        }
        return logString;
    };
    Logger.log = function (object, level, print) {
        if (level === void 0) { level = LogLevel.Log; }
        if (print === void 0) { print = true; }
        if (level === LogLevel.Debug && !global.debug) {
            return;
        }
        if ((level === LogLevel.Log || level === LogLevel.Warn) && !global.verbose) {
            return;
        }
        var prefix;
        switch (level) {
            case LogLevel.Warn:
                prefix = colors.yellow('[Blitz WRN]');
                break;
            case LogLevel.Error:
                prefix = colors.red('[Blitz ERR]');
                break;
            case LogLevel.Debug:
                prefix = colors.magenta('[Blitz DBG]');
                break;
            default:
                prefix = Logger.brand('[Blitz LOG]');
        }
        if (Util_1.Util.isString(object)) {
            object = object.replace(/\n/g, '\n' + (new Array(colors.strip(prefix).length + 2)).join(' '));
        }
        return Logger.logWithPrefix(prefix, object, print);
    };
    Logger.logMany = function (objects, level) {
        if (level === void 0) { level = LogLevel.Log; }
        for (var i = 0; i < objects.length; i++) {
            Logger.log(objects[i], level);
        }
    };
    Logger.split = function (stringWithNewlines) {
        stringWithNewlines = stringWithNewlines.replace(/^(\n)*/g, '');
        stringWithNewlines = stringWithNewlines.replace(/(\n)*$/g, '');
        return stringWithNewlines.split('\n');
    };
    return Logger;
}());
exports.Logger = Logger;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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LENBQUMsR0FBRztRQUNoRSxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztZQUN0QyxNQUFNLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUNsQyxDQUFDO0lBQ0wsQ0FBQztJQU1hLFlBQUssR0FBbkIsVUFBb0Isa0JBQTBCO1FBQzFDLGtCQUFrQixHQUFHLGtCQUFrQixDQUFDLE9BQU8sQ0FBQyxTQUFTLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDL0Qsa0JBQWtCLEdBQUcsa0JBQWtCLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUMvRCxNQUFNLENBQUMsa0JBQWtCLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzFDLENBQUM7SUFDTCxhQUFDO0FBQUQsQ0F4RUEsQUF3RUMsSUFBQTtBQXhFWSx3QkFBTSIsImZpbGUiOiJzcmMvY2xpL0xvZ2dlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGUgQ29udGFpbnMgY29kZSByZWxhdGVkIHRvIGRhdGEgbG9nZ2luZ1xuICogQGF1dGhvciBUaW11ciBLdXpoYWdhbGl5ZXYgPHRpbS5rdXpoQGdtYWlsLmNvbT5cbiAqIEBjb3B5cmlnaHQgMjAxNlxuICogQGxpY2Vuc2UgR1BMLTMuMFxuICogQHNpbmNlIDAuMi4wXG4gKi9cblxuaW1wb3J0ICogYXMgY29sb3JzIGZyb20gJ2NvbG9ycyc7XG5pbXBvcnQge1V0aWx9IGZyb20gJy4uL2hlbHBlcnMvVXRpbCc7XG5cbi8qKlxuICogTG9nIGxldmVscyB3aGljaCBjaGFuZ2UgcHJlZml4ZXMsIGNvbmRpdGlvbnMgZm9yIGxvZ2dpbmcgYW5kIGNvbG91cnNcbiAqL1xuZXhwb3J0IGVudW0gTG9nTGV2ZWwge1xuICAgIExvZyxcbiAgICBXYXJuLFxuICAgIEVycm9yLFxuICAgIERlYnVnLFxufVxuXG4vKipcbiAqIEBjbGFzcyBIb2xkcyB2YXJpb3VzIHN0YXRpYyBtZXRob2RzIGZvciBsb2dnaW5nIG9mIGRhdGEgaW50byBjb25zb2xlXG4gKiBAc2luY2UgMC4yLjBcbiAqL1xuZXhwb3J0IGNsYXNzIExvZ2dlciB7XG4gICAgLyoqXG4gICAgICogQ2hhbmdlcyB0aGUgY29sb3Igb2Ygc3VwcGxpZWQgc3RyaW5nIHRvIEJsaXR6IGJyYW5kIGNvbG9yXG4gICAgICogQHNpbmNlIDAuMi4wXG4gICAgICovXG4gICAgcHVibGljIHN0YXRpYyBicmFuZCh0ZXh0OiBzdHJpbmcpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gY29sb3JzLmN5YW4odGV4dCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTG9ncyBhbiBvYmplY3QgdG8gY29uc29sZSBwcmVmaXhpbmcgaXQgd2l0aCB0aGUgc3BlY2lmaWVkIHN0cmluZy5cbiAgICAgKiBAc2luY2UgMC4yLjBcbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIGxvZ1dpdGhQcmVmaXgocHJlZml4OiBzdHJpbmcsIG9iamVjdDogYW55LCBwcmludDogYm9vbGVhbiA9IHRydWUpOiBzdHJpbmd8dm9pZCB7XG4gICAgICAgIGxldCBsb2dTdHJpbmcgPSBwcmVmaXggKyAnICcgKyBvYmplY3QudG9TdHJpbmcoKTtcbiAgICAgICAgaWYgKHByaW50KSB7XG4gICAgICAgICAgICByZXR1cm4gY29uc29sZS5sb2cobG9nU3RyaW5nKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbG9nU3RyaW5nO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIExvZ3MgYSBzaW5nbGUgb2JqZWN0IGludG8gY29uc29sZS4gVHJpbXMgbmV3bGluZSBjaGFyYWN0ZXJzIGFuZCBpbmRlbnRzIGFsbCByZW1haW5pbmcgbmV3IGxpbmVzIHRvIHRoZSBsZW5ndGhcbiAgICAgKiBvZiB0aGUgcHJlZml4LlxuICAgICAqIEBzaW5jZSAwLjIuMFxuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgbG9nKG9iamVjdDogYW55LCBsZXZlbDogTG9nTGV2ZWwgPSBMb2dMZXZlbC5Mb2csIHByaW50OiBib29sZWFuID0gdHJ1ZSk6IHN0cmluZ3x2b2lkIHtcbiAgICAgICAgaWYgKGxldmVsID09PSBMb2dMZXZlbC5EZWJ1ZyAmJiAhZ2xvYmFsLmRlYnVnKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKChsZXZlbCA9PT0gTG9nTGV2ZWwuTG9nIHx8IGxldmVsID09PSBMb2dMZXZlbC5XYXJuKSAmJiAhZ2xvYmFsLnZlcmJvc2UpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBsZXQgcHJlZml4O1xuICAgICAgICBzd2l0Y2ggKGxldmVsKSB7XG4gICAgICAgICAgICBjYXNlIExvZ0xldmVsLldhcm46XG4gICAgICAgICAgICAgICAgcHJlZml4ID0gY29sb3JzLnllbGxvdygnW0JsaXR6IFdSTl0nKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgTG9nTGV2ZWwuRXJyb3I6XG4gICAgICAgICAgICAgICAgcHJlZml4ID0gY29sb3JzLnJlZCgnW0JsaXR6IEVSUl0nKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgTG9nTGV2ZWwuRGVidWc6XG4gICAgICAgICAgICAgICAgcHJlZml4ID0gY29sb3JzLm1hZ2VudGEoJ1tCbGl0eiBEQkddJyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHByZWZpeCA9IExvZ2dlci5icmFuZCgnW0JsaXR6IExPR10nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoVXRpbC5pc1N0cmluZyhvYmplY3QpKSB7XG4gICAgICAgICAgICBvYmplY3QgPSBvYmplY3QucmVwbGFjZSgvXFxuL2csICdcXG4nICsgKG5ldyBBcnJheShjb2xvcnMuc3RyaXAocHJlZml4KS5sZW5ndGggKyAyKSkuam9pbignICcpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gTG9nZ2VyLmxvZ1dpdGhQcmVmaXgocHJlZml4LCBvYmplY3QsIHByaW50KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBMb2dzIGFuIGFycmF5IG9mIG9iamVjdHMgdG8gY29uc29sZVxuICAgICAqIEBzaW5jZSAwLjIuMFxuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgbG9nTWFueShvYmplY3RzOiBhbnlbXSwgbGV2ZWw6IExvZ0xldmVsID0gTG9nTGV2ZWwuTG9nKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgb2JqZWN0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgTG9nZ2VyLmxvZyhvYmplY3RzW2ldLCBsZXZlbCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTdHJpcHMgbGVhZGluZyBhbmQgdHJhaWxpbmcgbmV3bGluZXMgYmVmb3JlIHNwbGl0dGluZyBpbnRvIHN1YnN0cmluZ3MgdXNpbmcgbmV3bGluZSBhcyBkZWxpbWl0ZXJcbiAgICAgKiBAc2luY2UgMC4yLjBcbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIHNwbGl0KHN0cmluZ1dpdGhOZXdsaW5lczogc3RyaW5nKTogc3RyaW5nW10ge1xuICAgICAgICBzdHJpbmdXaXRoTmV3bGluZXMgPSBzdHJpbmdXaXRoTmV3bGluZXMucmVwbGFjZSgvXihcXG4pKi9nLCAnJyk7XG4gICAgICAgIHN0cmluZ1dpdGhOZXdsaW5lcyA9IHN0cmluZ1dpdGhOZXdsaW5lcy5yZXBsYWNlKC8oXFxuKSokL2csICcnKTtcbiAgICAgICAgcmV0dXJuIHN0cmluZ1dpdGhOZXdsaW5lcy5zcGxpdCgnXFxuJyk7XG4gICAgfVxufVxuIl19
