"use strict";
var path = require("path");
var GenericDirectory = (function () {
    function GenericDirectory(rootPath, relativePath, name, files, directories) {
        if (relativePath === void 0) { relativePath = []; }
        if (name === void 0) { name = ''; }
        if (files === void 0) { files = {}; }
        if (directories === void 0) { directories = {}; }
        this.rootPath = rootPath;
        this.relativePath = relativePath;
        this.name = name;
        var relativePathString = path.join.apply(undefined, this.relativePath);
        this.fullPath = path.join(this.rootPath, relativePathString, this.name);
        this.files = files;
        this.directories = directories;
    }
    GenericDirectory.prototype.addFile = function (file) {
        this.files[file.getName()] = file;
    };
    GenericDirectory.prototype.removeFile = function (fileName) {
        if (this.files[fileName]) {
            delete this.files[fileName];
        }
    };
    GenericDirectory.prototype.addDirectory = function (directory) {
        this.directories[directory.getName()] = directory;
    };
    GenericDirectory.prototype.removeDirectory = function (directoryName) {
        if (this.directories[directoryName]) {
            delete this.directories[directoryName];
        }
    };
    GenericDirectory.prototype.getFullPath = function () {
        return this.fullPath;
    };
    GenericDirectory.prototype.getName = function () {
        return this.name;
    };
    return GenericDirectory;
}());
exports.GenericDirectory = GenericDirectory;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9maWxlcy9HZW5lcmljRGlyZWN0b3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFRQSwyQkFBNkI7QUF3QjdCO0lBeUNJLDBCQUFZLFFBQWdCLEVBQ2hCLFlBQTJCLEVBQzNCLElBQWlCLEVBQ2pCLEtBQXlCLEVBQ3pCLFdBQW9DO1FBSHBDLDZCQUFBLEVBQUEsaUJBQTJCO1FBQzNCLHFCQUFBLEVBQUEsU0FBaUI7UUFDakIsc0JBQUEsRUFBQSxVQUF5QjtRQUN6Qiw0QkFBQSxFQUFBLGdCQUFvQztRQUM1QyxJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztRQUN6QixJQUFJLENBQUMsWUFBWSxHQUFHLFlBQVksQ0FBQztRQUNqQyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUNqQixJQUFJLGtCQUFrQixHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDdkUsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3hFLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxXQUFXLEdBQUcsV0FBVyxDQUFDO0lBQ25DLENBQUM7SUFLTSxrQ0FBTyxHQUFkLFVBQWUsSUFBaUI7UUFDNUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDdEMsQ0FBQztJQUtNLHFDQUFVLEdBQWpCLFVBQWtCLFFBQWdCO1FBQzlCLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3ZCLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNoQyxDQUFDO0lBQ0wsQ0FBQztJQUtNLHVDQUFZLEdBQW5CLFVBQW9CLFNBQTJCO1FBQzNDLElBQUksQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLE9BQU8sRUFBRSxDQUFDLEdBQUcsU0FBUyxDQUFDO0lBQ3RELENBQUM7SUFLTSwwQ0FBZSxHQUF0QixVQUF1QixhQUFxQjtRQUN4QyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNsQyxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDM0MsQ0FBQztJQUNMLENBQUM7SUFNTSxzQ0FBVyxHQUFsQjtRQUNJLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDO0lBQ3pCLENBQUM7SUFLTSxrQ0FBTyxHQUFkO1FBQ0ksTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7SUFDckIsQ0FBQztJQUNMLHVCQUFDO0FBQUQsQ0FyR0EsQUFxR0MsSUFBQTtBQXJHWSw0Q0FBZ0IiLCJmaWxlIjoic3JjL2ZpbGVzL0dlbmVyaWNEaXJlY3RvcnkuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlIENvbnRhaW5zIGFsbCBnZW5lcmljIEZpbGUgY2xhc3NlcyBhbmQgaW50ZXJmYWNlc1xuICogQGF1dGhvciBUaW11ciBLdXpoYWdhbGl5ZXYgPHRpbS5rdXpoQGdtYWlsLmNvbT5cbiAqIEBjb3B5cmlnaHQgMjAxNlxuICogQGxpY2Vuc2UgR1BMLTMuMFxuICogQHNpbmNlIDAuMi4wXG4gKi9cblxuaW1wb3J0ICogYXMgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCAqIGFzIGZzZSBmcm9tICdmcy1leHRyYSc7XG5pbXBvcnQge0dlbmVyaWNGaWxlfSBmcm9tICcuL0dlbmVyaWNGaWxlJztcblxuLyoqXG4gKiBJbnRlcmZhY2UgZm9yIGEgbWFwIG9mIGZpbGVzIGluIHRoZSBkaXJlY3RvcnlcbiAqIEBzaW5jZSAwLjIuMFxuICovXG5leHBvcnQgaW50ZXJmYWNlIElDaGlsZEZpbGVNYXAge1xuICAgIFtmaWxlTmFtZTogc3RyaW5nXTogR2VuZXJpY0ZpbGU7XG59XG5cbi8qKlxuICogSW50ZXJmYWNlIGZvciBhIG1hcCBvZiBjaGlsZCBkaXJlY3Rvcmllc1xuICogQHNpbmNlIDAuMi4wXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSUNoaWxkRGlyZWN0b3J5TWFwIHtcbiAgICBbZGlyZWN0b3J5TmFtZTogc3RyaW5nXTogR2VuZXJpY0RpcmVjdG9yeTtcbn1cblxuLyoqXG4gKiBAY2xhc3MgQSBjbGFzcy5cbiAqIEBzaW5jZSAwLjIuMFxuICovXG5leHBvcnQgY2xhc3MgR2VuZXJpY0RpcmVjdG9yeSB7XG4gICAgLyoqXG4gICAgICogUGF0aCBpbiBhIGZpbGUgc3lzdGVtIHRoYXQgd2lsbCBiZSBhcHBlbmRlZCB0byB0aGUgcmVsYXRpdmUgcGF0aFxuICAgICAqIEBzaW5jZSAwLjIuMFxuICAgICAqL1xuICAgIHByb3RlY3RlZCByb290UGF0aDogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogUGF0aCByZWxhdGl2ZSB0byB0aGUgcm9vdCBwYXRoIHNwZWNpZmllZCBhYm92ZSwgZXhjbHVkaW5nIHRoZSBuYW1lIG9mIHRoZSBkaXJlY3RvcnlcbiAgICAgKiBAc2luY2UgMC4yLjBcbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgcmVsYXRpdmVQYXRoOiBzdHJpbmdbXTtcblxuICAgIC8qKlxuICAgICAqIE5hbWUgb2YgdGhlIGRpcmVjdG9yeVxuICAgICAqIEBzaW5jZSAwLjIuMFxuICAgICAqL1xuICAgIHByb3RlY3RlZCBuYW1lOiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBGdWxsIHBhdGggdG8gdGhlIGRpcmVjdG9yeVxuICAgICAqIEBzaW5jZSAwLjIuMFxuICAgICAqL1xuICAgIHByb3RlY3RlZCBmdWxsUGF0aDogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogRmlsZXMgaW4gdGhlIGRpcmVjdG9yeVxuICAgICAqIEBzaW5jZSAwLjIuMFxuICAgICAqL1xuICAgIHByb3RlY3RlZCBmaWxlczogSUNoaWxkRmlsZU1hcDtcblxuICAgIC8qKlxuICAgICAqIENoaWxkIGRpcmVjdG9yaWVzXG4gICAgICogQHNpbmNlIDAuMi4wXG4gICAgICovXG4gICAgcHJvdGVjdGVkIGRpcmVjdG9yaWVzOiBJQ2hpbGREaXJlY3RvcnlNYXA7XG5cbiAgICAvKipcbiAgICAgKiBHZW5lcmljRmlsZSBjb25zdHJ1Y3RvclxuICAgICAqIEBzaW5jZSAwLjIuMFxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHJvb3RQYXRoOiBzdHJpbmcsXG4gICAgICAgICAgICAgICAgcmVsYXRpdmVQYXRoOiBzdHJpbmdbXSA9IFtdLFxuICAgICAgICAgICAgICAgIG5hbWU6IHN0cmluZyA9ICcnLFxuICAgICAgICAgICAgICAgIGZpbGVzOiBJQ2hpbGRGaWxlTWFwID0ge30sXG4gICAgICAgICAgICAgICAgZGlyZWN0b3JpZXM6IElDaGlsZERpcmVjdG9yeU1hcCA9IHt9KSB7XG4gICAgICAgIHRoaXMucm9vdFBhdGggPSByb290UGF0aDtcbiAgICAgICAgdGhpcy5yZWxhdGl2ZVBhdGggPSByZWxhdGl2ZVBhdGg7XG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgICAgIGxldCByZWxhdGl2ZVBhdGhTdHJpbmcgPSBwYXRoLmpvaW4uYXBwbHkodW5kZWZpbmVkLCB0aGlzLnJlbGF0aXZlUGF0aCk7XG4gICAgICAgIHRoaXMuZnVsbFBhdGggPSBwYXRoLmpvaW4odGhpcy5yb290UGF0aCwgcmVsYXRpdmVQYXRoU3RyaW5nLCB0aGlzLm5hbWUpO1xuICAgICAgICB0aGlzLmZpbGVzID0gZmlsZXM7XG4gICAgICAgIHRoaXMuZGlyZWN0b3JpZXMgPSBkaXJlY3RvcmllcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAc2luY2UgMC4yLjBcbiAgICAgKi9cbiAgICBwdWJsaWMgYWRkRmlsZShmaWxlOiBHZW5lcmljRmlsZSkge1xuICAgICAgICB0aGlzLmZpbGVzW2ZpbGUuZ2V0TmFtZSgpXSA9IGZpbGU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHNpbmNlIDAuMi4wXG4gICAgICovXG4gICAgcHVibGljIHJlbW92ZUZpbGUoZmlsZU5hbWU6IHN0cmluZykge1xuICAgICAgICBpZiAodGhpcy5maWxlc1tmaWxlTmFtZV0pIHtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmZpbGVzW2ZpbGVOYW1lXTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBzaW5jZSAwLjIuMFxuICAgICAqL1xuICAgIHB1YmxpYyBhZGREaXJlY3RvcnkoZGlyZWN0b3J5OiBHZW5lcmljRGlyZWN0b3J5KSB7XG4gICAgICAgIHRoaXMuZGlyZWN0b3JpZXNbZGlyZWN0b3J5LmdldE5hbWUoKV0gPSBkaXJlY3Rvcnk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHNpbmNlIDAuMi4wXG4gICAgICovXG4gICAgcHVibGljIHJlbW92ZURpcmVjdG9yeShkaXJlY3RvcnlOYW1lOiBzdHJpbmcpIHtcbiAgICAgICAgaWYgKHRoaXMuZGlyZWN0b3JpZXNbZGlyZWN0b3J5TmFtZV0pIHtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmRpcmVjdG9yaWVzW2RpcmVjdG9yeU5hbWVdO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBmdWxsIHBhdGggdG8gdGhlIGZpbGVcbiAgICAgKiBAc2luY2UgMC4yLjBcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0RnVsbFBhdGgoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZnVsbFBhdGg7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHNpbmNlIDAuMi4wXG4gICAgICovXG4gICAgcHVibGljIGdldE5hbWUoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubmFtZTtcbiAgICB9XG59XG4iXX0=
