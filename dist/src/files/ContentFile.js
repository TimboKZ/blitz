"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var fm = require('front-matter');
var deepEqual = require('deep-equal');
var deepDiff = require('deep-diff');
var Logger_1 = require('../Logger');
var GenericFile_1 = require('./GenericFile');
var Content_1 = require('./Content');
var ContentFile = (function (_super) {
    __extends(ContentFile, _super);
    function ContentFile(rootPath, relativePath) {
        _super.call(this, rootPath, [], relativePath);
        this.relativePath = relativePath;
        this.attributes = {};
        this.content = new Content_1.Content();
    }
    ContentFile.prototype.reload = function () {
        var changes = {};
        var tempContents = this.contents;
        this.read();
        if (tempContents === this.contents) {
            return changes;
        }
        var contentsObject = fm(this.contents);
        if (!deepEqual(this.attributes, contentsObject.attributes)) {
            changes.attributes = deepDiff.diff(this.attributes, contentsObject.attributes);
            this.attributes = contentsObject.attributes;
        }
        if (this.rawContent !== contentsObject.body) {
            this.rawContent = contentsObject.body;
            this.content.prepare(this.rawContent);
            changes.content = {};
            changes.content.ids = this.content.getIds();
            changes.content.assets = this.content.getAssets();
            changes.content.generator = this.content.generate;
        }
        return changes;
    };
    ContentFile.prototype.write = function () {
        throw new Error('Attempted to write to a content file `' + Logger_1.Logger.brand(this.name) + '`. This is not allowed!');
    };
    ContentFile.prototype.getAttributes = function () {
        return this.attributes;
    };
    ContentFile.prototype.getContent = function () {
        return this.content;
    };
    return ContentFile;
}(GenericFile_1.GenericFile));
exports.ContentFile = ContentFile;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9maWxlcy9Db250ZW50RmlsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFRQSxJQUFZLEVBQUUsV0FBTSxjQUFjLENBQUMsQ0FBQTtBQUNuQyxJQUFZLFNBQVMsV0FBTSxZQUFZLENBQUMsQ0FBQTtBQUN4QyxJQUFZLFFBQVEsV0FBTSxXQUFXLENBQUMsQ0FBQTtBQUN0Qyx1QkFBcUIsV0FBVyxDQUFDLENBQUE7QUFDakMsNEJBQTBCLGVBQWUsQ0FBQyxDQUFBO0FBQzFDLHdCQUFzQixXQUFXLENBQUMsQ0FBQTtBQStCbEM7SUFBaUMsK0JBQVc7SUE0QnhDLHFCQUFtQixRQUFnQixFQUFFLFlBQW9CO1FBQ3JELGtCQUFNLFFBQVEsRUFBRSxFQUFFLEVBQUUsWUFBWSxDQUFDLENBQUM7UUFDbEMsSUFBSSxDQUFDLFlBQVksR0FBRyxZQUFZLENBQUM7UUFDakMsSUFBSSxDQUFDLFVBQVUsR0FBRyxFQUFFLENBQUM7UUFDckIsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLGlCQUFPLEVBQUUsQ0FBQztJQUNqQyxDQUFDO0lBTU0sNEJBQU0sR0FBYjtRQUNJLElBQUksT0FBTyxHQUFRLEVBQUUsQ0FBQztRQUN0QixJQUFJLFlBQVksR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDO1FBQ2pDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNaLEVBQUUsQ0FBQyxDQUFDLFlBQVksS0FBSyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztZQUNqQyxNQUFNLENBQUMsT0FBTyxDQUFDO1FBQ25CLENBQUM7UUFDRCxJQUFJLGNBQWMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3ZDLEVBQUUsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsY0FBYyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN6RCxPQUFPLENBQUMsVUFBVSxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxjQUFjLENBQUMsVUFBVSxDQUFDLENBQUM7WUFDL0UsSUFBSSxDQUFDLFVBQVUsR0FBRyxjQUFjLENBQUMsVUFBVSxDQUFDO1FBQ2hELENBQUM7UUFDRCxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxLQUFLLGNBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQzFDLElBQUksQ0FBQyxVQUFVLEdBQUcsY0FBYyxDQUFDLElBQUksQ0FBQztZQUN0QyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7WUFDdEMsT0FBTyxDQUFDLE9BQU8sR0FBRyxFQUFFLENBQUM7WUFDckIsT0FBTyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQztZQUM1QyxPQUFPLENBQUMsT0FBTyxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxDQUFDO1lBQ2xELE9BQU8sQ0FBQyxPQUFPLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDO1FBQ3RELENBQUM7UUFDRCxNQUFNLENBQUMsT0FBOEIsQ0FBQztJQUMxQyxDQUFDO0lBTU0sMkJBQUssR0FBWjtRQUNJLE1BQU0sSUFBSSxLQUFLLENBQUMsd0NBQXdDLEdBQUcsZUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcseUJBQXlCLENBQUMsQ0FBQztJQUNwSCxDQUFDO0lBS00sbUNBQWEsR0FBcEI7UUFDSSxNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQztJQUMzQixDQUFDO0lBS00sZ0NBQVUsR0FBakI7UUFDSSxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQztJQUN4QixDQUFDO0lBQ0wsa0JBQUM7QUFBRCxDQW5GQSxBQW1GQyxDQW5GZ0MseUJBQVcsR0FtRjNDO0FBbkZZLG1CQUFXLGNBbUZ2QixDQUFBIiwiZmlsZSI6InNyYy9maWxlcy9Db250ZW50RmlsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGUgQ29udGFpbnMgY29kZSByZWxhdGVkIENvbnRlbnQgRmlsZSBwYXJzaW5nXG4gKiBAYXV0aG9yIFRpbXVyIEt1emhhZ2FsaXlldiA8dGltLmt1emhAZ21haWwuY29tPlxuICogQGNvcHlyaWdodCAyMDE2XG4gKiBAbGljZW5zZSBHUEwtMy4wXG4gKiBAc2luY2UgMC4yLjBcbiAqL1xuXG5pbXBvcnQgKiBhcyBmbSBmcm9tICdmcm9udC1tYXR0ZXInO1xuaW1wb3J0ICogYXMgZGVlcEVxdWFsIGZyb20gJ2RlZXAtZXF1YWwnO1xuaW1wb3J0ICogYXMgZGVlcERpZmYgZnJvbSAnZGVlcC1kaWZmJztcbmltcG9ydCB7TG9nZ2VyfSBmcm9tICcuLi9Mb2dnZXInO1xuaW1wb3J0IHtHZW5lcmljRmlsZX0gZnJvbSAnLi9HZW5lcmljRmlsZSc7XG5pbXBvcnQge0NvbnRlbnR9IGZyb20gJy4vQ29udGVudCc7XG5pbXBvcnQge0NvbnRlbnRQYXJzZXJ9IGZyb20gJy4uL0NvbnRlbnRQYXJzZXInO1xuaW1wb3J0IHtJQXNzZXRQYXRoR2VuZXJhdG9yLCBJVXJsR2VuZXJhdG9yfSBmcm9tICcuLi9TaXRlR2VuZXJhdG9yJztcblxuLyoqXG4gKiBBdHRyaWJ1dGVzIGRlZmluZWQgaW4gdGhlIGZyb250IG1hdHRlciBvZiBhIGNvbnRlbnQgZmlsZVxuICogQHNpbmNlIDAuMi4wXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSUNvbnRlbnRGaWxlQXR0cmlidXRlcyB7XG4gICAgW2tleTogc3RyaW5nXTogYW55O1xufVxuXG4vKipcbiAqXG4gKiBAc2luY2UgMC4yLjBcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJQ29udGVudEZpbGVDaGFuZ2VzIHtcbiAgICBhdHRyaWJ1dGVzOiBkZWVwRGlmZi5JRGlmZltdO1xuICAgIGNvbnRlbnQ6IHtcbiAgICAgICAgaWRzOiBzdHJpbmdbXSxcbiAgICAgICAgYXNzZXRzOiBzdHJpbmdbXSxcbiAgICAgICAgZ2VuZXJhdG9yOiAodXJsR2VuZXJhdG9yOiBJVXJsR2VuZXJhdG9yLFxuICAgICAgICAgICAgICAgICAgICBhc3NldFBhdGhHZW5lcmF0b3I6IElBc3NldFBhdGhHZW5lcmF0b3IsXG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnRQYXJzZXI6IENvbnRlbnRQYXJzZXIpID0+IHN0cmluZyxcbiAgICB9O1xufVxuXG4vKipcbiAqIEBjbGFzcyBGaWxlIHJlc3BvbnNpYmxlIGZvciByZXByZXNlbnRpbmcgY29udGVudCBmaWxlc1xuICogQHNpbmNlIDAuMi4wXG4gKi9cbmV4cG9ydCBjbGFzcyBDb250ZW50RmlsZSBleHRlbmRzIEdlbmVyaWNGaWxlIHtcbiAgICAvKipcbiAgICAgKiBAc2luY2UgMC4yLjBcbiAgICAgKi9cbiAgICBwcml2YXRlIHJlbGF0aXZlUGF0aDogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlcyBleHRyYWN0ZWQgZnJvbSB0aGUgZnJvbnQgbWF0dGVyXG4gICAgICogQHNpbmNlIDAuMi4wXG4gICAgICovXG4gICAgcHJpdmF0ZSBhdHRyaWJ1dGVzOiBJQ29udGVudEZpbGVBdHRyaWJ1dGVzO1xuXG4gICAgLyoqXG4gICAgICogUmF3IGNvbnRlbnQgb2YgYSBjb250ZW50IGZpbGUgKGV2ZXJ5dGhpbmcgZXhjZXB0IHRoZSBmcm9udCBtYXR0ZXIpXG4gICAgICogQHNpbmNlIDAuMi4wXG4gICAgICovXG4gICAgcHJpdmF0ZSByYXdDb250ZW50OiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBQcm9jZXNzZWQgY29udGVudFxuICAgICAqIEBzaW5jZSAwLjIuMFxuICAgICAqL1xuICAgIHByaXZhdGUgY29udGVudDogQ29udGVudDtcblxuICAgIC8qKlxuICAgICAqIENvbnRlbnRGaWxlIGNvbnN0cnVjdG9yXG4gICAgICogQHNpbmNlIDAuMi4wXG4gICAgICovXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKHJvb3RQYXRoOiBzdHJpbmcsIHJlbGF0aXZlUGF0aDogc3RyaW5nKSB7XG4gICAgICAgIHN1cGVyKHJvb3RQYXRoLCBbXSwgcmVsYXRpdmVQYXRoKTtcbiAgICAgICAgdGhpcy5yZWxhdGl2ZVBhdGggPSByZWxhdGl2ZVBhdGg7XG4gICAgICAgIHRoaXMuYXR0cmlidXRlcyA9IHt9O1xuICAgICAgICB0aGlzLmNvbnRlbnQgPSBuZXcgQ29udGVudCgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbG9hZHMgdGhlIGNvbnRlbnRzIG9mIHRoZSBmaWxlIGFuZCBwcm9jZXNzZXMgYW55IGNoYW5nZXNcbiAgICAgKiBAc2luY2UgMC4yLjBcbiAgICAgKi9cbiAgICBwdWJsaWMgcmVsb2FkKCk6IElDb250ZW50RmlsZUNoYW5nZXMge1xuICAgICAgICBsZXQgY2hhbmdlczogYW55ID0ge307XG4gICAgICAgIGxldCB0ZW1wQ29udGVudHMgPSB0aGlzLmNvbnRlbnRzO1xuICAgICAgICB0aGlzLnJlYWQoKTtcbiAgICAgICAgaWYgKHRlbXBDb250ZW50cyA9PT0gdGhpcy5jb250ZW50cykge1xuICAgICAgICAgICAgcmV0dXJuIGNoYW5nZXM7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGNvbnRlbnRzT2JqZWN0ID0gZm0odGhpcy5jb250ZW50cyk7XG4gICAgICAgIGlmICghZGVlcEVxdWFsKHRoaXMuYXR0cmlidXRlcywgY29udGVudHNPYmplY3QuYXR0cmlidXRlcykpIHtcbiAgICAgICAgICAgIGNoYW5nZXMuYXR0cmlidXRlcyA9IGRlZXBEaWZmLmRpZmYodGhpcy5hdHRyaWJ1dGVzLCBjb250ZW50c09iamVjdC5hdHRyaWJ1dGVzKTtcbiAgICAgICAgICAgIHRoaXMuYXR0cmlidXRlcyA9IGNvbnRlbnRzT2JqZWN0LmF0dHJpYnV0ZXM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMucmF3Q29udGVudCAhPT0gY29udGVudHNPYmplY3QuYm9keSkge1xuICAgICAgICAgICAgdGhpcy5yYXdDb250ZW50ID0gY29udGVudHNPYmplY3QuYm9keTtcbiAgICAgICAgICAgIHRoaXMuY29udGVudC5wcmVwYXJlKHRoaXMucmF3Q29udGVudCk7XG4gICAgICAgICAgICBjaGFuZ2VzLmNvbnRlbnQgPSB7fTtcbiAgICAgICAgICAgIGNoYW5nZXMuY29udGVudC5pZHMgPSB0aGlzLmNvbnRlbnQuZ2V0SWRzKCk7XG4gICAgICAgICAgICBjaGFuZ2VzLmNvbnRlbnQuYXNzZXRzID0gdGhpcy5jb250ZW50LmdldEFzc2V0cygpO1xuICAgICAgICAgICAgY2hhbmdlcy5jb250ZW50LmdlbmVyYXRvciA9IHRoaXMuY29udGVudC5nZW5lcmF0ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY2hhbmdlcyBhcyBJQ29udGVudEZpbGVDaGFuZ2VzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRocm93cyBhbiBlcnJvciBiZWNhdXNlIGNvbnRlbnQgZmlsZXMgc2hvdWxkIG5vdCBiZSB3cml0dGVuIHRvXG4gICAgICogQHNpbmNlIDAuMi4wXG4gICAgICovXG4gICAgcHVibGljIHdyaXRlKCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0F0dGVtcHRlZCB0byB3cml0ZSB0byBhIGNvbnRlbnQgZmlsZSBgJyArIExvZ2dlci5icmFuZCh0aGlzLm5hbWUpICsgJ2AuIFRoaXMgaXMgbm90IGFsbG93ZWQhJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHNpbmNlIDAuMi4wXG4gICAgICovXG4gICAgcHVibGljIGdldEF0dHJpYnV0ZXMoKTogSUNvbnRlbnRGaWxlQXR0cmlidXRlcyB7XG4gICAgICAgIHJldHVybiB0aGlzLmF0dHJpYnV0ZXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHNpbmNlIDAuMi4wXG4gICAgICovXG4gICAgcHVibGljIGdldENvbnRlbnQoKTogQ29udGVudCB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbnRlbnQ7XG4gICAgfVxufVxuIl19
