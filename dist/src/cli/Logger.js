"use strict";
var colors = require('colors');
var Util_1 = require('../helpers/Util');
(function (LogLevel) {
    LogLevel[LogLevel["Log"] = 0] = "Log";
    LogLevel[LogLevel["Warn"] = 1] = "Warn";
    LogLevel[LogLevel["Error"] = 2] = "Error";
    LogLevel[LogLevel["Debug"] = 3] = "Debug";
})(exports.LogLevel || (exports.LogLevel = {}));
var LogLevel = exports.LogLevel;
var Logger = (function () {
    function Logger() {
    }
    Logger.brand = function (text) {
        return colors.cyan(text);
    };
    Logger.logWithPrefix = function (prefix, object, print) {
        if (print === void 0) { print = true; }
        var logString = prefix + ' ' + object.toString();
        if (print) {
            return console.log(logString);
        }
        return logString;
    };
    Logger.log = function (object, level, print) {
        if (level === void 0) { level = LogLevel.Log; }
        if (print === void 0) { print = true; }
        if (level === LogLevel.Debug && !global.debug) {
            return;
        }
        if ((level === LogLevel.Log || level === LogLevel.Warn) && !global.verbose) {
            return;
        }
        var prefix;
        switch (level) {
            case LogLevel.Warn:
                prefix = colors.yellow('[Blitz WRN]');
                break;
            case LogLevel.Error:
                prefix = colors.red('[Blitz ERR]');
                break;
            case LogLevel.Debug:
                prefix = colors.magenta('[Blitz DBG]');
                break;
            default:
                prefix = Logger.brand('[Blitz LOG]');
        }
        if (Util_1.Util.isString(object)) {
            object = object.replace(/\n/g, '\n' + (new Array(colors.strip(prefix).length + 2)).join(' '));
        }
        return Logger.logWithPrefix(prefix, object, print);
    };
    Logger.logMany = function (objects, level) {
        if (level === void 0) { level = LogLevel.Log; }
        for (var i = 0; i < objects.length; i++) {
            Logger.log(objects[i], level);
        }
    };
    Logger.split = function (stringWithNewlines) {
        stringWithNewlines = stringWithNewlines.replace(/^(\n)*/g, '');
        stringWithNewlines = stringWithNewlines.replace(/(\n)*$/g, '');
        return stringWithNewlines.split('\n');
    };
    return Logger;
}());
exports.Logger = Logger;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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ckIsVUFBc0IsT0FBYyxFQUFFLEtBQThCO1FBQTlCLHFCQUE4QixHQUE5QixRQUFrQixRQUFRLENBQUMsR0FBRztRQUNoRSxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztZQUN0QyxNQUFNLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUNsQyxDQUFDO0lBQ0wsQ0FBQztJQU1hLFlBQUssR0FBbkIsVUFBb0Isa0JBQTBCO1FBQzFDLGtCQUFrQixHQUFHLGtCQUFrQixDQUFDLE9BQU8sQ0FBQyxTQUFTLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDL0Qsa0JBQWtCLEdBQUcsa0JBQWtCLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUMvRCxNQUFNLENBQUMsa0JBQWtCLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzFDLENBQUM7SUFDTCxhQUFDO0FBQUQsQ0F4RUEsQUF3RUMsSUFBQTtBQXhFWSxjQUFNLFNBd0VsQixDQUFBIiwiZmlsZSI6InNyYy9jbGkvTG9nZ2VyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZSBDb250YWlucyBjb2RlIHJlbGF0ZWQgdG8gZGF0YSBsb2dnaW5nXG4gKiBAYXV0aG9yIFRpbXVyIEt1emhhZ2FsaXlldiA8dGltLmt1emhAZ21haWwuY29tPlxuICogQGNvcHlyaWdodCAyMDE2XG4gKiBAbGljZW5zZSBHUEwtMy4wXG4gKiBAc2luY2UgMC4yLjBcbiAqL1xuXG5pbXBvcnQgKiBhcyBjb2xvcnMgZnJvbSAnY29sb3JzJztcbmltcG9ydCB7VXRpbH0gZnJvbSAnLi4vaGVscGVycy9VdGlsJztcblxuLyoqXG4gKiBMb2cgbGV2ZWxzIHdoaWNoIGNoYW5nZSBwcmVmaXhlcywgY29uZGl0aW9ucyBmb3IgbG9nZ2luZyBhbmQgY29sb3Vyc1xuICovXG5leHBvcnQgZW51bSBMb2dMZXZlbCB7XG4gICAgTG9nLFxuICAgIFdhcm4sXG4gICAgRXJyb3IsXG4gICAgRGVidWcsXG59XG5cbi8qKlxuICogQGNsYXNzIEhvbGRzIHZhcmlvdXMgc3RhdGljIG1ldGhvZHMgZm9yIGxvZ2dpbmcgb2YgZGF0YSBpbnRvIGNvbnNvbGVcbiAqIEBzaW5jZSAwLjIuMFxuICovXG5leHBvcnQgY2xhc3MgTG9nZ2VyIHtcbiAgICAvKipcbiAgICAgKiBDaGFuZ2VzIHRoZSBjb2xvciBvZiBzdXBwbGllZCBzdHJpbmcgdG8gQmxpdHogYnJhbmQgY29sb3JcbiAgICAgKiBAc2luY2UgMC4yLjBcbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIGJyYW5kKHRleHQ6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBjb2xvcnMuY3lhbih0ZXh0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBMb2dzIGFuIG9iamVjdCB0byBjb25zb2xlIHByZWZpeGluZyBpdCB3aXRoIHRoZSBzcGVjaWZpZWQgc3RyaW5nLlxuICAgICAqIEBzaW5jZSAwLjIuMFxuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgbG9nV2l0aFByZWZpeChwcmVmaXg6IHN0cmluZywgb2JqZWN0OiBhbnksIHByaW50OiBib29sZWFuID0gdHJ1ZSk6IHN0cmluZ3x2b2lkIHtcbiAgICAgICAgbGV0IGxvZ1N0cmluZyA9IHByZWZpeCArICcgJyArIG9iamVjdC50b1N0cmluZygpO1xuICAgICAgICBpZiAocHJpbnQpIHtcbiAgICAgICAgICAgIHJldHVybiBjb25zb2xlLmxvZyhsb2dTdHJpbmcpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBsb2dTdHJpbmc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTG9ncyBhIHNpbmdsZSBvYmplY3QgaW50byBjb25zb2xlLiBUcmltcyBuZXdsaW5lIGNoYXJhY3RlcnMgYW5kIGluZGVudHMgYWxsIHJlbWFpbmluZyBuZXcgbGluZXMgdG8gdGhlIGxlbmd0aFxuICAgICAqIG9mIHRoZSBwcmVmaXguXG4gICAgICogQHNpbmNlIDAuMi4wXG4gICAgICovXG4gICAgcHVibGljIHN0YXRpYyBsb2cob2JqZWN0OiBhbnksIGxldmVsOiBMb2dMZXZlbCA9IExvZ0xldmVsLkxvZywgcHJpbnQ6IGJvb2xlYW4gPSB0cnVlKTogc3RyaW5nfHZvaWQge1xuICAgICAgICBpZiAobGV2ZWwgPT09IExvZ0xldmVsLkRlYnVnICYmICFnbG9iYWwuZGVidWcpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoKGxldmVsID09PSBMb2dMZXZlbC5Mb2cgfHwgbGV2ZWwgPT09IExvZ0xldmVsLldhcm4pICYmICFnbG9iYWwudmVyYm9zZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGxldCBwcmVmaXg7XG4gICAgICAgIHN3aXRjaCAobGV2ZWwpIHtcbiAgICAgICAgICAgIGNhc2UgTG9nTGV2ZWwuV2FybjpcbiAgICAgICAgICAgICAgICBwcmVmaXggPSBjb2xvcnMueWVsbG93KCdbQmxpdHogV1JOXScpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBMb2dMZXZlbC5FcnJvcjpcbiAgICAgICAgICAgICAgICBwcmVmaXggPSBjb2xvcnMucmVkKCdbQmxpdHogRVJSXScpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBMb2dMZXZlbC5EZWJ1ZzpcbiAgICAgICAgICAgICAgICBwcmVmaXggPSBjb2xvcnMubWFnZW50YSgnW0JsaXR6IERCR10nKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcHJlZml4ID0gTG9nZ2VyLmJyYW5kKCdbQmxpdHogTE9HXScpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChVdGlsLmlzU3RyaW5nKG9iamVjdCkpIHtcbiAgICAgICAgICAgIG9iamVjdCA9IG9iamVjdC5yZXBsYWNlKC9cXG4vZywgJ1xcbicgKyAobmV3IEFycmF5KGNvbG9ycy5zdHJpcChwcmVmaXgpLmxlbmd0aCArIDIpKS5qb2luKCcgJykpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBMb2dnZXIubG9nV2l0aFByZWZpeChwcmVmaXgsIG9iamVjdCwgcHJpbnQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIExvZ3MgYW4gYXJyYXkgb2Ygb2JqZWN0cyB0byBjb25zb2xlXG4gICAgICogQHNpbmNlIDAuMi4wXG4gICAgICovXG4gICAgcHVibGljIHN0YXRpYyBsb2dNYW55KG9iamVjdHM6IGFueVtdLCBsZXZlbDogTG9nTGV2ZWwgPSBMb2dMZXZlbC5Mb2cpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvYmplY3RzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBMb2dnZXIubG9nKG9iamVjdHNbaV0sIGxldmVsKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFN0cmlwcyBsZWFkaW5nIGFuZCB0cmFpbGluZyBuZXdsaW5lcyBiZWZvcmUgc3BsaXR0aW5nIGludG8gc3Vic3RyaW5ncyB1c2luZyBuZXdsaW5lIGFzIGRlbGltaXRlclxuICAgICAqIEBzaW5jZSAwLjIuMFxuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgc3BsaXQoc3RyaW5nV2l0aE5ld2xpbmVzOiBzdHJpbmcpOiBzdHJpbmdbXSB7XG4gICAgICAgIHN0cmluZ1dpdGhOZXdsaW5lcyA9IHN0cmluZ1dpdGhOZXdsaW5lcy5yZXBsYWNlKC9eKFxcbikqL2csICcnKTtcbiAgICAgICAgc3RyaW5nV2l0aE5ld2xpbmVzID0gc3RyaW5nV2l0aE5ld2xpbmVzLnJlcGxhY2UoLyhcXG4pKiQvZywgJycpO1xuICAgICAgICByZXR1cm4gc3RyaW5nV2l0aE5ld2xpbmVzLnNwbGl0KCdcXG4nKTtcbiAgICB9XG59XG4iXX0=
