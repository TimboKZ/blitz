"use strict";
var path = require('path');
var GenericDirectory = (function () {
    function GenericDirectory(rootPath, relativePath, name, files, directories) {
        if (relativePath === void 0) { relativePath = []; }
        if (name === void 0) { name = ''; }
        if (files === void 0) { files = {}; }
        if (directories === void 0) { directories = {}; }
        this.rootPath = rootPath;
        this.relativePath = relativePath;
        this.name = name;
        var relativePathString = path.join.apply(undefined, this.relativePath);
        this.fullPath = path.join(this.rootPath, relativePathString, this.name);
        this.files = files;
        this.directories = directories;
    }
    GenericDirectory.prototype.addFile = function (file) {
        this.files[file.getName()] = file;
    };
    GenericDirectory.prototype.removeFile = function (fileName) {
        if (this.files[fileName]) {
            delete this.files[fileName];
        }
    };
    GenericDirectory.prototype.addDirectory = function (directory) {
        this.directories[directory.getName()] = directory;
    };
    GenericDirectory.prototype.removeDirectory = function (directoryName) {
        if (this.directories[directoryName]) {
            delete this.directories[directoryName];
        }
    };
    GenericDirectory.prototype.getFullPath = function () {
        return this.fullPath;
    };
    GenericDirectory.prototype.getName = function () {
        return this.name;
    };
    return GenericDirectory;
}());
exports.GenericDirectory = GenericDirectory;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9maWxlcy9HZW5lcmljRGlyZWN0b3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFRQSxJQUFZLElBQUksV0FBTSxNQUFNLENBQUMsQ0FBQTtBQXdCN0I7SUF5Q0ksMEJBQVksUUFBZ0IsRUFDaEIsWUFBMkIsRUFDM0IsSUFBaUIsRUFDakIsS0FBeUIsRUFDekIsV0FBb0M7UUFIcEMsNEJBQTJCLEdBQTNCLGlCQUEyQjtRQUMzQixvQkFBaUIsR0FBakIsU0FBaUI7UUFDakIscUJBQXlCLEdBQXpCLFVBQXlCO1FBQ3pCLDJCQUFvQyxHQUFwQyxnQkFBb0M7UUFDNUMsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7UUFDekIsSUFBSSxDQUFDLFlBQVksR0FBRyxZQUFZLENBQUM7UUFDakMsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxrQkFBa0IsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQ3ZFLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLGtCQUFrQixFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN4RSxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsV0FBVyxHQUFHLFdBQVcsQ0FBQztJQUNuQyxDQUFDO0lBS00sa0NBQU8sR0FBZCxVQUFlLElBQWlCO1FBQzVCLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDO0lBQ3RDLENBQUM7SUFLTSxxQ0FBVSxHQUFqQixVQUFrQixRQUFnQjtRQUM5QixFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN2QixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDaEMsQ0FBQztJQUNMLENBQUM7SUFLTSx1Q0FBWSxHQUFuQixVQUFvQixTQUEyQjtRQUMzQyxJQUFJLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxHQUFHLFNBQVMsQ0FBQztJQUN0RCxDQUFDO0lBS00sMENBQWUsR0FBdEIsVUFBdUIsYUFBcUI7UUFDeEMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDbEMsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQzNDLENBQUM7SUFDTCxDQUFDO0lBTU0sc0NBQVcsR0FBbEI7UUFDSSxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQztJQUN6QixDQUFDO0lBS00sa0NBQU8sR0FBZDtRQUNJLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO0lBQ3JCLENBQUM7SUFDTCx1QkFBQztBQUFELENBckdBLEFBcUdDLElBQUE7QUFyR1ksd0JBQWdCLG1CQXFHNUIsQ0FBQSIsImZpbGUiOiJzcmMvZmlsZXMvR2VuZXJpY0RpcmVjdG9yeS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGUgQ29udGFpbnMgYWxsIGdlbmVyaWMgRmlsZSBjbGFzc2VzIGFuZCBpbnRlcmZhY2VzXG4gKiBAYXV0aG9yIFRpbXVyIEt1emhhZ2FsaXlldiA8dGltLmt1emhAZ21haWwuY29tPlxuICogQGNvcHlyaWdodCAyMDE2XG4gKiBAbGljZW5zZSBHUEwtMy4wXG4gKiBAc2luY2UgMC4yLjBcbiAqL1xuXG5pbXBvcnQgKiBhcyBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0ICogYXMgZnNlIGZyb20gJ2ZzLWV4dHJhJztcbmltcG9ydCB7R2VuZXJpY0ZpbGV9IGZyb20gJy4vR2VuZXJpY0ZpbGUnO1xuXG4vKipcbiAqIEludGVyZmFjZSBmb3IgYSBtYXAgb2YgZmlsZXMgaW4gdGhlIGRpcmVjdG9yeVxuICogQHNpbmNlIDAuMi4wXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSUNoaWxkRmlsZU1hcCB7XG4gICAgW2ZpbGVOYW1lOiBzdHJpbmddOiBHZW5lcmljRmlsZTtcbn1cblxuLyoqXG4gKiBJbnRlcmZhY2UgZm9yIGEgbWFwIG9mIGNoaWxkIGRpcmVjdG9yaWVzXG4gKiBAc2luY2UgMC4yLjBcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJQ2hpbGREaXJlY3RvcnlNYXAge1xuICAgIFtkaXJlY3RvcnlOYW1lOiBzdHJpbmddOiBHZW5lcmljRGlyZWN0b3J5O1xufVxuXG4vKipcbiAqIEBjbGFzcyBBIGNsYXNzLlxuICogQHNpbmNlIDAuMi4wXG4gKi9cbmV4cG9ydCBjbGFzcyBHZW5lcmljRGlyZWN0b3J5IHtcbiAgICAvKipcbiAgICAgKiBQYXRoIGluIGEgZmlsZSBzeXN0ZW0gdGhhdCB3aWxsIGJlIGFwcGVuZGVkIHRvIHRoZSByZWxhdGl2ZSBwYXRoXG4gICAgICogQHNpbmNlIDAuMi4wXG4gICAgICovXG4gICAgcHJvdGVjdGVkIHJvb3RQYXRoOiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBQYXRoIHJlbGF0aXZlIHRvIHRoZSByb290IHBhdGggc3BlY2lmaWVkIGFib3ZlLCBleGNsdWRpbmcgdGhlIG5hbWUgb2YgdGhlIGRpcmVjdG9yeVxuICAgICAqIEBzaW5jZSAwLjIuMFxuICAgICAqL1xuICAgIHByb3RlY3RlZCByZWxhdGl2ZVBhdGg6IHN0cmluZ1tdO1xuXG4gICAgLyoqXG4gICAgICogTmFtZSBvZiB0aGUgZGlyZWN0b3J5XG4gICAgICogQHNpbmNlIDAuMi4wXG4gICAgICovXG4gICAgcHJvdGVjdGVkIG5hbWU6IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEZ1bGwgcGF0aCB0byB0aGUgZGlyZWN0b3J5XG4gICAgICogQHNpbmNlIDAuMi4wXG4gICAgICovXG4gICAgcHJvdGVjdGVkIGZ1bGxQYXRoOiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBGaWxlcyBpbiB0aGUgZGlyZWN0b3J5XG4gICAgICogQHNpbmNlIDAuMi4wXG4gICAgICovXG4gICAgcHJvdGVjdGVkIGZpbGVzOiBJQ2hpbGRGaWxlTWFwO1xuXG4gICAgLyoqXG4gICAgICogQ2hpbGQgZGlyZWN0b3JpZXNcbiAgICAgKiBAc2luY2UgMC4yLjBcbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgZGlyZWN0b3JpZXM6IElDaGlsZERpcmVjdG9yeU1hcDtcblxuICAgIC8qKlxuICAgICAqIEdlbmVyaWNGaWxlIGNvbnN0cnVjdG9yXG4gICAgICogQHNpbmNlIDAuMi4wXG4gICAgICovXG4gICAgY29uc3RydWN0b3Iocm9vdFBhdGg6IHN0cmluZyxcbiAgICAgICAgICAgICAgICByZWxhdGl2ZVBhdGg6IHN0cmluZ1tdID0gW10sXG4gICAgICAgICAgICAgICAgbmFtZTogc3RyaW5nID0gJycsXG4gICAgICAgICAgICAgICAgZmlsZXM6IElDaGlsZEZpbGVNYXAgPSB7fSxcbiAgICAgICAgICAgICAgICBkaXJlY3RvcmllczogSUNoaWxkRGlyZWN0b3J5TWFwID0ge30pIHtcbiAgICAgICAgdGhpcy5yb290UGF0aCA9IHJvb3RQYXRoO1xuICAgICAgICB0aGlzLnJlbGF0aXZlUGF0aCA9IHJlbGF0aXZlUGF0aDtcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICAgICAgbGV0IHJlbGF0aXZlUGF0aFN0cmluZyA9IHBhdGguam9pbi5hcHBseSh1bmRlZmluZWQsIHRoaXMucmVsYXRpdmVQYXRoKTtcbiAgICAgICAgdGhpcy5mdWxsUGF0aCA9IHBhdGguam9pbih0aGlzLnJvb3RQYXRoLCByZWxhdGl2ZVBhdGhTdHJpbmcsIHRoaXMubmFtZSk7XG4gICAgICAgIHRoaXMuZmlsZXMgPSBmaWxlcztcbiAgICAgICAgdGhpcy5kaXJlY3RvcmllcyA9IGRpcmVjdG9yaWVzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBzaW5jZSAwLjIuMFxuICAgICAqL1xuICAgIHB1YmxpYyBhZGRGaWxlKGZpbGU6IEdlbmVyaWNGaWxlKSB7XG4gICAgICAgIHRoaXMuZmlsZXNbZmlsZS5nZXROYW1lKCldID0gZmlsZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAc2luY2UgMC4yLjBcbiAgICAgKi9cbiAgICBwdWJsaWMgcmVtb3ZlRmlsZShmaWxlTmFtZTogc3RyaW5nKSB7XG4gICAgICAgIGlmICh0aGlzLmZpbGVzW2ZpbGVOYW1lXSkge1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMuZmlsZXNbZmlsZU5hbWVdO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHNpbmNlIDAuMi4wXG4gICAgICovXG4gICAgcHVibGljIGFkZERpcmVjdG9yeShkaXJlY3Rvcnk6IEdlbmVyaWNEaXJlY3RvcnkpIHtcbiAgICAgICAgdGhpcy5kaXJlY3Rvcmllc1tkaXJlY3RvcnkuZ2V0TmFtZSgpXSA9IGRpcmVjdG9yeTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAc2luY2UgMC4yLjBcbiAgICAgKi9cbiAgICBwdWJsaWMgcmVtb3ZlRGlyZWN0b3J5KGRpcmVjdG9yeU5hbWU6IHN0cmluZykge1xuICAgICAgICBpZiAodGhpcy5kaXJlY3Rvcmllc1tkaXJlY3RvcnlOYW1lXSkge1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMuZGlyZWN0b3JpZXNbZGlyZWN0b3J5TmFtZV07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGZ1bGwgcGF0aCB0byB0aGUgZmlsZVxuICAgICAqIEBzaW5jZSAwLjIuMFxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRGdWxsUGF0aCgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5mdWxsUGF0aDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAc2luY2UgMC4yLjBcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0TmFtZSgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5uYW1lO1xuICAgIH1cbn1cbiJdfQ==
