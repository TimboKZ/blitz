"use strict";
var colors = require('colors');
var Util_1 = require('./Util');
(function (LogLevel) {
    LogLevel[LogLevel["Log"] = 0] = "Log";
    LogLevel[LogLevel["Warn"] = 1] = "Warn";
    LogLevel[LogLevel["Error"] = 2] = "Error";
    LogLevel[LogLevel["Debug"] = 3] = "Debug";
})(exports.LogLevel || (exports.LogLevel = {}));
var LogLevel = exports.LogLevel;
var Logger = (function () {
    function Logger() {
    }
    Logger.brand = function (text) {
        return colors.cyan(text);
    };
    Logger.logWithPrefix = function (prefix, object, print) {
        if (print === void 0) { print = true; }
        var logString = prefix + ' ' + object.toString();
        if (print) {
            return console.log(logString);
        }
        return logString;
    };
    Logger.log = function (object, level, print) {
        if (level === void 0) { level = LogLevel.Log; }
        if (print === void 0) { print = true; }
        if (level === LogLevel.Debug && !global.debug) {
            return;
        }
        var prefix;
        switch (level) {
            case LogLevel.Warn:
                prefix = colors.yellow('[Blitz WRN]');
                break;
            case LogLevel.Error:
                prefix = colors.red('[Blitz ERR]');
                break;
            case LogLevel.Debug:
                prefix = colors.magenta('[Blitz DBG]');
                break;
            default:
                prefix = Logger.brand('[Blitz LOG]');
        }
        if (Util_1.Util.isString(object)) {
            object = object.replace(/\n/g, '\n' + (new Array(colors.strip(prefix).length + 2)).join(' '));
        }
        return Logger.logWithPrefix(prefix, object, print);
    };
    Logger.logMany = function (objects, level) {
        if (level === void 0) { level = LogLevel.Log; }
        for (var i = 0; i < objects.length; i++) {
            Logger.log(objects[i], level);
        }
    };
    Logger.split = function (stringWithNewlines) {
        stringWithNewlines = stringWithNewlines.replace(/^(\n)*/g, '');
        stringWithNewlines = stringWithNewlines.replace(/(\n)*$/g, '');
        return stringWithNewlines.split('\n');
    };
    return Logger;
}());
exports.Logger = Logger;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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QUFDO1lBQ3RDLE1BQU0sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ2xDLENBQUM7SUFDTCxDQUFDO0lBTWEsWUFBSyxHQUFuQixVQUFvQixrQkFBMEI7UUFDMUMsa0JBQWtCLEdBQUcsa0JBQWtCLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUMvRCxrQkFBa0IsR0FBRyxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQy9ELE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDMUMsQ0FBQztJQUNMLGFBQUM7QUFBRCxDQXJFQSxBQXFFQyxJQUFBO0FBckVZLGNBQU0sU0FxRWxCLENBQUEiLCJmaWxlIjoic3JjL0xvZ2dlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGUgQ29udGFpbnMgY29kZSByZWxhdGVkIHRvIGRhdGEgbG9nZ2luZ1xuICogQGF1dGhvciBUaW11ciBLdXpoYWdhbGl5ZXYgPHRpbS5rdXpoQGdtYWlsLmNvbT5cbiAqIEBjb3B5cmlnaHQgMjAxNlxuICogQGxpY2Vuc2UgR1BMLTMuMFxuICogQHNpbmNlIDAuMi4wXG4gKi9cblxuaW1wb3J0ICogYXMgY29sb3JzIGZyb20gJ2NvbG9ycyc7XG5pbXBvcnQge1V0aWx9IGZyb20gJy4vVXRpbCc7XG5cbi8qKlxuICogTG9nIGxldmVscyB3aGljaCBjaGFuZ2UgcHJlZml4ZXMsIGNvbmRpdGlvbnMgZm9yIGxvZ2dpbmcgYW5kIGNvbG91cnNcbiAqL1xuZXhwb3J0IGVudW0gTG9nTGV2ZWwge1xuICAgIExvZyxcbiAgICBXYXJuLFxuICAgIEVycm9yLFxuICAgIERlYnVnLFxufVxuXG4vKipcbiAqIEBjbGFzcyBIb2xkcyB2YXJpb3VzIHN0YXRpYyBtZXRob2RzIGZvciBsb2dnaW5nIG9mIGRhdGEgaW50byBjb25zb2xlXG4gKiBAc2luY2UgMC4yLjBcbiAqL1xuZXhwb3J0IGNsYXNzIExvZ2dlciB7XG4gICAgLyoqXG4gICAgICogQ2hhbmdlcyB0aGUgY29sb3Igb2Ygc3VwcGxpZWQgc3RyaW5nIHRvIEJsaXR6IGJyYW5kIGNvbG9yXG4gICAgICogQHNpbmNlIDAuMi4wXG4gICAgICovXG4gICAgcHVibGljIHN0YXRpYyBicmFuZCh0ZXh0OiBzdHJpbmcpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gY29sb3JzLmN5YW4odGV4dCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTG9ncyBhbiBvYmplY3QgdG8gY29uc29sZSBwcmVmaXhpbmcgaXQgd2l0aCB0aGUgc3BlY2lmaWVkIHN0cmluZy5cbiAgICAgKiBAc2luY2UgMC4yLjBcbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIGxvZ1dpdGhQcmVmaXgocHJlZml4OiBzdHJpbmcsIG9iamVjdDogYW55LCBwcmludDogYm9vbGVhbiA9IHRydWUpOiBzdHJpbmd8dm9pZCB7XG4gICAgICAgIGxldCBsb2dTdHJpbmcgPSBwcmVmaXggKyAnICcgKyBvYmplY3QudG9TdHJpbmcoKTtcbiAgICAgICAgaWYgKHByaW50KSB7XG4gICAgICAgICAgICByZXR1cm4gY29uc29sZS5sb2cobG9nU3RyaW5nKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbG9nU3RyaW5nO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIExvZ3MgYSBzaW5nbGUgb2JqZWN0IGludG8gY29uc29sZS4gVHJpbXMgbmV3bGluZSBjaGFyYWN0ZXJzIGFuZCBpbmRlbnRzIGFsbCByZW1haW5pbmcgbmV3IGxpbmVzIHRvIHRoZSBsZW5ndGhcbiAgICAgKiBvZiB0aGUgcHJlZml4LlxuICAgICAqIEBzaW5jZSAwLjIuMFxuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgbG9nKG9iamVjdDogYW55LCBsZXZlbDogTG9nTGV2ZWwgPSBMb2dMZXZlbC5Mb2csIHByaW50OiBib29sZWFuID0gdHJ1ZSk6IHN0cmluZ3x2b2lkIHtcbiAgICAgICAgaWYgKGxldmVsID09PSBMb2dMZXZlbC5EZWJ1ZyAmJiAhZ2xvYmFsLmRlYnVnKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHByZWZpeDtcbiAgICAgICAgc3dpdGNoIChsZXZlbCkge1xuICAgICAgICAgICAgY2FzZSBMb2dMZXZlbC5XYXJuOlxuICAgICAgICAgICAgICAgIHByZWZpeCA9IGNvbG9ycy55ZWxsb3coJ1tCbGl0eiBXUk5dJyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIExvZ0xldmVsLkVycm9yOlxuICAgICAgICAgICAgICAgIHByZWZpeCA9IGNvbG9ycy5yZWQoJ1tCbGl0eiBFUlJdJyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIExvZ0xldmVsLkRlYnVnOlxuICAgICAgICAgICAgICAgIHByZWZpeCA9IGNvbG9ycy5tYWdlbnRhKCdbQmxpdHogREJHXScpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBwcmVmaXggPSBMb2dnZXIuYnJhbmQoJ1tCbGl0eiBMT0ddJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKFV0aWwuaXNTdHJpbmcob2JqZWN0KSkge1xuICAgICAgICAgICAgb2JqZWN0ID0gb2JqZWN0LnJlcGxhY2UoL1xcbi9nLCAnXFxuJyArIChuZXcgQXJyYXkoY29sb3JzLnN0cmlwKHByZWZpeCkubGVuZ3RoICsgMikpLmpvaW4oJyAnKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIExvZ2dlci5sb2dXaXRoUHJlZml4KHByZWZpeCwgb2JqZWN0LCBwcmludCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTG9ncyBhbiBhcnJheSBvZiBvYmplY3RzIHRvIGNvbnNvbGVcbiAgICAgKiBAc2luY2UgMC4yLjBcbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIGxvZ01hbnkob2JqZWN0czogYW55W10sIGxldmVsOiBMb2dMZXZlbCA9IExvZ0xldmVsLkxvZykge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG9iamVjdHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIExvZ2dlci5sb2cob2JqZWN0c1tpXSwgbGV2ZWwpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU3RyaXBzIGxlYWRpbmcgYW5kIHRyYWlsaW5nIG5ld2xpbmVzIGJlZm9yZSBzcGxpdHRpbmcgaW50byBzdWJzdHJpbmdzIHVzaW5nIG5ld2xpbmUgYXMgZGVsaW1pdGVyXG4gICAgICogQHNpbmNlIDAuMi4wXG4gICAgICovXG4gICAgcHVibGljIHN0YXRpYyBzcGxpdChzdHJpbmdXaXRoTmV3bGluZXM6IHN0cmluZyk6IHN0cmluZ1tdIHtcbiAgICAgICAgc3RyaW5nV2l0aE5ld2xpbmVzID0gc3RyaW5nV2l0aE5ld2xpbmVzLnJlcGxhY2UoL14oXFxuKSovZywgJycpO1xuICAgICAgICBzdHJpbmdXaXRoTmV3bGluZXMgPSBzdHJpbmdXaXRoTmV3bGluZXMucmVwbGFjZSgvKFxcbikqJC9nLCAnJyk7XG4gICAgICAgIHJldHVybiBzdHJpbmdXaXRoTmV3bGluZXMuc3BsaXQoJ1xcbicpO1xuICAgIH1cbn1cbiJdfQ==
