"use strict";
var path = require('path');
var chokidar = require('chokidar');
var AssetManager_1 = require('../components/AssetManager');
var ProjectSettings_1 = require('../components/ProjectSettings');
exports.BUILD_CHANGE_EVENT = 'buildChange';
var ProjectWatcher = (function () {
    function ProjectWatcher(configPath, buildPath, eventEmitter) {
        this.configPath = configPath;
        this.projectPath = path.dirname(configPath);
        this.buildPath = buildPath;
        this.eventEmitter = eventEmitter;
    }
    ProjectWatcher.prototype.watch = function () {
        this.setupFileWatchers();
        var settings = new ProjectSettings_1.ProjectSettings(this.configPath);
        var assetManager = new AssetManager_1.AssetManager(settings);
        assetManager.setupListeners();
    };
    ProjectWatcher.prototype.setupFileWatchers = function () {
        this.setupFileWatcher('assets', [
            {
                fsEvent: 'add',
                blitzEvent: AssetManager_1.ASSET_CHANGE_EVENT,
            },
            {
                fsEvent: 'addDir',
                blitzEvent: AssetManager_1.ASSET_CHANGE_EVENT,
            },
            {
                fsEvent: 'change',
                blitzEvent: AssetManager_1.ASSET_CHANGE_EVENT,
            },
            {
                fsEvent: 'unlink',
                blitzEvent: AssetManager_1.ASSET_REMOVE_EVENT,
            },
            {
                fsEvent: 'unlinkDir',
                blitzEvent: AssetManager_1.ASSET_REMOVE_EVENT,
            },
        ]);
    };
    ProjectWatcher.prototype.setupFileWatcher = function (directory, events) {
        var _this = this;
        var fullPath = path.join(this.projectPath, directory);
        var watcher = chokidar.watch(fullPath);
        var _loop_1 = function(i) {
            var event_1 = events[i];
            watcher.on(event_1.fsEvent, function (filePath) { return _this.eventEmitter.emit(event_1.blitzEvent, path.relative(fullPath, filePath)); });
        };
        for (var i = 0; i < events.length; i++) {
            _loop_1(i);
        }
        watcher.on('error', function (error) {
            if (process.platform === 'win32'
                && error.code === 'EPERM'
                && error.filename === null) {
                return;
            }
            return error;
        });
    };
    return ProjectWatcher;
}());
exports.ProjectWatcher = ProjectWatcher;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jb3JlL1Byb2plY3RXYXRjaGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFRQSxJQUFZLElBQUksV0FBTSxNQUFNLENBQUMsQ0FBQTtBQUM3QixJQUFZLFFBQVEsV0FBTSxVQUFVLENBQUMsQ0FBQTtBQUNyQyw2QkFBbUUsNEJBQTRCLENBQUMsQ0FBQTtBQUVoRyxnQ0FBOEIsK0JBQStCLENBQUMsQ0FBQTtBQWVqRCwwQkFBa0IsR0FBRyxhQUFhLENBQUM7QUFNaEQ7SUF5Qkksd0JBQVksVUFBa0IsRUFBRSxTQUFpQixFQUFFLFlBQTBCO1FBQ3pFLElBQUksQ0FBQyxVQUFVLEdBQUcsVUFBVSxDQUFDO1FBQzdCLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUM1QyxJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztRQUMzQixJQUFJLENBQUMsWUFBWSxHQUFHLFlBQVksQ0FBQztJQUNyQyxDQUFDO0lBRU0sOEJBQUssR0FBWjtRQUNJLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO1FBQ3pCLElBQUksUUFBUSxHQUFHLElBQUksaUNBQWUsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDcEQsSUFBSSxZQUFZLEdBQUcsSUFBSSwyQkFBWSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQzlDLFlBQVksQ0FBQyxjQUFjLEVBQUUsQ0FBQztJQUNsQyxDQUFDO0lBRU8sMENBQWlCLEdBQXpCO1FBQ0ksSUFBSSxDQUFDLGdCQUFnQixDQUFDLFFBQVEsRUFBRTtZQUM1QjtnQkFDSSxPQUFPLEVBQUUsS0FBSztnQkFDZCxVQUFVLEVBQUUsaUNBQWtCO2FBQ2pDO1lBQ0Q7Z0JBQ0ksT0FBTyxFQUFFLFFBQVE7Z0JBQ2pCLFVBQVUsRUFBRSxpQ0FBa0I7YUFDakM7WUFDRDtnQkFDSSxPQUFPLEVBQUUsUUFBUTtnQkFDakIsVUFBVSxFQUFFLGlDQUFrQjthQUNqQztZQUNEO2dCQUNJLE9BQU8sRUFBRSxRQUFRO2dCQUNqQixVQUFVLEVBQUUsaUNBQWtCO2FBQ2pDO1lBQ0Q7Z0JBQ0ksT0FBTyxFQUFFLFdBQVc7Z0JBQ3BCLFVBQVUsRUFBRSxpQ0FBa0I7YUFDakM7U0FDSixDQUFDLENBQUM7SUFDUCxDQUFDO0lBTU8seUNBQWdCLEdBQXhCLFVBQXlCLFNBQWlCLEVBQUUsTUFBc0I7UUFBbEUsaUJBbUJDO1FBbEJHLElBQUksUUFBUSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxTQUFTLENBQUMsQ0FBQztRQUN0RCxJQUFJLE9BQU8sR0FBRyxRQUFRLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3ZDO1lBQ0ksSUFBSSxPQUFLLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3RCLE9BQU8sQ0FBQyxFQUFFLENBQ04sT0FBSyxDQUFDLE9BQU8sRUFDYixVQUFDLFFBQVEsSUFBSyxPQUFBLEtBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLE9BQUssQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLEVBQUUsUUFBUSxDQUFDLENBQUMsRUFBM0UsQ0FBMkUsQ0FDNUYsQ0FBQzs7UUFMTixHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFOztTQU1yQztRQUNELE9BQU8sQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLFVBQUMsS0FBVTtZQUUzQixFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsUUFBUSxLQUFLLE9BQU87bUJBQ3pCLEtBQUssQ0FBQyxJQUFJLEtBQUssT0FBTzttQkFDdEIsS0FBSyxDQUFDLFFBQVEsS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDO2dCQUM3QixNQUFNLENBQUM7WUFDWCxDQUFDO1lBQ0QsTUFBTSxDQUFDLEtBQUssQ0FBQztRQUNqQixDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFDTCxxQkFBQztBQUFELENBeEZBLEFBd0ZDLElBQUE7QUF4Rlksc0JBQWMsaUJBd0YxQixDQUFBIiwiZmlsZSI6InNyYy9jb3JlL1Byb2plY3RXYXRjaGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZSBDb250YWlucyBjb2RlIHJlbGF0ZWQgdG8gd2F0Y2hpbmcgcHJvamVjdCBmb3IgY2hhbmdlcyBhbmQgcmVjb21waWxpbmdcbiAqIEBhdXRob3IgVGltdXIgS3V6aGFnYWxpeWV2IDx0aW0ua3V6aEBnbWFpbC5jb20+XG4gKiBAY29weXJpZ2h0IDIwMTZcbiAqIEBsaWNlbnNlIEdQTC0zLjBcbiAqIEBzaW5jZSAwLjIuMFxuICovXG5cbmltcG9ydCAqIGFzIHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgKiBhcyBjaG9raWRhciBmcm9tICdjaG9raWRhcic7XG5pbXBvcnQge0Fzc2V0TWFuYWdlciwgQVNTRVRfQ0hBTkdFX0VWRU5ULCBBU1NFVF9SRU1PVkVfRVZFTlR9IGZyb20gJy4uL2NvbXBvbmVudHMvQXNzZXRNYW5hZ2VyJztcbmltcG9ydCB7RXZlbnRFbWl0dGVyfSBmcm9tICdldmVudHMnO1xuaW1wb3J0IHtQcm9qZWN0U2V0dGluZ3N9IGZyb20gJy4uL2NvbXBvbmVudHMvUHJvamVjdFNldHRpbmdzJztcblxuLyoqXG4gKlxuICogQHNpbmNlIDAuMi4wXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSUZTRXZlbnRQYWlyIHtcbiAgICBmc0V2ZW50OiBzdHJpbmc7XG4gICAgYmxpdHpFdmVudDogc3RyaW5nO1xufVxuXG4vKipcbiAqIEV2ZW50IGNhbGxlZCB3aGVuIGEgZmlsZSBpbnNpZGUgdGhlIGJ1aWxkIGZvbGRlciBjaGFuZ2VzXG4gKiBAc2luY2UgMC4yLjBcbiAqL1xuZXhwb3J0IGNvbnN0IEJVSUxEX0NIQU5HRV9FVkVOVCA9ICdidWlsZENoYW5nZSc7XG5cbi8qKlxuICogQGNsYXNzIFByZXBhcmVzIHRoZSBwcm9qZWN0IGZvciBidWlsZGluZyBhbmQgd2F0Y2hlcyBpdCBmb3IgY2hhbmdlc1xuICogQHNpbmNlIDAuMi4wXG4gKi9cbmV4cG9ydCBjbGFzcyBQcm9qZWN0V2F0Y2hlciB7XG4gICAgLyoqXG4gICAgICogTG9jYXRpb24gb2YgdGhlIGNvbmZpZyB0aGF0IHdpbGwgYmUgdXNlZCBmb3IgZ2VuZXJhdGlvbiBvZiB0aGUgd2Vic2l0ZVxuICAgICAqIEBzaW5jZSAwLjIuMFxuICAgICAqL1xuICAgIHByaXZhdGUgY29uZmlnUGF0aDogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogUm9vdCBwcm9qZWN0IGZvbGRlciwgd2hpY2ggY29udGFpbnMgYGFzc2V0c2AsIGBjb250ZW50YCwgYHRlbXBsYXRlc2AgZXRjLlxuICAgICAqIEBzaW5jZSAwLjIuMFxuICAgICAqL1xuICAgIHByaXZhdGUgcHJvamVjdFBhdGg6IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIFRhcmdldCBidWlsZCBwYXRoXG4gICAgICogQHNpbmNlIDAuMi4wXG4gICAgICovXG4gICAgcHJpdmF0ZSBidWlsZFBhdGg6IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEluamVjdGVkIGV2ZW50IGVtaXR0ZXIgcmVmZXJlbmNlXG4gICAgICogQHNpbmNlIDAuMi4wXG4gICAgICovXG4gICAgcHJpdmF0ZSBldmVudEVtaXR0ZXI6IEV2ZW50RW1pdHRlcjtcblxuICAgIGNvbnN0cnVjdG9yKGNvbmZpZ1BhdGg6IHN0cmluZywgYnVpbGRQYXRoOiBzdHJpbmcsIGV2ZW50RW1pdHRlcjogRXZlbnRFbWl0dGVyKSB7XG4gICAgICAgIHRoaXMuY29uZmlnUGF0aCA9IGNvbmZpZ1BhdGg7XG4gICAgICAgIHRoaXMucHJvamVjdFBhdGggPSBwYXRoLmRpcm5hbWUoY29uZmlnUGF0aCk7XG4gICAgICAgIHRoaXMuYnVpbGRQYXRoID0gYnVpbGRQYXRoO1xuICAgICAgICB0aGlzLmV2ZW50RW1pdHRlciA9IGV2ZW50RW1pdHRlcjtcbiAgICB9XG5cbiAgICBwdWJsaWMgd2F0Y2goKSB7XG4gICAgICAgIHRoaXMuc2V0dXBGaWxlV2F0Y2hlcnMoKTtcbiAgICAgICAgbGV0IHNldHRpbmdzID0gbmV3IFByb2plY3RTZXR0aW5ncyh0aGlzLmNvbmZpZ1BhdGgpO1xuICAgICAgICBsZXQgYXNzZXRNYW5hZ2VyID0gbmV3IEFzc2V0TWFuYWdlcihzZXR0aW5ncyk7XG4gICAgICAgIGFzc2V0TWFuYWdlci5zZXR1cExpc3RlbmVycygpO1xuICAgIH1cblxuICAgIHByaXZhdGUgc2V0dXBGaWxlV2F0Y2hlcnMoKSB7XG4gICAgICAgIHRoaXMuc2V0dXBGaWxlV2F0Y2hlcignYXNzZXRzJywgW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGZzRXZlbnQ6ICdhZGQnLFxuICAgICAgICAgICAgICAgIGJsaXR6RXZlbnQ6IEFTU0VUX0NIQU5HRV9FVkVOVCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgZnNFdmVudDogJ2FkZERpcicsXG4gICAgICAgICAgICAgICAgYmxpdHpFdmVudDogQVNTRVRfQ0hBTkdFX0VWRU5ULFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBmc0V2ZW50OiAnY2hhbmdlJyxcbiAgICAgICAgICAgICAgICBibGl0ekV2ZW50OiBBU1NFVF9DSEFOR0VfRVZFTlQsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGZzRXZlbnQ6ICd1bmxpbmsnLFxuICAgICAgICAgICAgICAgIGJsaXR6RXZlbnQ6IEFTU0VUX1JFTU9WRV9FVkVOVCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgZnNFdmVudDogJ3VubGlua0RpcicsXG4gICAgICAgICAgICAgICAgYmxpdHpFdmVudDogQVNTRVRfUkVNT1ZFX0VWRU5ULFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0dXAgd2F0Y2hlcnMgZm9yIGEgZGlyZWN0b3J5IHVzaW5nIGFuIGV2ZW50IHBhaXJcbiAgICAgKiBAc2luY2UgMC4yLjBcbiAgICAgKi9cbiAgICBwcml2YXRlIHNldHVwRmlsZVdhdGNoZXIoZGlyZWN0b3J5OiBzdHJpbmcsIGV2ZW50czogSUZTRXZlbnRQYWlyW10pIHtcbiAgICAgICAgbGV0IGZ1bGxQYXRoID0gcGF0aC5qb2luKHRoaXMucHJvamVjdFBhdGgsIGRpcmVjdG9yeSk7XG4gICAgICAgIGxldCB3YXRjaGVyID0gY2hva2lkYXIud2F0Y2goZnVsbFBhdGgpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGV2ZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbGV0IGV2ZW50ID0gZXZlbnRzW2ldO1xuICAgICAgICAgICAgd2F0Y2hlci5vbihcbiAgICAgICAgICAgICAgICBldmVudC5mc0V2ZW50LFxuICAgICAgICAgICAgICAgIChmaWxlUGF0aCkgPT4gdGhpcy5ldmVudEVtaXR0ZXIuZW1pdChldmVudC5ibGl0ekV2ZW50LCBwYXRoLnJlbGF0aXZlKGZ1bGxQYXRoLCBmaWxlUGF0aCkpXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIHdhdGNoZXIub24oJ2Vycm9yJywgKGVycm9yOiBhbnkpID0+IHtcbiAgICAgICAgICAgIC8vIFdvcmthcm91bmQgZm9yIHRoZSBcIldpbmRvd3Mgcm91Z2ggZWRnZVwiIHJlZ2FyZGluZyB0aGUgZGVsZXRpb24gb2YgZGlyZWN0b3JpZXNcbiAgICAgICAgICAgIGlmIChwcm9jZXNzLnBsYXRmb3JtID09PSAnd2luMzInXG4gICAgICAgICAgICAgICAgJiYgZXJyb3IuY29kZSA9PT0gJ0VQRVJNJ1xuICAgICAgICAgICAgICAgICYmIGVycm9yLmZpbGVuYW1lID09PSBudWxsKSB7IC8vIHRzbGludDpkaXNhYmxlLWxpbmU6bm8tbnVsbC1rZXl3b3JkXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGVycm9yO1xuICAgICAgICB9KTtcbiAgICB9XG59XG4iXX0=
