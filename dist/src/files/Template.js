"use strict";
var pug = require('pug');
var objectAssign = require('object-assign');
var Template = (function () {
    function Template() {
    }
    Template.prototype.prepare = function (templateString, locals, menus) {
        this.ids = [];
        this.assets = [];
        this.menus = [];
        this.compiledTemplate = pug.compile(templateString);
        this.extractIdsAndAssets(objectAssign({}, locals, { menus: menus }));
        this.extractMenus(locals, menus);
    };
    Template.prototype.extractIdsAndAssets = function (locals) {
        var extraLocals = {
            url: this.mockGenerator(this.ids),
            asset: this.mockGenerator(this.assets),
        };
        this.compiledTemplate(objectAssign({}, locals, extraLocals));
    };
    Template.prototype.extractMenus = function (locals, menus) {
        for (var menu in menus) {
            if (menus.hasOwnProperty(menu)) {
                var cutMenus = objectAssign({}, menus);
                cutMenus[menu] = undefined;
                try {
                    this.compiledTemplate(objectAssign({}, locals, { menus: cutMenus }));
                }
                catch (exception) {
                    this.menus.push(menu);
                }
            }
        }
    };
    Template.prototype.mockGenerator = function (logArray) {
        return function (value) {
            if (value) {
                logArray.push(value);
            }
            return './some/path';
        };
    };
    Template.prototype.generate = function (locals) {
        if (this.compiledTemplate() === undefined) {
            throw new Error('Cannot generate a page from template with nothing prepared!');
        }
        return this.compiledTemplate(locals);
    };
    Template.prototype.getIds = function () {
        return this.ids;
    };
    Template.prototype.getAssets = function () {
        return this.assets;
    };
    Template.prototype.getMenus = function () {
        return this.menus;
    };
    return Template;
}());
exports.Template = Template;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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QUFTLEdBQWhCO1FBQ0ksTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDdkIsQ0FBQztJQUtNLDJCQUFRLEdBQWY7UUFDSSxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQztJQUN0QixDQUFDO0lBQ0wsZUFBQztBQUFELENBdkdBLEFBdUdDLElBQUE7QUF2R1ksZ0JBQVEsV0F1R3BCLENBQUEiLCJmaWxlIjoic3JjL2ZpbGVzL1RlbXBsYXRlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZSBBbGwgY29kZSByZWxhdGVkIHRvIHRoZSByZXByZXNldG50YXRpb24gb2YgYSB0ZW1wbGF0ZSBmaWxlXG4gKiBAYXV0aG9yIFRpbXVyIEt1emhhZ2FsaXlldiA8dGltLmt1emhAZ21haWwuY29tPlxuICogQGNvcHlyaWdodCAyMDE2XG4gKiBAbGljZW5zZSBHUEwtMy4wXG4gKiBAc2luY2UgMC4yLjBcbiAqL1xuXG5pbXBvcnQgKiBhcyBwdWcgZnJvbSAncHVnJztcbmltcG9ydCAqIGFzIG9iamVjdEFzc2lnbiBmcm9tICdvYmplY3QtYXNzaWduJztcbmltcG9ydCB7SVNpdGVNZW51TWFwfSBmcm9tICcuLi9NZW51JztcblxuLyoqXG4gKiBAY2xhc3MgV3JhcHBlciBhcm91bmQgYSBzcGVjaWZpYyB0ZW1wbGF0aW5nIGVuZ2luZSwgY3VycmVudGx5IG9ubHkgUHVnXG4gKiBAc2luY2UgMC4yLjBcbiAqL1xuZXhwb3J0IGNsYXNzIFRlbXBsYXRlIHtcbiAgICAvKipcbiAgICAgKiBDb21waWxlZCBQdWcgdGVtcGxhdGVcbiAgICAgKiBAc2luY2UgMC4yLjBcbiAgICAgKi9cbiAgICBwcml2YXRlIGNvbXBpbGVkVGVtcGxhdGU6IChsb2NhbHM/OiBhbnkpID0+IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEFycmF5cyBvZiBJRHMsIGFzc2V0cyBhbmQgbWVudXMgcmVmZXJlbmNlZCBpbiB0aGUgdGVtcGxhdGVcbiAgICAgKiBAc2luY2UgMC4yLjBcbiAgICAgKi9cbiAgICBwcml2YXRlIGlkczogc3RyaW5nW107XG4gICAgcHJpdmF0ZSBhc3NldHM6IHN0cmluZ1tdO1xuICAgIHByaXZhdGUgbWVudXM6IHN0cmluZ1tdO1xuXG4gICAgLyoqXG4gICAgICogRXh0cmFjdHMgbGlzdCBvZiByZWZlcmVuY2VkIElEcywgYXNzZXRzIGFuZCBtZW51cyBmcm9tIHRoZSB0ZW1wbGF0ZSBhZnRlciBjb21waWxpbmcgaXRcbiAgICAgKiBAc2luY2UgMC4yLjBcbiAgICAgKi9cbiAgICBwdWJsaWMgcHJlcGFyZSh0ZW1wbGF0ZVN0cmluZzogc3RyaW5nLCBsb2NhbHM6IGFueSwgbWVudXM6IElTaXRlTWVudU1hcCkge1xuICAgICAgICB0aGlzLmlkcyA9IFtdO1xuICAgICAgICB0aGlzLmFzc2V0cyA9IFtdO1xuICAgICAgICB0aGlzLm1lbnVzID0gW107XG5cbiAgICAgICAgdGhpcy5jb21waWxlZFRlbXBsYXRlID0gcHVnLmNvbXBpbGUodGVtcGxhdGVTdHJpbmcpO1xuICAgICAgICB0aGlzLmV4dHJhY3RJZHNBbmRBc3NldHMob2JqZWN0QXNzaWduKHt9LCBsb2NhbHMsIHttZW51c30pKTtcbiAgICAgICAgdGhpcy5leHRyYWN0TWVudXMobG9jYWxzLCBtZW51cyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRXh0cmFjdCBJRHMgYW5kIGFzc2V0cyBmcm9tIGEgY29tcGlsZWQgdGVtcGxhdGUgdXNpbmcgbW9jayBnZW5lcmF0b3JzXG4gICAgICogQHNpbmNlIDAuMi4wXG4gICAgICovXG4gICAgcHJpdmF0ZSBleHRyYWN0SWRzQW5kQXNzZXRzKGxvY2FsczogYW55KSB7XG4gICAgICAgIGxldCBleHRyYUxvY2FscyA9IHtcbiAgICAgICAgICAgIHVybDogdGhpcy5tb2NrR2VuZXJhdG9yKHRoaXMuaWRzKSxcbiAgICAgICAgICAgIGFzc2V0OiB0aGlzLm1vY2tHZW5lcmF0b3IodGhpcy5hc3NldHMpLFxuICAgICAgICB9O1xuICAgICAgICB0aGlzLmNvbXBpbGVkVGVtcGxhdGUob2JqZWN0QXNzaWduKHt9LCBsb2NhbHMsIGV4dHJhTG9jYWxzKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRXh0cmFjdHMgbWVudXMgcmVmZXJlbmNlZCBpbiB0aGUgY29tcGlsZWQgdGVtcGxhdGVcbiAgICAgKiBAc2luY2UgMC4yLjBcbiAgICAgKi9cbiAgICBwcml2YXRlIGV4dHJhY3RNZW51cyhsb2NhbHM6IGFueSwgbWVudXM6IElTaXRlTWVudU1hcCkge1xuICAgICAgICBmb3IgKGxldCBtZW51IGluIG1lbnVzKSB7XG4gICAgICAgICAgICBpZiAobWVudXMuaGFzT3duUHJvcGVydHkobWVudSkpIHtcbiAgICAgICAgICAgICAgICBsZXQgY3V0TWVudXMgPSBvYmplY3RBc3NpZ24oe30sIG1lbnVzKTtcbiAgICAgICAgICAgICAgICBjdXRNZW51c1ttZW51XSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbXBpbGVkVGVtcGxhdGUob2JqZWN0QXNzaWduKHt9LCBsb2NhbHMsIHttZW51czogY3V0TWVudXN9KSk7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZXhjZXB0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubWVudXMucHVzaChtZW51KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgbW9jayBzdHJpbmcgZ2VuZXJhdG9yIHRoYXQgbG9ncyBjYWxsIHBhcmFtZXRlcnMgaW50byBhbiBhcnJheVxuICAgICAqIEBzaW5jZSAwLjIuMFxuICAgICAqL1xuICAgIHByaXZhdGUgbW9ja0dlbmVyYXRvcihsb2dBcnJheTogc3RyaW5nW10pOiAodmFsdWU/OiBzdHJpbmcpID0+IHN0cmluZyB7XG4gICAgICAgIHJldHVybiAodmFsdWU/OiBzdHJpbmcpID0+IHtcbiAgICAgICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIGxvZ0FycmF5LnB1c2godmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuICcuL3NvbWUvcGF0aCc7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2VuZXJhdGVzIGEgSFRNTCBwYWdlIGZyb20gdGhlIHRlbXBsYXRlXG4gICAgICogQHNpbmNlIDAuMi4wXG4gICAgICovXG4gICAgcHVibGljIGdlbmVyYXRlKGxvY2Fscz86IGFueSk6IHN0cmluZyB7XG4gICAgICAgIGlmICh0aGlzLmNvbXBpbGVkVGVtcGxhdGUoKSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBnZW5lcmF0ZSBhIHBhZ2UgZnJvbSB0ZW1wbGF0ZSB3aXRoIG5vdGhpbmcgcHJlcGFyZWQhJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuY29tcGlsZWRUZW1wbGF0ZShsb2NhbHMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBzaW5jZSAwLjIuMFxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRJZHMoKTogc3RyaW5nW10ge1xuICAgICAgICByZXR1cm4gdGhpcy5pZHM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHNpbmNlIDAuMi4wXG4gICAgICovXG4gICAgcHVibGljIGdldEFzc2V0cygpOiBzdHJpbmdbXSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFzc2V0cztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAc2luY2UgMC4yLjBcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0TWVudXMoKTogc3RyaW5nW10ge1xuICAgICAgICByZXR1cm4gdGhpcy5tZW51cztcbiAgICB9XG59XG4iXX0=
