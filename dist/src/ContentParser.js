"use strict";
var fs = require("fs");
var path = require("path");
var fm = require("front-matter");
var Util_1 = require("./helpers/Util");
var ContentParser = (function () {
    function ContentParser() {
    }
    ContentParser.parse = function (content) {
        var result;
        var parsedFrontMatter = fm(content);
        if (typeof parsedFrontMatter.attributes === 'string') {
            result = {
                title: parsedFrontMatter.attributes,
            };
        }
        else {
            result = parsedFrontMatter.attributes;
        }
        result.content = Util_1.Util.parseMarkdown(parsedFrontMatter.body);
        return result;
    };
    ContentParser.parseFile = function (filePath) {
        if (this.fileCache[filePath] === undefined) {
            var fileContents = Util_1.Util.getFileContents(filePath);
            var rawData = ContentParser.parse(fileContents);
            rawData.file = path.basename(filePath);
            this.fileCache[filePath] = rawData;
        }
        return this.fileCache[filePath];
    };
    ContentParser.parseDirectory = function (directoryPath) {
        if (this.directoryCache[directoryPath] === undefined) {
            var files = fs.readdirSync(directoryPath);
            var fileCount = files.length;
            var directoryData = [];
            for (var i = 0; i < fileCount; i++) {
                var filePath = path.join(directoryPath, files[i]);
                var fileStats = fs.lstatSync(filePath);
                if (fileStats.isFile()) {
                    var fileData = ContentParser.parseFile(filePath);
                    directoryData.push(fileData);
                }
            }
            this.directoryCache[directoryPath] = directoryData;
        }
        return this.directoryCache[directoryPath];
    };
    return ContentParser;
}());
ContentParser.directoryCache = {};
ContentParser.fileCache = {};
exports.ContentParser = ContentParser;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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QUUsQ0FBQztBQVh4QyxzQ0FBYSIsImZpbGUiOiJzcmMvQ29udGVudFBhcnNlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGUgRmlsZSBjb250YWluaW5nIGV2ZXJ5dGhpbmcgcmVsYXRlZCB0byBjb250ZW50IHBhcnNpbmdcbiAqIEBhdXRob3IgVGltdXIgS3V6aGFnYWxpeWV2IDx0aW0ua3V6aEBnbWFpbC5jb20+XG4gKiBAY29weXJpZ2h0IDIwMTZcbiAqIEBsaWNlbnNlIEdQTC0zLjBcbiAqIEBzaW5jZSAwLjAuMVxuICovXG5cbmltcG9ydCAqIGFzIGZzIGZyb20gJ2ZzJztcbmltcG9ydCAqIGFzIHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgKiBhcyBmbSBmcm9tICdmcm9udC1tYXR0ZXInO1xuaW1wb3J0IHtVdGlsfSBmcm9tICcuL2hlbHBlcnMvVXRpbCc7XG5cbi8qKlxuICogSW50ZXJmYWNlIGZvciBjb250ZW50IGNhY2hlXG4gKiBAc2luY2UgMC4wLjFcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJRGlyZWN0b3J5Q29udGVudENhY2hlIHtcbiAgICBbcGF0aDogc3RyaW5nXTogSVByb2Nlc3NlZEZpbGVDb250ZW50W107XG59XG5leHBvcnQgaW50ZXJmYWNlIElGaWxlQ29udGVudENhY2hlIHtcbiAgICBbcGF0aDogc3RyaW5nXTogSVByb2Nlc3NlZEZpbGVDb250ZW50O1xufVxuXG4vKipcbiAqIEludGVyZmFjZXMgZm9yIHByb2Nlc3NlZCBkYXRhXG4gKiBAc2luY2UgMC4xLjIgQWRkZWQgYElQcm9jZXNzZWRDb250ZW50YFxuICogQHNpbmNlIDAuMC4xXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSVByb2Nlc3NlZENvbnRlbnQge1xuICAgIHRpdGxlPzogc3RyaW5nO1xuICAgIGNvbnRlbnQ6IHN0cmluZztcbiAgICBba2V5OiBzdHJpbmddOiBhbnk7XG59XG5leHBvcnQgaW50ZXJmYWNlIElQcm9jZXNzZWRGaWxlQ29udGVudCBleHRlbmRzIElQcm9jZXNzZWRDb250ZW50IHtcbiAgICBmaWxlOiBzdHJpbmc7XG59XG5cbi8qKlxuICogQGNsYXNzIENvbGxlY3Rpb24gb2Ygc3RhdGljIG1ldGhvZHMgZm9yIGNvbnRlbnQgcGFyc2luZ1xuICogQHNpbmNlIDAuMC4xXG4gKi9cbmV4cG9ydCBjbGFzcyBDb250ZW50UGFyc2VyIHtcbiAgICAvKipcbiAgICAgKiBDYWNoZSBmb3IgdGhlIGNvbnRlbnRzIG9mIGEgZGlyZWN0b3J5XG4gICAgICogQHNpbmNlIDAuMC4xXG4gICAgICovXG4gICAgcHJpdmF0ZSBzdGF0aWMgZGlyZWN0b3J5Q2FjaGU6IElEaXJlY3RvcnlDb250ZW50Q2FjaGUgPSB7fTtcblxuICAgIC8qKlxuICAgICAqIENhY2hlIGZvciB0aGUgY29udGVudHMgb2YgYSBmaWxlXG4gICAgICogQHNpbmNlIDAuMC4xXG4gICAgICovXG4gICAgcHJpdmF0ZSBzdGF0aWMgZmlsZUNhY2hlOiBJRmlsZUNvbnRlbnRDYWNoZSA9IHt9O1xuXG4gICAgLyoqXG4gICAgICogRXh0cmFjdHMgZnJvbnQgbWF0dGVyIHVzaW5nIHRoZSBgZnJvbnQtbWF0dGVyYCBwYWNrYWdlIGFuZCBhZGRzIGEgYGNvbnRlbnRgIHByb3BlcnR5XG4gICAgICpcbiAgICAgKiBJZiBZQU1MIGV4dHJhY3RlZCBmcm9tIGZyb250IG1hdHRlciBpcyBhIHN0cmluZywgbWFrZSBpdCB0aGUgYHRpdGxlYC5cbiAgICAgKlxuICAgICAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2p4c29uL2Zyb250LW1hdHRlclxuICAgICAqIEBzaW5jZSAwLjEuMiBOb3cgdXNlcyBgZnJvbnQtbWF0dGVyYCBwYWNrYWdlXG4gICAgICogQHNpbmNlIDAuMC4xXG4gICAgICovXG4gICAgcHVibGljIHN0YXRpYyBwYXJzZShjb250ZW50OiBzdHJpbmcpOiBJUHJvY2Vzc2VkQ29udGVudCB7XG4gICAgICAgIGxldCByZXN1bHQ7XG4gICAgICAgIGxldCBwYXJzZWRGcm9udE1hdHRlciA9IGZtKGNvbnRlbnQpO1xuICAgICAgICBpZiAodHlwZW9mIHBhcnNlZEZyb250TWF0dGVyLmF0dHJpYnV0ZXMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICByZXN1bHQgPSB7XG4gICAgICAgICAgICAgICAgdGl0bGU6IHBhcnNlZEZyb250TWF0dGVyLmF0dHJpYnV0ZXMsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzdWx0ID0gcGFyc2VkRnJvbnRNYXR0ZXIuYXR0cmlidXRlcztcbiAgICAgICAgfVxuICAgICAgICByZXN1bHQuY29udGVudCA9IFV0aWwucGFyc2VNYXJrZG93bihwYXJzZWRGcm9udE1hdHRlci5ib2R5KTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBMb2FkcyBjb250ZW50IG9mIHRoZSBzdXBwbGllZCBmaWxlIGFuZCBwaXBlcyBpdCBpbnRvIGBVdGlsLnBhcnNlKClgIG9yIHJldHVybnMgZnJvbSBjYWNoZSBpZiBwb3NzaWJsZS5cbiAgICAgKlxuICAgICAqIEFkZHMgYSBwcm9wZXJ0eSBjYWxsZWQgYGZpbGVgIHRvIHRoZSByYXcgZGF0YS5cbiAgICAgKlxuICAgICAqIEBzaW5jZSAwLjEuMiBSZW1vdmVkIHRyeS9jYXRjaCBibG9ja3NcbiAgICAgKiBAc2luY2UgMC4wLjFcbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIHBhcnNlRmlsZShmaWxlUGF0aDogc3RyaW5nKTogSVByb2Nlc3NlZEZpbGVDb250ZW50IHtcbiAgICAgICAgaWYgKHRoaXMuZmlsZUNhY2hlW2ZpbGVQYXRoXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBsZXQgZmlsZUNvbnRlbnRzID0gVXRpbC5nZXRGaWxlQ29udGVudHMoZmlsZVBhdGgpO1xuICAgICAgICAgICAgbGV0IHJhd0RhdGEgPSBDb250ZW50UGFyc2VyLnBhcnNlKGZpbGVDb250ZW50cyk7XG4gICAgICAgICAgICAocmF3RGF0YSBhcyBJUHJvY2Vzc2VkRmlsZUNvbnRlbnQpLmZpbGUgPSBwYXRoLmJhc2VuYW1lKGZpbGVQYXRoKTtcbiAgICAgICAgICAgIHRoaXMuZmlsZUNhY2hlW2ZpbGVQYXRoXSA9IChyYXdEYXRhIGFzIElQcm9jZXNzZWRGaWxlQ29udGVudCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuZmlsZUNhY2hlW2ZpbGVQYXRoXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBMb2FkcyBjb250ZW50IG9mIGEgZGlyZWN0b3J5LCBhcyBhbiBhcnJheSB3aXRoIGFuIGVsZW1lbnQgZm9yIGVhY2ggZmlsZSwgb3IgcmV0dXJucyBmcm9tIGNhY2hlIGlmIHBvc3NpYmxlLlxuICAgICAqXG4gICAgICogVGhpcyBmdW5jdGlvbiBpcyBOT1QgcmVjdXJzaXZlLCBpLmUuIGl0IHdpbGwgTk9UIHBhcnNlIG5lc3RlZCBkaXJlY3Rvcmllcy5cbiAgICAgKlxuICAgICAqIEBzaW5jZSAwLjEuMiBSZW1vdmVkIHRyeS9jYXRjaCBibG9ja3NcbiAgICAgKiBAc2luY2UgMC4wLjFcbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIHBhcnNlRGlyZWN0b3J5KGRpcmVjdG9yeVBhdGg6IHN0cmluZyk6IElQcm9jZXNzZWRGaWxlQ29udGVudFtdIHtcbiAgICAgICAgaWYgKHRoaXMuZGlyZWN0b3J5Q2FjaGVbZGlyZWN0b3J5UGF0aF0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgbGV0IGZpbGVzID0gZnMucmVhZGRpclN5bmMoZGlyZWN0b3J5UGF0aCk7XG4gICAgICAgICAgICBsZXQgZmlsZUNvdW50ID0gZmlsZXMubGVuZ3RoO1xuICAgICAgICAgICAgbGV0IGRpcmVjdG9yeURhdGE6IGFueVtdID0gW107XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGZpbGVDb3VudDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgbGV0IGZpbGVQYXRoID0gcGF0aC5qb2luKGRpcmVjdG9yeVBhdGgsIGZpbGVzW2ldKTtcbiAgICAgICAgICAgICAgICBsZXQgZmlsZVN0YXRzID0gZnMubHN0YXRTeW5jKGZpbGVQYXRoKTtcbiAgICAgICAgICAgICAgICBpZiAoZmlsZVN0YXRzLmlzRmlsZSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBmaWxlRGF0YSA9IENvbnRlbnRQYXJzZXIucGFyc2VGaWxlKGZpbGVQYXRoKTtcbiAgICAgICAgICAgICAgICAgICAgZGlyZWN0b3J5RGF0YS5wdXNoKGZpbGVEYXRhKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmRpcmVjdG9yeUNhY2hlW2RpcmVjdG9yeVBhdGhdID0gZGlyZWN0b3J5RGF0YTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5kaXJlY3RvcnlDYWNoZVtkaXJlY3RvcnlQYXRoXTtcbiAgICB9XG59XG4iXX0=
