"use strict";
var path = require("path");
var browserSync = require("browser-sync");
var ProjectWatcher_1 = require("./ProjectWatcher");
var ProjectPreviewer = (function () {
    function ProjectPreviewer(configPath, buildPath, eventEmitter) {
        this.configPath = configPath;
        this.buildPath = buildPath;
        this.eventEmitter = eventEmitter;
        this.server = browserSync.create();
    }
    ProjectPreviewer.prototype.startServer = function () {
        var _this = this;
        var projectWatcher = new ProjectWatcher_1.ProjectWatcher(this.configPath, this.buildPath, this.eventEmitter);
        projectWatcher.watch();
        this.server.init({
            server: this.buildPath,
            logPrefix: '> Preview',
        });
        this.eventEmitter.on(ProjectWatcher_1.BUILD_CHANGE_EVENT, function (filePath) {
            _this.server.reload(path.join(_this.buildPath, filePath));
        });
    };
    return ProjectPreviewer;
}());
exports.ProjectPreviewer = ProjectPreviewer;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jb3JlL1Byb2plY3RQcmV2aWV3ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQVFBLDJCQUE2QjtBQUM3QiwwQ0FBNEM7QUFFNUMsbURBQW9FO0FBT3BFO0lBNEJJLDBCQUFZLFVBQWtCLEVBQUUsU0FBaUIsRUFBRSxZQUEwQjtRQUN6RSxJQUFJLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQztRQUM3QixJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztRQUMzQixJQUFJLENBQUMsWUFBWSxHQUFHLFlBQVksQ0FBQztRQUNqQyxJQUFJLENBQUMsTUFBTSxHQUFHLFdBQVcsQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUN2QyxDQUFDO0lBTU0sc0NBQVcsR0FBbEI7UUFBQSxpQkFVQztRQVRHLElBQUksY0FBYyxHQUFHLElBQUksK0JBQWMsQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQzVGLGNBQWMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUN2QixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQztZQUNiLE1BQU0sRUFBRSxJQUFJLENBQUMsU0FBUztZQUN0QixTQUFTLEVBQUUsV0FBVztTQUN6QixDQUFDLENBQUM7UUFDSCxJQUFJLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQyxtQ0FBa0IsRUFBRSxVQUFDLFFBQVE7WUFDOUMsS0FBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFJLENBQUMsU0FBUyxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUM7UUFDNUQsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBQ0wsdUJBQUM7QUFBRCxDQWxEQSxBQWtEQyxJQUFBO0FBbERZLDRDQUFnQiIsImZpbGUiOiJzcmMvY29yZS9Qcm9qZWN0UHJldmlld2VyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZSBDb250YWlucyBjb2RlIHJlc3BvbnNpYmxlIGZvciBidWlsZGluZywgd2F0Y2hpbmcgYW5kIHByZXZpZXcgc2VydmVyXG4gKiBAYXV0aG9yIFRpbXVyIEt1emhhZ2FsaXlldiA8dGltLmt1emhAZ21haWwuY29tPlxuICogQGNvcHlyaWdodCAyMDE2XG4gKiBAbGljZW5zZSBHUEwtMy4wXG4gKiBAc2luY2UgMC4yLjBcbiAqL1xuXG5pbXBvcnQgKiBhcyBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0ICogYXMgYnJvd3NlclN5bmMgZnJvbSAnYnJvd3Nlci1zeW5jJztcbmltcG9ydCB7RXZlbnRFbWl0dGVyfSBmcm9tICdldmVudHMnO1xuaW1wb3J0IHtQcm9qZWN0V2F0Y2hlciwgQlVJTERfQ0hBTkdFX0VWRU5UfSBmcm9tICcuL1Byb2plY3RXYXRjaGVyJztcbmltcG9ydCB7QnJvd3NlclN5bmNJbnN0YW5jZX0gZnJvbSAnYnJvd3Nlci1zeW5jJztcblxuLyoqXG4gKiBAY2xhc3MgQ3JlYXRlcyBhIHdhdGNoZWQgYW5kIGEgcHJldmlldyBzZXJ2ZXJcbiAqIEBzaW5jZSAwLjIuMFxuICovXG5leHBvcnQgY2xhc3MgUHJvamVjdFByZXZpZXdlciB7XG4gICAgLyoqXG4gICAgICogTG9jYXRpb24gb2YgdGhlIGNvbmZpZyB0aGF0IHdpbGwgYmUgdXNlZCBmb3IgZ2VuZXJhdGlvbiBvZiB0aGUgd2Vic2l0ZVxuICAgICAqIEBzaW5jZSAwLjIuMFxuICAgICAqL1xuICAgIHByaXZhdGUgY29uZmlnUGF0aDogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogVGFyZ2V0IGJ1aWxkIHBhdGhcbiAgICAgKiBAc2luY2UgMC4yLjBcbiAgICAgKi9cbiAgICBwcml2YXRlIGJ1aWxkUGF0aDogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogSW5qZWN0ZWQgZXZlbnQgZW1pdHRlciByZWZlcmVuY2VcbiAgICAgKiBAc2luY2UgMC4yLjBcbiAgICAgKi9cbiAgICBwcml2YXRlIGV2ZW50RW1pdHRlcjogRXZlbnRFbWl0dGVyO1xuXG4gICAgLyoqXG4gICAgICogQHNpbmNlIDAuMi4wXG4gICAgICovXG4gICAgcHJpdmF0ZSBzZXJ2ZXI6IEJyb3dzZXJTeW5jSW5zdGFuY2U7XG5cbiAgICAvKipcbiAgICAgKiBQcm9qZWN0V2F0Y2hlciBjb25zdHJ1Y3RvclxuICAgICAqIEBzaW5jZSAwLjIuMFxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGNvbmZpZ1BhdGg6IHN0cmluZywgYnVpbGRQYXRoOiBzdHJpbmcsIGV2ZW50RW1pdHRlcjogRXZlbnRFbWl0dGVyKSB7XG4gICAgICAgIHRoaXMuY29uZmlnUGF0aCA9IGNvbmZpZ1BhdGg7XG4gICAgICAgIHRoaXMuYnVpbGRQYXRoID0gYnVpbGRQYXRoO1xuICAgICAgICB0aGlzLmV2ZW50RW1pdHRlciA9IGV2ZW50RW1pdHRlcjtcbiAgICAgICAgdGhpcy5zZXJ2ZXIgPSBicm93c2VyU3luYy5jcmVhdGUoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBzaW5jZSAwLjIuMFxuICAgICAqL1xuICAgIHB1YmxpYyBzdGFydFNlcnZlcigpIHtcbiAgICAgICAgbGV0IHByb2plY3RXYXRjaGVyID0gbmV3IFByb2plY3RXYXRjaGVyKHRoaXMuY29uZmlnUGF0aCwgdGhpcy5idWlsZFBhdGgsIHRoaXMuZXZlbnRFbWl0dGVyKTtcbiAgICAgICAgcHJvamVjdFdhdGNoZXIud2F0Y2goKTtcbiAgICAgICAgdGhpcy5zZXJ2ZXIuaW5pdCh7XG4gICAgICAgICAgICBzZXJ2ZXI6IHRoaXMuYnVpbGRQYXRoLFxuICAgICAgICAgICAgbG9nUHJlZml4OiAnPiBQcmV2aWV3JyxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuZXZlbnRFbWl0dGVyLm9uKEJVSUxEX0NIQU5HRV9FVkVOVCwgKGZpbGVQYXRoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnNlcnZlci5yZWxvYWQocGF0aC5qb2luKHRoaXMuYnVpbGRQYXRoLCBmaWxlUGF0aCkpO1xuICAgICAgICB9KTtcbiAgICB9XG59XG4iXX0=
