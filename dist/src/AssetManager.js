"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var fse = require("fs-extra");
var path = require("path");
var ProjectWatcher_1 = require("./ProjectWatcher");
var ListenerContainer_1 = require("./ListenerContainer");
var Logger_1 = require("./Logger");
exports.ASSET_CHANGE_EVENT = 'assetChange';
exports.ASSET_REMOVE_EVENT = 'assetRemove';
var AssetManager = (function (_super) {
    __extends(AssetManager, _super);
    function AssetManager(sourcePath, targetPath, eventEmitter) {
        var _this = this;
        if (eventEmitter) {
            var eventListenerPairs = [];
            _this = _super.call(this, eventEmitter, eventListenerPairs) || this;
            eventListenerPairs.push({
                event: exports.ASSET_CHANGE_EVENT,
                listener: function (assetPath) {
                    Logger_1.Logger.log('Updating `' + Logger_1.Logger.brand(path.join('assets', assetPath)) + '`...');
                    _this.copyAsset(assetPath);
                },
            });
            eventListenerPairs.push({
                event: exports.ASSET_REMOVE_EVENT,
                listener: function (assetPath) {
                    Logger_1.Logger.log('Removing `' + Logger_1.Logger.brand(path.join('assets', assetPath)) + '`...');
                    _this.removeAsset(assetPath);
                },
            });
        }
        else {
            _this = _super.call(this) || this;
        }
        _this.sourcePath = sourcePath;
        _this.targetPath = targetPath;
        return _this;
    }
    AssetManager.prototype.copyAssets = function () {
        fse.copySync(this.sourcePath, this.targetPath);
    };
    AssetManager.prototype.copyAsset = function (assetPath) {
        var assetSourcePath = path.join(this.sourcePath, assetPath);
        var assetTargetPath = path.join(this.targetPath, assetPath);
        fse.ensureDirSync(path.dirname(assetTargetPath));
        fse.copySync(assetSourcePath, assetTargetPath);
        if (this.eventEmitter) {
            this.eventEmitter.emit(ProjectWatcher_1.BUILD_CHANGE_EVENT, path.join('assets', assetPath));
        }
    };
    AssetManager.prototype.removeAsset = function (assetPath) {
        fse.removeSync(path.join(this.targetPath, assetPath));
        if (this.eventEmitter) {
            this.eventEmitter.emit(ProjectWatcher_1.BUILD_CHANGE_EVENT, path.join('assets', assetPath));
        }
    };
    return AssetManager;
}(ListenerContainer_1.ListenerContainer));
exports.AssetManager = AssetManager;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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Q0FBQyxDQUFDLENBQUM7WUFDcEIsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsbUNBQWtCLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQztRQUMvRSxDQUFDO0lBQ0wsQ0FBQztJQUNMLG1CQUFDO0FBQUQsQ0F6RUEsQUF5RUMsQ0F6RWlDLHFDQUFpQixHQXlFbEQ7QUF6RVksb0NBQVkiLCJmaWxlIjoic3JjL0Fzc2V0TWFuYWdlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGUgQ29udGFpbnMgY29kZSByZWxhdGVkIHRvIHdlYnNpdGUgYXNzZXRzXG4gKiBAYXV0aG9yIFRpbXVyIEt1emhhZ2FsaXlldiA8dGltLmt1emhAZ21haWwuY29tPlxuICogQGNvcHlyaWdodCAyMDE2XG4gKiBAbGljZW5zZSBHUEwtMy4wXG4gKiBAc2luY2UgMC4yLjBcbiAqL1xuXG5pbXBvcnQgKiBhcyBmc2UgZnJvbSAnZnMtZXh0cmEnO1xuaW1wb3J0ICogYXMgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCB7RXZlbnRFbWl0dGVyfSBmcm9tICdldmVudHMnO1xuaW1wb3J0IHtCVUlMRF9DSEFOR0VfRVZFTlR9IGZyb20gJy4vUHJvamVjdFdhdGNoZXInO1xuaW1wb3J0IHtMaXN0ZW5lckNvbnRhaW5lcn0gZnJvbSAnLi9MaXN0ZW5lckNvbnRhaW5lcic7XG5pbXBvcnQge0xvZ2dlcn0gZnJvbSAnLi9Mb2dnZXInO1xuXG4vKipcbiAqIEV2ZW50IHRyaWdnZXJlZCB3aGVuIGFuIGFzc2V0IGlzIGNoYW5nZWQgb3IgY3JlYXRlZFxuICogQHNpbmNlIDAuMi4wXG4gKi9cbmV4cG9ydCBjb25zdCBBU1NFVF9DSEFOR0VfRVZFTlQgPSAnYXNzZXRDaGFuZ2UnO1xuXG4vKipcbiAqIEV2ZW50IHRyaWdnZXJlZCB3aGVuIGFuIGFzc2V0IGlzIGRlbGV0ZWRcbiAqIEBzaW5jZSAwLjIuMFxuICovXG5leHBvcnQgY29uc3QgQVNTRVRfUkVNT1ZFX0VWRU5UID0gJ2Fzc2V0UmVtb3ZlJztcblxuLyoqXG4gKiBAY2xhc3MgUmVzcG9uc2libGUgZm9yIGNvcHlpbmcgYW5kXG4gKiBAc2luY2UgMC4yLjBcbiAqL1xuZXhwb3J0IGNsYXNzIEFzc2V0TWFuYWdlciBleHRlbmRzIExpc3RlbmVyQ29udGFpbmVyIHtcbiAgICAvKipcbiAgICAgKiBGb2xkZXIgaW4gd2hpY2ggcHJvamVjdCBhc3NldHMgYXJlIGxvY2F0ZWRcbiAgICAgKiBAc2luY2UgMC4yLjBcbiAgICAgKi9cbiAgICBwcml2YXRlIHNvdXJjZVBhdGg6IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEFzc2V0cyBmb2xkZXIgaW5zaWRlIHRoZSBgYnVpbGRgIGRpcmVjdG9yeVxuICAgICAqIEBzaW5jZSAwLjIuMFxuICAgICAqL1xuICAgIHByaXZhdGUgdGFyZ2V0UGF0aDogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQXNzZXRNYW5hZ2VyIGNvbnN0cnVjdG9yXG4gICAgICogQHNpbmNlIDAuMi4wXG4gICAgICovXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKHNvdXJjZVBhdGg6IHN0cmluZywgdGFyZ2V0UGF0aDogc3RyaW5nLCBldmVudEVtaXR0ZXI/OiBFdmVudEVtaXR0ZXIpIHtcbiAgICAgICAgaWYgKGV2ZW50RW1pdHRlcikge1xuICAgICAgICAgICAgbGV0IGV2ZW50TGlzdGVuZXJQYWlycyA9IFtdO1xuICAgICAgICAgICAgc3VwZXIoZXZlbnRFbWl0dGVyLCBldmVudExpc3RlbmVyUGFpcnMpO1xuICAgICAgICAgICAgZXZlbnRMaXN0ZW5lclBhaXJzLnB1c2goe1xuICAgICAgICAgICAgICAgIGV2ZW50OiBBU1NFVF9DSEFOR0VfRVZFTlQsXG4gICAgICAgICAgICAgICAgbGlzdGVuZXI6IChhc3NldFBhdGgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgTG9nZ2VyLmxvZygnVXBkYXRpbmcgYCcgKyBMb2dnZXIuYnJhbmQocGF0aC5qb2luKCdhc3NldHMnLCBhc3NldFBhdGgpKSArICdgLi4uJyk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29weUFzc2V0KGFzc2V0UGF0aCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgZXZlbnRMaXN0ZW5lclBhaXJzLnB1c2goe1xuICAgICAgICAgICAgICAgIGV2ZW50OiBBU1NFVF9SRU1PVkVfRVZFTlQsXG4gICAgICAgICAgICAgICAgbGlzdGVuZXI6IChhc3NldFBhdGgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgTG9nZ2VyLmxvZygnUmVtb3ZpbmcgYCcgKyBMb2dnZXIuYnJhbmQocGF0aC5qb2luKCdhc3NldHMnLCBhc3NldFBhdGgpKSArICdgLi4uJyk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlQXNzZXQoYXNzZXRQYXRoKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzdXBlcigpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc291cmNlUGF0aCA9IHNvdXJjZVBhdGg7XG4gICAgICAgIHRoaXMudGFyZ2V0UGF0aCA9IHRhcmdldFBhdGg7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29waWVzIGFsbCBhc3NldHMgaW50byB0aGUgYnVpbGQgZm9sZGVyXG4gICAgICogQHNpbmNlIDAuMi4wXG4gICAgICovXG4gICAgcHVibGljIGNvcHlBc3NldHMoKSB7XG4gICAgICAgIGZzZS5jb3B5U3luYyh0aGlzLnNvdXJjZVBhdGgsIHRoaXMudGFyZ2V0UGF0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29waWVzIGEgc2luZ2xlIGFzc2V0LCBvdmVyd3JpdGluZyB0aGUgZmlsZSBpbiB0YXJnZXQgZGlyZWN0b3J5IGlmIG5lZWRlZFxuICAgICAqIEBzaW5jZSAwLjIuMFxuICAgICAqL1xuICAgIHB1YmxpYyBjb3B5QXNzZXQoYXNzZXRQYXRoOiBzdHJpbmcpIHtcbiAgICAgICAgbGV0IGFzc2V0U291cmNlUGF0aCA9IHBhdGguam9pbih0aGlzLnNvdXJjZVBhdGgsIGFzc2V0UGF0aCk7XG4gICAgICAgIGxldCBhc3NldFRhcmdldFBhdGggPSBwYXRoLmpvaW4odGhpcy50YXJnZXRQYXRoLCBhc3NldFBhdGgpO1xuICAgICAgICBmc2UuZW5zdXJlRGlyU3luYyhwYXRoLmRpcm5hbWUoYXNzZXRUYXJnZXRQYXRoKSk7XG4gICAgICAgIGZzZS5jb3B5U3luYyhhc3NldFNvdXJjZVBhdGgsIGFzc2V0VGFyZ2V0UGF0aCk7XG4gICAgICAgIGlmICh0aGlzLmV2ZW50RW1pdHRlcikge1xuICAgICAgICAgICAgdGhpcy5ldmVudEVtaXR0ZXIuZW1pdChCVUlMRF9DSEFOR0VfRVZFTlQsIHBhdGguam9pbignYXNzZXRzJywgYXNzZXRQYXRoKSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAc2luY2UgMC4yLjBcbiAgICAgKi9cbiAgICBwdWJsaWMgcmVtb3ZlQXNzZXQoYXNzZXRQYXRoOiBzdHJpbmcpIHtcbiAgICAgICAgZnNlLnJlbW92ZVN5bmMocGF0aC5qb2luKHRoaXMudGFyZ2V0UGF0aCwgYXNzZXRQYXRoKSk7XG4gICAgICAgIGlmICh0aGlzLmV2ZW50RW1pdHRlcikge1xuICAgICAgICAgICAgdGhpcy5ldmVudEVtaXR0ZXIuZW1pdChCVUlMRF9DSEFOR0VfRVZFTlQsIHBhdGguam9pbignYXNzZXRzJywgYXNzZXRQYXRoKSk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iXX0=
