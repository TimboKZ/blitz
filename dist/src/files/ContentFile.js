"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var fm = require('front-matter');
var deepEqual = require('deep-equal');
var deepDiff = require('deep-diff');
var GenericFile_1 = require('./GenericFile');
var Content_1 = require('../components/Content');
var ContentFile = (function (_super) {
    __extends(ContentFile, _super);
    function ContentFile(path) {
        _super.call(this, path);
        this.attributes = {};
        this.content = new Content_1.Content();
    }
    ContentFile.prototype.reload = function () {
        var changes = {};
        var tempContents = this.contents;
        this.read();
        if (tempContents === this.contents) {
            return changes;
        }
        var contentsObject = fm(this.contents);
        if (!deepEqual(this.attributes, contentsObject.attributes)) {
            changes.attributes = deepDiff.diff(this.attributes, contentsObject.attributes);
            this.attributes = contentsObject.attributes;
        }
        if (this.rawContent !== contentsObject.body) {
            this.rawContent = contentsObject.body;
            this.content.prepare(this.rawContent);
            changes.content = {};
            changes.content.ids = this.content.getIds();
            changes.content.assets = this.content.getAssets();
            changes.content.generator = this.content.generate;
        }
        return changes;
    };
    ContentFile.prototype.write = function () {
        throw new Error('Attempted to write to a content file. This is not allowed!');
    };
    ContentFile.prototype.getAttributes = function () {
        return this.attributes;
    };
    ContentFile.prototype.getContent = function () {
        return this.content;
    };
    return ContentFile;
}(GenericFile_1.GenericFile));
exports.ContentFile = ContentFile;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9maWxlcy9Db250ZW50RmlsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFRQSxJQUFZLEVBQUUsV0FBTSxjQUFjLENBQUMsQ0FBQTtBQUNuQyxJQUFZLFNBQVMsV0FBTSxZQUFZLENBQUMsQ0FBQTtBQUN4QyxJQUFZLFFBQVEsV0FBTSxXQUFXLENBQUMsQ0FBQTtBQUN0Qyw0QkFBdUMsZUFBZSxDQUFDLENBQUE7QUFDdkQsd0JBQXNCLHVCQUF1QixDQUFDLENBQUE7QUErQjlDO0lBQWlDLCtCQUFXO0lBdUJ4QyxxQkFBbUIsSUFBWTtRQUMzQixrQkFBTSxJQUFJLENBQUMsQ0FBQztRQUNaLElBQUksQ0FBQyxVQUFVLEdBQUcsRUFBRSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxpQkFBTyxFQUFFLENBQUM7SUFDakMsQ0FBQztJQU1NLDRCQUFNLEdBQWI7UUFDSSxJQUFJLE9BQU8sR0FBUSxFQUFFLENBQUM7UUFDdEIsSUFBSSxZQUFZLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztRQUNqQyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDWixFQUFFLENBQUMsQ0FBQyxZQUFZLEtBQUssSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFDakMsTUFBTSxDQUFDLE9BQU8sQ0FBQztRQUNuQixDQUFDO1FBQ0QsSUFBSSxjQUFjLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUN2QyxFQUFFLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLGNBQWMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDekQsT0FBTyxDQUFDLFVBQVUsR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsY0FBYyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBQy9FLElBQUksQ0FBQyxVQUFVLEdBQUcsY0FBYyxDQUFDLFVBQVUsQ0FBQztRQUNoRCxDQUFDO1FBQ0QsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsS0FBSyxjQUFjLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUMxQyxJQUFJLENBQUMsVUFBVSxHQUFHLGNBQWMsQ0FBQyxJQUFJLENBQUM7WUFDdEMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBQ3RDLE9BQU8sQ0FBQyxPQUFPLEdBQUcsRUFBRSxDQUFDO1lBQ3JCLE9BQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLENBQUM7WUFDNUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEVBQUUsQ0FBQztZQUNsRCxPQUFPLENBQUMsT0FBTyxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQztRQUN0RCxDQUFDO1FBQ0QsTUFBTSxDQUFDLE9BQThCLENBQUM7SUFDMUMsQ0FBQztJQUVNLDJCQUFLLEdBQVo7UUFDSSxNQUFNLElBQUksS0FBSyxDQUFDLDREQUE0RCxDQUFDLENBQUM7SUFDbEYsQ0FBQztJQUVNLG1DQUFhLEdBQXBCO1FBQ0ksTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUM7SUFDM0IsQ0FBQztJQUVNLGdDQUFVLEdBQWpCO1FBQ0ksTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7SUFDeEIsQ0FBQztJQUNMLGtCQUFDO0FBQUQsQ0FuRUEsQUFtRUMsQ0FuRWdDLHlCQUFXLEdBbUUzQztBQW5FWSxtQkFBVyxjQW1FdkIsQ0FBQSIsImZpbGUiOiJzcmMvZmlsZXMvQ29udGVudEZpbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlIENvbnRhaW5zIGNvZGUgcmVsYXRlZCBDb250ZW50IEZpbGUgcGFyc2luZ1xuICogQGF1dGhvciBUaW11ciBLdXpoYWdhbGl5ZXYgPHRpbS5rdXpoQGdtYWlsLmNvbT5cbiAqIEBjb3B5cmlnaHQgMjAxNlxuICogQGxpY2Vuc2UgR1BMLTMuMFxuICogQHNpbmNlIDAuMi4wXG4gKi9cblxuaW1wb3J0ICogYXMgZm0gZnJvbSAnZnJvbnQtbWF0dGVyJztcbmltcG9ydCAqIGFzIGRlZXBFcXVhbCBmcm9tICdkZWVwLWVxdWFsJztcbmltcG9ydCAqIGFzIGRlZXBEaWZmIGZyb20gJ2RlZXAtZGlmZic7XG5pbXBvcnQge0dlbmVyaWNGaWxlLCBJUmVsb2FkYWJsZX0gZnJvbSAnLi9HZW5lcmljRmlsZSc7XG5pbXBvcnQge0NvbnRlbnR9IGZyb20gJy4uL2NvbXBvbmVudHMvQ29udGVudCc7XG5pbXBvcnQge0NvbnRlbnRQYXJzZXJ9IGZyb20gJy4uL0NvbnRlbnRQYXJzZXInO1xuaW1wb3J0IHtJVXJsR2VuZXJhdG9yLCBJQXNzZXRQYXRoR2VuZXJhdG9yfSBmcm9tICcuLi9jb3JlL1Byb2plY3RCdWlsZGVyJztcblxuLyoqXG4gKiBBdHRyaWJ1dGVzIGRlZmluZWQgaW4gdGhlIGZyb250IG1hdHRlciBvZiBhIGNvbnRlbnQgZmlsZVxuICogQHNpbmNlIDAuMi4wXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSUNvbnRlbnRGaWxlQXR0cmlidXRlcyB7XG4gICAgW2tleTogc3RyaW5nXTogYW55O1xufVxuXG4vKipcbiAqXG4gKiBAc2luY2UgMC4yLjBcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJQ29udGVudEZpbGVDaGFuZ2VzIHtcbiAgICBhdHRyaWJ1dGVzOiBkZWVwRGlmZi5JRGlmZltdO1xuICAgIGNvbnRlbnQ6IHtcbiAgICAgICAgaWRzOiBzdHJpbmdbXSxcbiAgICAgICAgYXNzZXRzOiBzdHJpbmdbXSxcbiAgICAgICAgZ2VuZXJhdG9yOiAodXJsR2VuZXJhdG9yOiBJVXJsR2VuZXJhdG9yLFxuICAgICAgICAgICAgICAgICAgICBhc3NldFBhdGhHZW5lcmF0b3I6IElBc3NldFBhdGhHZW5lcmF0b3IsXG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnRQYXJzZXI6IENvbnRlbnRQYXJzZXIpID0+IHN0cmluZyxcbiAgICB9O1xufVxuXG4vKipcbiAqIEBjbGFzcyBGaWxlIHJlc3BvbnNpYmxlIGZvciByZXByZXNlbnRpbmcgY29udGVudCBmaWxlc1xuICogQHNpbmNlIDAuMi4wXG4gKi9cbmV4cG9ydCBjbGFzcyBDb250ZW50RmlsZSBleHRlbmRzIEdlbmVyaWNGaWxlIGltcGxlbWVudHMgSVJlbG9hZGFibGUge1xuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZXMgZXh0cmFjdGVkIGZyb20gdGhlIGZyb250IG1hdHRlclxuICAgICAqIEBzaW5jZSAwLjIuMFxuICAgICAqL1xuICAgIHByaXZhdGUgYXR0cmlidXRlczogSUNvbnRlbnRGaWxlQXR0cmlidXRlcztcblxuICAgIC8qKlxuICAgICAqIFJhdyBjb250ZW50IG9mIGEgY29udGVudCBmaWxlIChldmVyeXRoaW5nIGV4Y2VwdCB0aGUgZnJvbnQgbWF0dGVyKVxuICAgICAqIEBzaW5jZSAwLjIuMFxuICAgICAqL1xuICAgIHByaXZhdGUgcmF3Q29udGVudDogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogUHJvY2Vzc2VkIGNvbnRlbnRcbiAgICAgKiBAc2luY2UgMC4yLjBcbiAgICAgKi9cbiAgICBwcml2YXRlIGNvbnRlbnQ6IENvbnRlbnQ7XG5cbiAgICAvKipcbiAgICAgKiBDb250ZW50RmlsZSBjb25zdHJ1Y3RvclxuICAgICAqIEBzaW5jZSAwLjIuMFxuICAgICAqL1xuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcihwYXRoOiBzdHJpbmcpIHtcbiAgICAgICAgc3VwZXIocGF0aCk7XG4gICAgICAgIHRoaXMuYXR0cmlidXRlcyA9IHt9O1xuICAgICAgICB0aGlzLmNvbnRlbnQgPSBuZXcgQ29udGVudCgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbG9hZHMgdGhlIGNvbnRlbnRzIG9mIHRoZSBmaWxlIGFuZCBwcm9jZXNzZXMgYW55IGNoYW5nZXNcbiAgICAgKiBAc2luY2UgMC4yLjBcbiAgICAgKi9cbiAgICBwdWJsaWMgcmVsb2FkKCk6IElDb250ZW50RmlsZUNoYW5nZXMge1xuICAgICAgICBsZXQgY2hhbmdlczogYW55ID0ge307XG4gICAgICAgIGxldCB0ZW1wQ29udGVudHMgPSB0aGlzLmNvbnRlbnRzO1xuICAgICAgICB0aGlzLnJlYWQoKTtcbiAgICAgICAgaWYgKHRlbXBDb250ZW50cyA9PT0gdGhpcy5jb250ZW50cykge1xuICAgICAgICAgICAgcmV0dXJuIGNoYW5nZXM7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGNvbnRlbnRzT2JqZWN0ID0gZm0odGhpcy5jb250ZW50cyk7XG4gICAgICAgIGlmICghZGVlcEVxdWFsKHRoaXMuYXR0cmlidXRlcywgY29udGVudHNPYmplY3QuYXR0cmlidXRlcykpIHtcbiAgICAgICAgICAgIGNoYW5nZXMuYXR0cmlidXRlcyA9IGRlZXBEaWZmLmRpZmYodGhpcy5hdHRyaWJ1dGVzLCBjb250ZW50c09iamVjdC5hdHRyaWJ1dGVzKTtcbiAgICAgICAgICAgIHRoaXMuYXR0cmlidXRlcyA9IGNvbnRlbnRzT2JqZWN0LmF0dHJpYnV0ZXM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMucmF3Q29udGVudCAhPT0gY29udGVudHNPYmplY3QuYm9keSkge1xuICAgICAgICAgICAgdGhpcy5yYXdDb250ZW50ID0gY29udGVudHNPYmplY3QuYm9keTtcbiAgICAgICAgICAgIHRoaXMuY29udGVudC5wcmVwYXJlKHRoaXMucmF3Q29udGVudCk7XG4gICAgICAgICAgICBjaGFuZ2VzLmNvbnRlbnQgPSB7fTtcbiAgICAgICAgICAgIGNoYW5nZXMuY29udGVudC5pZHMgPSB0aGlzLmNvbnRlbnQuZ2V0SWRzKCk7XG4gICAgICAgICAgICBjaGFuZ2VzLmNvbnRlbnQuYXNzZXRzID0gdGhpcy5jb250ZW50LmdldEFzc2V0cygpO1xuICAgICAgICAgICAgY2hhbmdlcy5jb250ZW50LmdlbmVyYXRvciA9IHRoaXMuY29udGVudC5nZW5lcmF0ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY2hhbmdlcyBhcyBJQ29udGVudEZpbGVDaGFuZ2VzO1xuICAgIH1cblxuICAgIHB1YmxpYyB3cml0ZSgpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdBdHRlbXB0ZWQgdG8gd3JpdGUgdG8gYSBjb250ZW50IGZpbGUuIFRoaXMgaXMgbm90IGFsbG93ZWQhJyk7XG4gICAgfVxuXG4gICAgcHVibGljIGdldEF0dHJpYnV0ZXMoKTogSUNvbnRlbnRGaWxlQXR0cmlidXRlcyB7XG4gICAgICAgIHJldHVybiB0aGlzLmF0dHJpYnV0ZXM7XG4gICAgfVxuXG4gICAgcHVibGljIGdldENvbnRlbnQoKTogQ29udGVudCB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbnRlbnQ7XG4gICAgfVxufVxuIl19
