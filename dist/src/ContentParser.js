"use strict";
var fs = require("fs");
var path = require("path");
var fm = require("front-matter");
var Util_1 = require("./Util");
var ContentParser = (function () {
    function ContentParser() {
    }
    ContentParser.parse = function (content) {
        var result;
        var parsedFrontMatter = fm(content);
        if (typeof parsedFrontMatter.attributes === 'string') {
            result = {
                title: parsedFrontMatter.attributes,
            };
        }
        else {
            result = parsedFrontMatter.attributes;
        }
        result.content = Util_1.Util.parseMarkdown(parsedFrontMatter.body);
        return result;
    };
    ContentParser.parseFile = function (filePath) {
        if (this.fileCache[filePath] === undefined) {
            var fileContents = Util_1.Util.getFileContents(filePath);
            var rawData = ContentParser.parse(fileContents);
            rawData.file = path.basename(filePath);
            this.fileCache[filePath] = rawData;
        }
        return this.fileCache[filePath];
    };
    ContentParser.parseDirectory = function (directoryPath) {
        if (this.directoryCache[directoryPath] === undefined) {
            var files = fs.readdirSync(directoryPath);
            var fileCount = files.length;
            var directoryData = [];
            for (var i = 0; i < fileCount; i++) {
                var filePath = path.join(directoryPath, files[i]);
                var fileStats = fs.lstatSync(filePath);
                if (fileStats.isFile()) {
                    var fileData = ContentParser.parseFile(filePath);
                    directoryData.push(fileData);
                }
            }
            this.directoryCache[directoryPath] = directoryData;
        }
        return this.directoryCache[directoryPath];
    };
    return ContentParser;
}());
ContentParser.directoryCache = {};
ContentParser.fileCache = {};
exports.ContentParser = ContentParser;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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QUUsQ0FBQztBQVh4QyxzQ0FBYSIsImZpbGUiOiJzcmMvQ29udGVudFBhcnNlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGUgRmlsZSBjb250YWluaW5nIGV2ZXJ5dGhpbmcgcmVsYXRlZCB0byBjb250ZW50IHBhcnNpbmdcbiAqIEBhdXRob3IgVGltdXIgS3V6aGFnYWxpeWV2IDx0aW0ua3V6aEBnbWFpbC5jb20+XG4gKiBAY29weXJpZ2h0IDIwMTZcbiAqIEBsaWNlbnNlIEdQTC0zLjBcbiAqIEBzaW5jZSAwLjAuMVxuICovXG5cbmltcG9ydCAqIGFzIGZzIGZyb20gJ2ZzJztcbmltcG9ydCAqIGFzIHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgKiBhcyBmbSBmcm9tICdmcm9udC1tYXR0ZXInO1xuaW1wb3J0IHtVdGlsfSBmcm9tICcuL1V0aWwnO1xuXG4vKipcbiAqIEludGVyZmFjZSBmb3IgY29udGVudCBjYWNoZVxuICogQHNpbmNlIDAuMC4xXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSURpcmVjdG9yeUNvbnRlbnRDYWNoZSB7XG4gICAgW3BhdGg6IHN0cmluZ106IElQcm9jZXNzZWRGaWxlQ29udGVudFtdO1xufVxuZXhwb3J0IGludGVyZmFjZSBJRmlsZUNvbnRlbnRDYWNoZSB7XG4gICAgW3BhdGg6IHN0cmluZ106IElQcm9jZXNzZWRGaWxlQ29udGVudDtcbn1cblxuLyoqXG4gKiBJbnRlcmZhY2VzIGZvciBwcm9jZXNzZWQgZGF0YVxuICogQHNpbmNlIDAuMS4yIEFkZGVkIGBJUHJvY2Vzc2VkQ29udGVudGBcbiAqIEBzaW5jZSAwLjAuMVxuICovXG5leHBvcnQgaW50ZXJmYWNlIElQcm9jZXNzZWRDb250ZW50IHtcbiAgICB0aXRsZT86IHN0cmluZztcbiAgICBjb250ZW50OiBzdHJpbmc7XG4gICAgW2tleTogc3RyaW5nXTogYW55O1xufVxuZXhwb3J0IGludGVyZmFjZSBJUHJvY2Vzc2VkRmlsZUNvbnRlbnQgZXh0ZW5kcyBJUHJvY2Vzc2VkQ29udGVudCB7XG4gICAgZmlsZTogc3RyaW5nO1xufVxuXG4vKipcbiAqIEBjbGFzcyBDb2xsZWN0aW9uIG9mIHN0YXRpYyBtZXRob2RzIGZvciBjb250ZW50IHBhcnNpbmdcbiAqIEBzaW5jZSAwLjAuMVxuICovXG5leHBvcnQgY2xhc3MgQ29udGVudFBhcnNlciB7XG4gICAgLyoqXG4gICAgICogQ2FjaGUgZm9yIHRoZSBjb250ZW50cyBvZiBhIGRpcmVjdG9yeVxuICAgICAqIEBzaW5jZSAwLjAuMVxuICAgICAqL1xuICAgIHByaXZhdGUgc3RhdGljIGRpcmVjdG9yeUNhY2hlOiBJRGlyZWN0b3J5Q29udGVudENhY2hlID0ge307XG5cbiAgICAvKipcbiAgICAgKiBDYWNoZSBmb3IgdGhlIGNvbnRlbnRzIG9mIGEgZmlsZVxuICAgICAqIEBzaW5jZSAwLjAuMVxuICAgICAqL1xuICAgIHByaXZhdGUgc3RhdGljIGZpbGVDYWNoZTogSUZpbGVDb250ZW50Q2FjaGUgPSB7fTtcblxuICAgIC8qKlxuICAgICAqIEV4dHJhY3RzIGZyb250IG1hdHRlciB1c2luZyB0aGUgYGZyb250LW1hdHRlcmAgcGFja2FnZSBhbmQgYWRkcyBhIGBjb250ZW50YCBwcm9wZXJ0eVxuICAgICAqXG4gICAgICogSWYgWUFNTCBleHRyYWN0ZWQgZnJvbSBmcm9udCBtYXR0ZXIgaXMgYSBzdHJpbmcsIG1ha2UgaXQgdGhlIGB0aXRsZWAuXG4gICAgICpcbiAgICAgKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9qeHNvbi9mcm9udC1tYXR0ZXJcbiAgICAgKiBAc2luY2UgMC4xLjIgTm93IHVzZXMgYGZyb250LW1hdHRlcmAgcGFja2FnZVxuICAgICAqIEBzaW5jZSAwLjAuMVxuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgcGFyc2UoY29udGVudDogc3RyaW5nKTogSVByb2Nlc3NlZENvbnRlbnQge1xuICAgICAgICBsZXQgcmVzdWx0O1xuICAgICAgICBsZXQgcGFyc2VkRnJvbnRNYXR0ZXIgPSBmbShjb250ZW50KTtcbiAgICAgICAgaWYgKHR5cGVvZiBwYXJzZWRGcm9udE1hdHRlci5hdHRyaWJ1dGVzID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgcmVzdWx0ID0ge1xuICAgICAgICAgICAgICAgIHRpdGxlOiBwYXJzZWRGcm9udE1hdHRlci5hdHRyaWJ1dGVzLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IHBhcnNlZEZyb250TWF0dGVyLmF0dHJpYnV0ZXM7XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0LmNvbnRlbnQgPSBVdGlsLnBhcnNlTWFya2Rvd24ocGFyc2VkRnJvbnRNYXR0ZXIuYm9keSk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTG9hZHMgY29udGVudCBvZiB0aGUgc3VwcGxpZWQgZmlsZSBhbmQgcGlwZXMgaXQgaW50byBgVXRpbC5wYXJzZSgpYCBvciByZXR1cm5zIGZyb20gY2FjaGUgaWYgcG9zc2libGUuXG4gICAgICpcbiAgICAgKiBBZGRzIGEgcHJvcGVydHkgY2FsbGVkIGBmaWxlYCB0byB0aGUgcmF3IGRhdGEuXG4gICAgICpcbiAgICAgKiBAc2luY2UgMC4xLjIgUmVtb3ZlZCB0cnkvY2F0Y2ggYmxvY2tzXG4gICAgICogQHNpbmNlIDAuMC4xXG4gICAgICovXG4gICAgcHVibGljIHN0YXRpYyBwYXJzZUZpbGUoZmlsZVBhdGg6IHN0cmluZyk6IElQcm9jZXNzZWRGaWxlQ29udGVudCB7XG4gICAgICAgIGlmICh0aGlzLmZpbGVDYWNoZVtmaWxlUGF0aF0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgbGV0IGZpbGVDb250ZW50cyA9IFV0aWwuZ2V0RmlsZUNvbnRlbnRzKGZpbGVQYXRoKTtcbiAgICAgICAgICAgIGxldCByYXdEYXRhID0gQ29udGVudFBhcnNlci5wYXJzZShmaWxlQ29udGVudHMpO1xuICAgICAgICAgICAgKHJhd0RhdGEgYXMgSVByb2Nlc3NlZEZpbGVDb250ZW50KS5maWxlID0gcGF0aC5iYXNlbmFtZShmaWxlUGF0aCk7XG4gICAgICAgICAgICB0aGlzLmZpbGVDYWNoZVtmaWxlUGF0aF0gPSAocmF3RGF0YSBhcyBJUHJvY2Vzc2VkRmlsZUNvbnRlbnQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmZpbGVDYWNoZVtmaWxlUGF0aF07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTG9hZHMgY29udGVudCBvZiBhIGRpcmVjdG9yeSwgYXMgYW4gYXJyYXkgd2l0aCBhbiBlbGVtZW50IGZvciBlYWNoIGZpbGUsIG9yIHJldHVybnMgZnJvbSBjYWNoZSBpZiBwb3NzaWJsZS5cbiAgICAgKlxuICAgICAqIFRoaXMgZnVuY3Rpb24gaXMgTk9UIHJlY3Vyc2l2ZSwgaS5lLiBpdCB3aWxsIE5PVCBwYXJzZSBuZXN0ZWQgZGlyZWN0b3JpZXMuXG4gICAgICpcbiAgICAgKiBAc2luY2UgMC4xLjIgUmVtb3ZlZCB0cnkvY2F0Y2ggYmxvY2tzXG4gICAgICogQHNpbmNlIDAuMC4xXG4gICAgICovXG4gICAgcHVibGljIHN0YXRpYyBwYXJzZURpcmVjdG9yeShkaXJlY3RvcnlQYXRoOiBzdHJpbmcpOiBJUHJvY2Vzc2VkRmlsZUNvbnRlbnRbXSB7XG4gICAgICAgIGlmICh0aGlzLmRpcmVjdG9yeUNhY2hlW2RpcmVjdG9yeVBhdGhdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGxldCBmaWxlcyA9IGZzLnJlYWRkaXJTeW5jKGRpcmVjdG9yeVBhdGgpO1xuICAgICAgICAgICAgbGV0IGZpbGVDb3VudCA9IGZpbGVzLmxlbmd0aDtcbiAgICAgICAgICAgIGxldCBkaXJlY3RvcnlEYXRhOiBhbnlbXSA9IFtdO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmaWxlQ291bnQ7IGkrKykge1xuICAgICAgICAgICAgICAgIGxldCBmaWxlUGF0aCA9IHBhdGguam9pbihkaXJlY3RvcnlQYXRoLCBmaWxlc1tpXSk7XG4gICAgICAgICAgICAgICAgbGV0IGZpbGVTdGF0cyA9IGZzLmxzdGF0U3luYyhmaWxlUGF0aCk7XG4gICAgICAgICAgICAgICAgaWYgKGZpbGVTdGF0cy5pc0ZpbGUoKSkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgZmlsZURhdGEgPSBDb250ZW50UGFyc2VyLnBhcnNlRmlsZShmaWxlUGF0aCk7XG4gICAgICAgICAgICAgICAgICAgIGRpcmVjdG9yeURhdGEucHVzaChmaWxlRGF0YSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5kaXJlY3RvcnlDYWNoZVtkaXJlY3RvcnlQYXRoXSA9IGRpcmVjdG9yeURhdGE7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuZGlyZWN0b3J5Q2FjaGVbZGlyZWN0b3J5UGF0aF07XG4gICAgfVxufVxuIl19
