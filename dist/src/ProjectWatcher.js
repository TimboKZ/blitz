"use strict";
var path = require('path');
var chokidar = require('chokidar');
var AssetManager_1 = require('./AssetManager');
exports.BUILD_CHANGE_EVENT = 'buildChange';
var ProjectWatcher = (function () {
    function ProjectWatcher(configPath, buildPath, eventEmitter) {
        this.configPath = configPath;
        this.projectPath = path.dirname(configPath);
        this.buildPath = buildPath;
        this.eventEmitter = eventEmitter;
    }
    ProjectWatcher.prototype.watch = function () {
        this.setupFileWatchers();
        var assetManager = new AssetManager_1.AssetManager(path.join(this.projectPath, 'assets'), path.join(this.buildPath, 'assets'), this.eventEmitter);
        assetManager.setupListeners();
    };
    ProjectWatcher.prototype.setupFileWatchers = function () {
        this.setupFileWatcher('assets', [
            {
                fsEvent: 'add',
                blitzEvent: AssetManager_1.ASSET_CHANGE_EVENT,
            },
            {
                fsEvent: 'addDir',
                blitzEvent: AssetManager_1.ASSET_CHANGE_EVENT,
            },
            {
                fsEvent: 'change',
                blitzEvent: AssetManager_1.ASSET_CHANGE_EVENT,
            },
            {
                fsEvent: 'unlink',
                blitzEvent: AssetManager_1.ASSET_REMOVE_EVENT,
            },
            {
                fsEvent: 'unlinkDir',
                blitzEvent: AssetManager_1.ASSET_REMOVE_EVENT,
            },
        ]);
    };
    ProjectWatcher.prototype.setupFileWatcher = function (watchPath, events) {
        var _this = this;
        var fullPath = path.join(this.projectPath, watchPath);
        var watcher = chokidar.watch(fullPath);
        var _loop_1 = function(i) {
            var event_1 = events[i];
            watcher.on(event_1.fsEvent, function (filePath) { return _this.eventEmitter.emit(event_1.blitzEvent, path.relative(fullPath, filePath)); });
        };
        for (var i = 0; i < events.length; i++) {
            _loop_1(i);
        }
        watcher.on('error', function (error) {
            if (process.platform === 'win32'
                && error.code === 'EPERM'
                && error.filename === null) {
                return;
            }
            return error;
        });
    };
    return ProjectWatcher;
}());
exports.ProjectWatcher = ProjectWatcher;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9Qcm9qZWN0V2F0Y2hlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBUUEsSUFBWSxJQUFJLFdBQU0sTUFBTSxDQUFDLENBQUE7QUFDN0IsSUFBWSxRQUFRLFdBQU0sVUFBVSxDQUFDLENBQUE7QUFDckMsNkJBQW1FLGdCQUFnQixDQUFDLENBQUE7QUFnQnZFLDBCQUFrQixHQUFHLGFBQWEsQ0FBQztBQU1oRDtJQTZCSSx3QkFBWSxVQUFrQixFQUFFLFNBQWlCLEVBQUUsWUFBMEI7UUFDekUsSUFBSSxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUM7UUFDN0IsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQzVDLElBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO1FBQzNCLElBQUksQ0FBQyxZQUFZLEdBQUcsWUFBWSxDQUFDO0lBQ3JDLENBQUM7SUFNTSw4QkFBSyxHQUFaO1FBQ0ksSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUM7UUFDekIsSUFBSSxZQUFZLEdBQUcsSUFBSSwyQkFBWSxDQUMvQixJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsUUFBUSxDQUFDLEVBQ3JDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxRQUFRLENBQUMsRUFDbkMsSUFBSSxDQUFDLFlBQVksQ0FDcEIsQ0FBQztRQUNGLFlBQVksQ0FBQyxjQUFjLEVBQUUsQ0FBQztJQUNsQyxDQUFDO0lBTU8sMENBQWlCLEdBQXpCO1FBQ0ksSUFBSSxDQUFDLGdCQUFnQixDQUFDLFFBQVEsRUFBRTtZQUM1QjtnQkFDSSxPQUFPLEVBQUUsS0FBSztnQkFDZCxVQUFVLEVBQUUsaUNBQWtCO2FBQ2pDO1lBQ0Q7Z0JBQ0ksT0FBTyxFQUFFLFFBQVE7Z0JBQ2pCLFVBQVUsRUFBRSxpQ0FBa0I7YUFDakM7WUFDRDtnQkFDSSxPQUFPLEVBQUUsUUFBUTtnQkFDakIsVUFBVSxFQUFFLGlDQUFrQjthQUNqQztZQUNEO2dCQUNJLE9BQU8sRUFBRSxRQUFRO2dCQUNqQixVQUFVLEVBQUUsaUNBQWtCO2FBQ2pDO1lBQ0Q7Z0JBQ0ksT0FBTyxFQUFFLFdBQVc7Z0JBQ3BCLFVBQVUsRUFBRSxpQ0FBa0I7YUFDakM7U0FDSixDQUFDLENBQUM7SUFDUCxDQUFDO0lBTU8seUNBQWdCLEdBQXhCLFVBQXlCLFNBQWlCLEVBQUUsTUFBc0I7UUFBbEUsaUJBbUJDO1FBbEJHLElBQUksUUFBUSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxTQUFTLENBQUMsQ0FBQztRQUN0RCxJQUFJLE9BQU8sR0FBRyxRQUFRLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3ZDO1lBQ0ksSUFBSSxPQUFLLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3RCLE9BQU8sQ0FBQyxFQUFFLENBQ04sT0FBSyxDQUFDLE9BQU8sRUFDYixVQUFDLFFBQVEsSUFBSyxPQUFBLEtBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLE9BQUssQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLEVBQUUsUUFBUSxDQUFDLENBQUMsRUFBM0UsQ0FBMkUsQ0FDNUYsQ0FBQzs7UUFMTixHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFOztTQU1yQztRQUNELE9BQU8sQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLFVBQUMsS0FBVTtZQUUzQixFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsUUFBUSxLQUFLLE9BQU87bUJBQ3pCLEtBQUssQ0FBQyxJQUFJLEtBQUssT0FBTzttQkFDdEIsS0FBSyxDQUFDLFFBQVEsS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDO2dCQUM3QixNQUFNLENBQUM7WUFDWCxDQUFDO1lBQ0QsTUFBTSxDQUFDLEtBQUssQ0FBQztRQUNqQixDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFDTCxxQkFBQztBQUFELENBdkdBLEFBdUdDLElBQUE7QUF2R1ksc0JBQWMsaUJBdUcxQixDQUFBIiwiZmlsZSI6InNyYy9Qcm9qZWN0V2F0Y2hlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGUgQ29udGFpbnMgY29kZSByZWxhdGVkIHRvIHdhdGNoaW5nIHByb2plY3QgZm9yIGNoYW5nZXMgYW5kIHJlY29tcGlsaW5nXG4gKiBAYXV0aG9yIFRpbXVyIEt1emhhZ2FsaXlldiA8dGltLmt1emhAZ21haWwuY29tPlxuICogQGNvcHlyaWdodCAyMDE2XG4gKiBAbGljZW5zZSBHUEwtMy4wXG4gKiBAc2luY2UgMC4yLjBcbiAqL1xuXG5pbXBvcnQgKiBhcyBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0ICogYXMgY2hva2lkYXIgZnJvbSAnY2hva2lkYXInO1xuaW1wb3J0IHtBc3NldE1hbmFnZXIsIEFTU0VUX0NIQU5HRV9FVkVOVCwgQVNTRVRfUkVNT1ZFX0VWRU5UfSBmcm9tICcuL0Fzc2V0TWFuYWdlcic7XG5pbXBvcnQge0V2ZW50RW1pdHRlcn0gZnJvbSAnZXZlbnRzJztcblxuLyoqXG4gKlxuICogQHNpbmNlIDAuMi4wXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSUZTRXZlbnRQYWlyIHtcbiAgICBmc0V2ZW50OiBzdHJpbmc7XG4gICAgYmxpdHpFdmVudDogc3RyaW5nO1xufVxuXG4vKipcbiAqIEV2ZW50IGNhbGxlZCB3aGVuIGEgZmlsZSBpbnNpZGUgdGhlIGJ1aWxkIGZvbGRlciBjaGFuZ2VzXG4gKiBAc2luY2UgMC4yLjBcbiAqL1xuZXhwb3J0IGNvbnN0IEJVSUxEX0NIQU5HRV9FVkVOVCA9ICdidWlsZENoYW5nZSc7XG5cbi8qKlxuICogQGNsYXNzIFByZXBhcmVzIHRoZSBwcm9qZWN0IGZvciBidWlsZGluZyBhbmQgd2F0Y2hlcyBpdCBmb3IgY2hhbmdlc1xuICogQHNpbmNlIDAuMi4wXG4gKi9cbmV4cG9ydCBjbGFzcyBQcm9qZWN0V2F0Y2hlciB7XG4gICAgLyoqXG4gICAgICogTG9jYXRpb24gb2YgdGhlIGNvbmZpZyB0aGF0IHdpbGwgYmUgdXNlZCBmb3IgZ2VuZXJhdGlvbiBvZiB0aGUgd2Vic2l0ZVxuICAgICAqIEBzaW5jZSAwLjIuMFxuICAgICAqL1xuICAgIHByaXZhdGUgY29uZmlnUGF0aDogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogUm9vdCBwcm9qZWN0IGZvbGRlciwgd2hpY2ggY29udGFpbnMgYGFzc2V0c2AsIGBjb250ZW50YCwgYHRlbXBsYXRlc2AgZXRjLlxuICAgICAqIEBzaW5jZSAwLjIuMFxuICAgICAqL1xuICAgIHByaXZhdGUgcHJvamVjdFBhdGg6IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIFRhcmdldCBidWlsZCBwYXRoXG4gICAgICogQHNpbmNlIDAuMi4wXG4gICAgICovXG4gICAgcHJpdmF0ZSBidWlsZFBhdGg6IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEluamVjdGVkIGV2ZW50IGVtaXR0ZXIgcmVmZXJlbmNlXG4gICAgICogQHNpbmNlIDAuMi4wXG4gICAgICovXG4gICAgcHJpdmF0ZSBldmVudEVtaXR0ZXI6IEV2ZW50RW1pdHRlcjtcblxuICAgIC8qKlxuICAgICAqIFByb2plY3RXYXRjaGVyIGNvbnN0cnVjdG9yXG4gICAgICogQHNpbmNlIDAuMi4wXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoY29uZmlnUGF0aDogc3RyaW5nLCBidWlsZFBhdGg6IHN0cmluZywgZXZlbnRFbWl0dGVyOiBFdmVudEVtaXR0ZXIpIHtcbiAgICAgICAgdGhpcy5jb25maWdQYXRoID0gY29uZmlnUGF0aDtcbiAgICAgICAgdGhpcy5wcm9qZWN0UGF0aCA9IHBhdGguZGlybmFtZShjb25maWdQYXRoKTtcbiAgICAgICAgdGhpcy5idWlsZFBhdGggPSBidWlsZFBhdGg7XG4gICAgICAgIHRoaXMuZXZlbnRFbWl0dGVyID0gZXZlbnRFbWl0dGVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHNpbmNlIDAuMi4wXG4gICAgICovXG4gICAgcHVibGljIHdhdGNoKCkge1xuICAgICAgICB0aGlzLnNldHVwRmlsZVdhdGNoZXJzKCk7XG4gICAgICAgIGxldCBhc3NldE1hbmFnZXIgPSBuZXcgQXNzZXRNYW5hZ2VyKFxuICAgICAgICAgICAgcGF0aC5qb2luKHRoaXMucHJvamVjdFBhdGgsICdhc3NldHMnKSxcbiAgICAgICAgICAgIHBhdGguam9pbih0aGlzLmJ1aWxkUGF0aCwgJ2Fzc2V0cycpLFxuICAgICAgICAgICAgdGhpcy5ldmVudEVtaXR0ZXJcbiAgICAgICAgKTtcbiAgICAgICAgYXNzZXRNYW5hZ2VyLnNldHVwTGlzdGVuZXJzKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0dXBcbiAgICAgKiBAc2luY2UgMC4yLjBcbiAgICAgKi9cbiAgICBwcml2YXRlIHNldHVwRmlsZVdhdGNoZXJzKCkge1xuICAgICAgICB0aGlzLnNldHVwRmlsZVdhdGNoZXIoJ2Fzc2V0cycsIFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBmc0V2ZW50OiAnYWRkJyxcbiAgICAgICAgICAgICAgICBibGl0ekV2ZW50OiBBU1NFVF9DSEFOR0VfRVZFTlQsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGZzRXZlbnQ6ICdhZGREaXInLFxuICAgICAgICAgICAgICAgIGJsaXR6RXZlbnQ6IEFTU0VUX0NIQU5HRV9FVkVOVCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgZnNFdmVudDogJ2NoYW5nZScsXG4gICAgICAgICAgICAgICAgYmxpdHpFdmVudDogQVNTRVRfQ0hBTkdFX0VWRU5ULFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBmc0V2ZW50OiAndW5saW5rJyxcbiAgICAgICAgICAgICAgICBibGl0ekV2ZW50OiBBU1NFVF9SRU1PVkVfRVZFTlQsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGZzRXZlbnQ6ICd1bmxpbmtEaXInLFxuICAgICAgICAgICAgICAgIGJsaXR6RXZlbnQ6IEFTU0VUX1JFTU9WRV9FVkVOVCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHVwIHdhdGNoZXJzIGZvciBhIHBhdGggdXNpbmcgYW4gZXZlbnQgcGFpclxuICAgICAqIEBzaW5jZSAwLjIuMFxuICAgICAqL1xuICAgIHByaXZhdGUgc2V0dXBGaWxlV2F0Y2hlcih3YXRjaFBhdGg6IHN0cmluZywgZXZlbnRzOiBJRlNFdmVudFBhaXJbXSkge1xuICAgICAgICBsZXQgZnVsbFBhdGggPSBwYXRoLmpvaW4odGhpcy5wcm9qZWN0UGF0aCwgd2F0Y2hQYXRoKTtcbiAgICAgICAgbGV0IHdhdGNoZXIgPSBjaG9raWRhci53YXRjaChmdWxsUGF0aCk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZXZlbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgZXZlbnQgPSBldmVudHNbaV07XG4gICAgICAgICAgICB3YXRjaGVyLm9uKFxuICAgICAgICAgICAgICAgIGV2ZW50LmZzRXZlbnQsXG4gICAgICAgICAgICAgICAgKGZpbGVQYXRoKSA9PiB0aGlzLmV2ZW50RW1pdHRlci5lbWl0KGV2ZW50LmJsaXR6RXZlbnQsIHBhdGgucmVsYXRpdmUoZnVsbFBhdGgsIGZpbGVQYXRoKSlcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgd2F0Y2hlci5vbignZXJyb3InLCAoZXJyb3I6IGFueSkgPT4ge1xuICAgICAgICAgICAgLy8gV29ya2Fyb3VuZCBmb3IgdGhlIFwiV2luZG93cyByb3VnaCBlZGdlXCIgcmVnYXJkaW5nIHRoZSBkZWxldGlvbiBvZiBkaXJlY3Rvcmllc1xuICAgICAgICAgICAgaWYgKHByb2Nlc3MucGxhdGZvcm0gPT09ICd3aW4zMidcbiAgICAgICAgICAgICAgICAmJiBlcnJvci5jb2RlID09PSAnRVBFUk0nXG4gICAgICAgICAgICAgICAgJiYgZXJyb3IuZmlsZW5hbWUgPT09IG51bGwpIHsgLy8gdHNsaW50OmRpc2FibGUtbGluZTpuby1udWxsLWtleXdvcmRcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZXJyb3I7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbiJdfQ==
