"use strict";
var chai_1 = require("chai");
var StringHelper_1 = require("../../../src/helpers/StringHelper");
describe('StringHelper', function () {
    describe('#isString()', function () {
        it('correctly identifies strings', function () {
            chai_1.assert.isTrue(StringHelper_1.StringHelper.isString(''));
            chai_1.assert.isTrue(StringHelper_1.StringHelper.isString('hello'));
        });
        it('correctly identifies non-string objects', function () {
            chai_1.assert.isFalse(StringHelper_1.StringHelper.isString(null));
            chai_1.assert.isFalse(StringHelper_1.StringHelper.isString(undefined));
            chai_1.assert.isFalse(StringHelper_1.StringHelper.isString({}));
            chai_1.assert.isFalse(StringHelper_1.StringHelper.isString([]));
        });
    });
    describe('#isString()', function () {
        it('generates strings of the right length', function () {
            chai_1.assert.equal(StringHelper_1.StringHelper.random(5).length, 5);
            chai_1.assert.equal(StringHelper_1.StringHelper.random(10).length, 10);
            chai_1.assert.equal(StringHelper_1.StringHelper.random(15).length, 15);
        });
        it('generates different strings', function () {
            var first = StringHelper_1.StringHelper.random(8);
            var second = StringHelper_1.StringHelper.random(8);
            var third = StringHelper_1.StringHelper.random(8);
            chai_1.assert.notEqual(first, second);
            chai_1.assert.notEqual(first, third);
            chai_1.assert.notEqual(second, third);
        });
    });
    describe('#stringify()', function () {
        it('leaves string untouched', function () {
            chai_1.assert.equal(StringHelper_1.StringHelper.stringify(''), '');
            chai_1.assert.equal(StringHelper_1.StringHelper.stringify('hello'), 'hello');
        });
        it('converts non-string objects to their JSON representation', function () {
            chai_1.assert.equal(StringHelper_1.StringHelper.stringify(null), JSON.stringify(null));
            chai_1.assert.equal(StringHelper_1.StringHelper.stringify({}), JSON.stringify({}));
            chai_1.assert.equal(StringHelper_1.StringHelper.stringify(['hello']), JSON.stringify(['hello']));
        });
    });
    describe('#isEmpty()', function () {
        it('correctly identifies empty strings', function () {
            chai_1.assert.isTrue(StringHelper_1.StringHelper.isEmpty(null));
            chai_1.assert.isTrue(StringHelper_1.StringHelper.isEmpty(undefined));
            chai_1.assert.isTrue(StringHelper_1.StringHelper.isEmpty(''));
        });
        it('correctly identifies non-empty strings', function () {
            chai_1.assert.isFalse(StringHelper_1.StringHelper.isEmpty('hello'));
        });
    });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3Rlc3QvdW5pdC9oZWxwZXJzL1N0cmluZ0hlbHBlclRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQVFBLDZCQUE0QjtBQUM1QixrRUFBK0Q7QUFFL0QsUUFBUSxDQUFDLGNBQWMsRUFBRTtJQUNyQixRQUFRLENBQUMsYUFBYSxFQUFFO1FBQ3BCLEVBQUUsQ0FBQyw4QkFBOEIsRUFBRTtZQUMvQixhQUFNLENBQUMsTUFBTSxDQUFDLDJCQUFZLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDekMsYUFBTSxDQUFDLE1BQU0sQ0FBQywyQkFBWSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBQ2xELENBQUMsQ0FBQyxDQUFDO1FBQ0gsRUFBRSxDQUFDLHlDQUF5QyxFQUFFO1lBQzFDLGFBQU0sQ0FBQyxPQUFPLENBQUMsMkJBQVksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUM1QyxhQUFNLENBQUMsT0FBTyxDQUFDLDJCQUFZLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7WUFDakQsYUFBTSxDQUFDLE9BQU8sQ0FBQywyQkFBWSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQzFDLGFBQU0sQ0FBQyxPQUFPLENBQUMsMkJBQVksQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUM5QyxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUMsQ0FBQyxDQUFDO0lBQ0gsUUFBUSxDQUFDLGFBQWEsRUFBRTtRQUNwQixFQUFFLENBQUMsdUNBQXVDLEVBQUU7WUFDeEMsYUFBTSxDQUFDLEtBQUssQ0FBQywyQkFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDL0MsYUFBTSxDQUFDLEtBQUssQ0FBQywyQkFBWSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFDakQsYUFBTSxDQUFDLEtBQUssQ0FBQywyQkFBWSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDckQsQ0FBQyxDQUFDLENBQUM7UUFDSCxFQUFFLENBQUMsNkJBQTZCLEVBQUU7WUFDOUIsSUFBSSxLQUFLLEdBQUcsMkJBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDbkMsSUFBSSxNQUFNLEdBQUcsMkJBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDcEMsSUFBSSxLQUFLLEdBQUcsMkJBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDbkMsYUFBTSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUM7WUFDL0IsYUFBTSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7WUFDOUIsYUFBTSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDbkMsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDLENBQUMsQ0FBQztJQUNILFFBQVEsQ0FBQyxjQUFjLEVBQUU7UUFDckIsRUFBRSxDQUFDLHlCQUF5QixFQUFFO1lBQzFCLGFBQU0sQ0FBQyxLQUFLLENBQUMsMkJBQVksQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFDN0MsYUFBTSxDQUFDLEtBQUssQ0FBQywyQkFBWSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUMzRCxDQUFDLENBQUMsQ0FBQztRQUNILEVBQUUsQ0FBQywwREFBMEQsRUFBRTtZQUMzRCxhQUFNLENBQUMsS0FBSyxDQUFDLDJCQUFZLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUNqRSxhQUFNLENBQUMsS0FBSyxDQUFDLDJCQUFZLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUM3RCxhQUFNLENBQUMsS0FBSyxDQUFDLDJCQUFZLENBQUMsU0FBUyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQy9FLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQyxDQUFDLENBQUM7SUFDSCxRQUFRLENBQUMsWUFBWSxFQUFFO1FBQ25CLEVBQUUsQ0FBQyxvQ0FBb0MsRUFBRTtZQUNyQyxhQUFNLENBQUMsTUFBTSxDQUFDLDJCQUFZLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDMUMsYUFBTSxDQUFDLE1BQU0sQ0FBQywyQkFBWSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO1lBQy9DLGFBQU0sQ0FBQyxNQUFNLENBQUMsMkJBQVksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUM1QyxDQUFDLENBQUMsQ0FBQztRQUNILEVBQUUsQ0FBQyx3Q0FBd0MsRUFBRTtZQUN6QyxhQUFNLENBQUMsT0FBTyxDQUFDLDJCQUFZLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7UUFDbEQsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDLENBQUMsQ0FBQztBQUNQLENBQUMsQ0FBQyxDQUFDIiwiZmlsZSI6InRlc3QvdW5pdC9oZWxwZXJzL1N0cmluZ0hlbHBlclRlc3QuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlIFN0cmluZ0hlbHBlciB0ZXN0c1xuICogQGF1dGhvciBUaW11ciBLdXpoYWdhbGl5ZXYgPHRpbS5rdXpoQGdtYWlsLmNvbT5cbiAqIEBjb3B5cmlnaHQgMjAxNlxuICogQGxpY2Vuc2UgR1BMLTMuMFxuICogQHNpbmNlIDAuMC4xXG4gKi9cblxuaW1wb3J0IHthc3NlcnR9IGZyb20gJ2NoYWknO1xuaW1wb3J0IHtTdHJpbmdIZWxwZXJ9IGZyb20gJy4uLy4uLy4uL3NyYy9oZWxwZXJzL1N0cmluZ0hlbHBlcic7XG5cbmRlc2NyaWJlKCdTdHJpbmdIZWxwZXInLCAoKSA9PiB7XG4gICAgZGVzY3JpYmUoJyNpc1N0cmluZygpJywgKCkgPT4ge1xuICAgICAgICBpdCgnY29ycmVjdGx5IGlkZW50aWZpZXMgc3RyaW5ncycsICgpID0+IHtcbiAgICAgICAgICAgIGFzc2VydC5pc1RydWUoU3RyaW5nSGVscGVyLmlzU3RyaW5nKCcnKSk7XG4gICAgICAgICAgICBhc3NlcnQuaXNUcnVlKFN0cmluZ0hlbHBlci5pc1N0cmluZygnaGVsbG8nKSk7XG4gICAgICAgIH0pO1xuICAgICAgICBpdCgnY29ycmVjdGx5IGlkZW50aWZpZXMgbm9uLXN0cmluZyBvYmplY3RzJywgKCkgPT4ge1xuICAgICAgICAgICAgYXNzZXJ0LmlzRmFsc2UoU3RyaW5nSGVscGVyLmlzU3RyaW5nKG51bGwpKTsgLy8gdHNsaW50OmRpc2FibGUtbGluZTpuby1udWxsLWtleXdvcmRcbiAgICAgICAgICAgIGFzc2VydC5pc0ZhbHNlKFN0cmluZ0hlbHBlci5pc1N0cmluZyh1bmRlZmluZWQpKTtcbiAgICAgICAgICAgIGFzc2VydC5pc0ZhbHNlKFN0cmluZ0hlbHBlci5pc1N0cmluZyh7fSkpO1xuICAgICAgICAgICAgYXNzZXJ0LmlzRmFsc2UoU3RyaW5nSGVscGVyLmlzU3RyaW5nKFtdKSk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuICAgIGRlc2NyaWJlKCcjaXNTdHJpbmcoKScsICgpID0+IHtcbiAgICAgICAgaXQoJ2dlbmVyYXRlcyBzdHJpbmdzIG9mIHRoZSByaWdodCBsZW5ndGgnLCAoKSA9PiB7XG4gICAgICAgICAgICBhc3NlcnQuZXF1YWwoU3RyaW5nSGVscGVyLnJhbmRvbSg1KS5sZW5ndGgsIDUpO1xuICAgICAgICAgICAgYXNzZXJ0LmVxdWFsKFN0cmluZ0hlbHBlci5yYW5kb20oMTApLmxlbmd0aCwgMTApO1xuICAgICAgICAgICAgYXNzZXJ0LmVxdWFsKFN0cmluZ0hlbHBlci5yYW5kb20oMTUpLmxlbmd0aCwgMTUpO1xuICAgICAgICB9KTtcbiAgICAgICAgaXQoJ2dlbmVyYXRlcyBkaWZmZXJlbnQgc3RyaW5ncycsICgpID0+IHtcbiAgICAgICAgICAgIGxldCBmaXJzdCA9IFN0cmluZ0hlbHBlci5yYW5kb20oOCk7XG4gICAgICAgICAgICBsZXQgc2Vjb25kID0gU3RyaW5nSGVscGVyLnJhbmRvbSg4KTtcbiAgICAgICAgICAgIGxldCB0aGlyZCA9IFN0cmluZ0hlbHBlci5yYW5kb20oOCk7XG4gICAgICAgICAgICBhc3NlcnQubm90RXF1YWwoZmlyc3QsIHNlY29uZCk7XG4gICAgICAgICAgICBhc3NlcnQubm90RXF1YWwoZmlyc3QsIHRoaXJkKTtcbiAgICAgICAgICAgIGFzc2VydC5ub3RFcXVhbChzZWNvbmQsIHRoaXJkKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG4gICAgZGVzY3JpYmUoJyNzdHJpbmdpZnkoKScsICgpID0+IHtcbiAgICAgICAgaXQoJ2xlYXZlcyBzdHJpbmcgdW50b3VjaGVkJywgKCkgPT4ge1xuICAgICAgICAgICAgYXNzZXJ0LmVxdWFsKFN0cmluZ0hlbHBlci5zdHJpbmdpZnkoJycpLCAnJyk7XG4gICAgICAgICAgICBhc3NlcnQuZXF1YWwoU3RyaW5nSGVscGVyLnN0cmluZ2lmeSgnaGVsbG8nKSwgJ2hlbGxvJyk7XG4gICAgICAgIH0pO1xuICAgICAgICBpdCgnY29udmVydHMgbm9uLXN0cmluZyBvYmplY3RzIHRvIHRoZWlyIEpTT04gcmVwcmVzZW50YXRpb24nLCAoKSA9PiB7XG4gICAgICAgICAgICBhc3NlcnQuZXF1YWwoU3RyaW5nSGVscGVyLnN0cmluZ2lmeShudWxsKSwgSlNPTi5zdHJpbmdpZnkobnVsbCkpOyAvLyB0c2xpbnQ6ZGlzYWJsZS1saW5lOm5vLW51bGwta2V5d29yZFxuICAgICAgICAgICAgYXNzZXJ0LmVxdWFsKFN0cmluZ0hlbHBlci5zdHJpbmdpZnkoe30pLCBKU09OLnN0cmluZ2lmeSh7fSkpO1xuICAgICAgICAgICAgYXNzZXJ0LmVxdWFsKFN0cmluZ0hlbHBlci5zdHJpbmdpZnkoWydoZWxsbyddKSwgSlNPTi5zdHJpbmdpZnkoWydoZWxsbyddKSk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuICAgIGRlc2NyaWJlKCcjaXNFbXB0eSgpJywgKCkgPT4ge1xuICAgICAgICBpdCgnY29ycmVjdGx5IGlkZW50aWZpZXMgZW1wdHkgc3RyaW5ncycsICgpID0+IHtcbiAgICAgICAgICAgIGFzc2VydC5pc1RydWUoU3RyaW5nSGVscGVyLmlzRW1wdHkobnVsbCkpOyAvLyB0c2xpbnQ6ZGlzYWJsZS1saW5lOm5vLW51bGwta2V5d29yZFxuICAgICAgICAgICAgYXNzZXJ0LmlzVHJ1ZShTdHJpbmdIZWxwZXIuaXNFbXB0eSh1bmRlZmluZWQpKTtcbiAgICAgICAgICAgIGFzc2VydC5pc1RydWUoU3RyaW5nSGVscGVyLmlzRW1wdHkoJycpKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGl0KCdjb3JyZWN0bHkgaWRlbnRpZmllcyBub24tZW1wdHkgc3RyaW5ncycsICgpID0+IHtcbiAgICAgICAgICAgIGFzc2VydC5pc0ZhbHNlKFN0cmluZ0hlbHBlci5pc0VtcHR5KCdoZWxsbycpKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG59KTtcbiJdfQ==
