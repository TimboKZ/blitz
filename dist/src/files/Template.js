"use strict";
var pug = require('pug');
var objectAssign = require('object-assign');
var Template = (function () {
    function Template() {
    }
    Template.prototype.prepare = function (templateString, locals, menus) {
        this.ids = [];
        this.assets = [];
        this.menus = [];
        this.compiledTemplate = pug.compile(templateString);
        if (locals && menus) {
            this.extractIdsAndAssets(objectAssign({}, locals, { menus: menus }));
            this.extractMenus(locals, menus);
        }
    };
    Template.prototype.extractIdsAndAssets = function (locals) {
        var extraLocals = {
            url: this.mockGenerator(this.ids),
            asset: this.mockGenerator(this.assets),
        };
        this.compiledTemplate(objectAssign({}, locals, extraLocals));
    };
    Template.prototype.extractMenus = function (locals, menus) {
        for (var menu in menus) {
            if (menus.hasOwnProperty(menu)) {
                var cutMenus = objectAssign({}, menus);
                cutMenus[menu] = undefined;
                try {
                    this.compiledTemplate(objectAssign({}, locals, { menus: cutMenus }));
                }
                catch (exception) {
                    this.menus.push(menu);
                }
            }
        }
    };
    Template.prototype.mockGenerator = function (logArray) {
        return function (value) {
            if (value) {
                logArray.push(value);
            }
            return './some/path';
        };
    };
    Template.prototype.generate = function (locals) {
        if (this.compiledTemplate() === undefined) {
            throw new Error('Cannot generate a page from template with nothing prepared!');
        }
        return this.compiledTemplate(locals);
    };
    Template.prototype.getIds = function () {
        return this.ids;
    };
    Template.prototype.getAssets = function () {
        return this.assets;
    };
    Template.prototype.getMenus = function () {
        return this.menus;
    };
    return Template;
}());
exports.Template = Template;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9maWxlcy9UZW1wbGF0ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBUUEsSUFBWSxHQUFHLFdBQU0sS0FBSyxDQUFDLENBQUE7QUFDM0IsSUFBWSxZQUFZLFdBQU0sZUFBZSxDQUFDLENBQUE7QUFROUM7SUFBQTtJQXlHQSxDQUFDO0lBdEZVLDBCQUFPLEdBQWQsVUFBZSxjQUFzQixFQUFFLE1BQVksRUFBRSxLQUFvQjtRQUNyRSxJQUFJLENBQUMsR0FBRyxHQUFHLEVBQUUsQ0FBQztRQUNkLElBQUksQ0FBQyxNQUFNLEdBQUcsRUFBRSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDO1FBRWhCLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxHQUFHLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBQ3BELEVBQUUsQ0FBQyxDQUFDLE1BQU0sSUFBSSxLQUFLLENBQUMsQ0FBQyxDQUFDO1lBQ2xCLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxZQUFZLENBQUMsRUFBRSxFQUFFLE1BQU0sRUFBRSxFQUFDLFlBQUssRUFBQyxDQUFDLENBQUMsQ0FBQztZQUM1RCxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsQ0FBQztRQUNyQyxDQUFDO0lBQ0wsQ0FBQztJQU1PLHNDQUFtQixHQUEzQixVQUE0QixNQUFXO1FBQ25DLElBQUksV0FBVyxHQUFHO1lBQ2QsR0FBRyxFQUFFLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQztZQUNqQyxLQUFLLEVBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDO1NBQ3pDLENBQUM7UUFDRixJQUFJLENBQUMsZ0JBQWdCLENBQUMsWUFBWSxDQUFDLEVBQUUsRUFBRSxNQUFNLEVBQUUsV0FBVyxDQUFDLENBQUMsQ0FBQztJQUNqRSxDQUFDO0lBTU8sK0JBQVksR0FBcEIsVUFBcUIsTUFBVyxFQUFFLEtBQW1CO1FBQ2pELEdBQUcsQ0FBQyxDQUFDLElBQUksSUFBSSxJQUFJLEtBQUssQ0FBQyxDQUFDLENBQUM7WUFDckIsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQzdCLElBQUksUUFBUSxHQUFHLFlBQVksQ0FBQyxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUM7Z0JBQ3ZDLFFBQVEsQ0FBQyxJQUFJLENBQUMsR0FBRyxTQUFTLENBQUM7Z0JBQzNCLElBQUksQ0FBQztvQkFDRCxJQUFJLENBQUMsZ0JBQWdCLENBQUMsWUFBWSxDQUFDLEVBQUUsRUFBRSxNQUFNLEVBQUUsRUFBQyxLQUFLLEVBQUUsUUFBUSxFQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUN2RSxDQUFFO2dCQUFBLEtBQUssQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7b0JBQ2pCLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUMxQixDQUFDO1lBQ0wsQ0FBQztRQUNMLENBQUM7SUFDTCxDQUFDO0lBTU8sZ0NBQWEsR0FBckIsVUFBc0IsUUFBa0I7UUFDcEMsTUFBTSxDQUFDLFVBQUMsS0FBYztZQUNsQixFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO2dCQUNSLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDekIsQ0FBQztZQUNELE1BQU0sQ0FBQyxhQUFhLENBQUM7UUFDekIsQ0FBQyxDQUFDO0lBQ04sQ0FBQztJQU1NLDJCQUFRLEdBQWYsVUFBZ0IsTUFBWTtRQUN4QixFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDO1lBQ3hDLE1BQU0sSUFBSSxLQUFLLENBQUMsNkRBQTZELENBQUMsQ0FBQztRQUNuRixDQUFDO1FBQ0QsTUFBTSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUN6QyxDQUFDO0lBS00seUJBQU0sR0FBYjtRQUNJLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDO0lBQ3BCLENBQUM7SUFLTSw0QkFBUyxHQUFoQjtRQUNJLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3ZCLENBQUM7SUFLTSwyQkFBUSxHQUFmO1FBQ0ksTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7SUFDdEIsQ0FBQztJQUNMLGVBQUM7QUFBRCxDQXpHQSxBQXlHQyxJQUFBO0FBekdZLGdCQUFRLFdBeUdwQixDQUFBIiwiZmlsZSI6InNyYy9maWxlcy9UZW1wbGF0ZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGUgQWxsIGNvZGUgcmVsYXRlZCB0byB0aGUgcmVwcmVzZXRudGF0aW9uIG9mIGEgdGVtcGxhdGUgZmlsZVxuICogQGF1dGhvciBUaW11ciBLdXpoYWdhbGl5ZXYgPHRpbS5rdXpoQGdtYWlsLmNvbT5cbiAqIEBjb3B5cmlnaHQgMjAxNlxuICogQGxpY2Vuc2UgR1BMLTMuMFxuICogQHNpbmNlIDAuMi4wXG4gKi9cblxuaW1wb3J0ICogYXMgcHVnIGZyb20gJ3B1Zyc7XG5pbXBvcnQgKiBhcyBvYmplY3RBc3NpZ24gZnJvbSAnb2JqZWN0LWFzc2lnbic7XG5pbXBvcnQge0lTaXRlTWVudU1hcH0gZnJvbSAnLi4vTWVudSc7XG5cbi8qKlxuICogQGNsYXNzIFdyYXBwZXIgYXJvdW5kIGEgc3BlY2lmaWMgdGVtcGxhdGluZyBlbmdpbmUsIGN1cnJlbnRseSBvbmx5IFB1Z1xuICogQHNpbmNlIDAuMi4wXG4gKlxuICovXG5leHBvcnQgY2xhc3MgVGVtcGxhdGUge1xuICAgIC8qKlxuICAgICAqIENvbXBpbGVkIFB1ZyB0ZW1wbGF0ZVxuICAgICAqIEBzaW5jZSAwLjIuMFxuICAgICAqL1xuICAgIHByaXZhdGUgY29tcGlsZWRUZW1wbGF0ZTogKGxvY2Fscz86IGFueSkgPT4gc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQXJyYXlzIG9mIElEcywgYXNzZXRzIGFuZCBtZW51cyByZWZlcmVuY2VkIGluIHRoZSB0ZW1wbGF0ZVxuICAgICAqIEBzaW5jZSAwLjIuMFxuICAgICAqL1xuICAgIHByaXZhdGUgaWRzOiBzdHJpbmdbXTtcbiAgICBwcml2YXRlIGFzc2V0czogc3RyaW5nW107XG4gICAgcHJpdmF0ZSBtZW51czogc3RyaW5nW107XG5cbiAgICAvKipcbiAgICAgKiBFeHRyYWN0cyBsaXN0IG9mIHJlZmVyZW5jZWQgSURzLCBhc3NldHMgYW5kIG1lbnVzIGZyb20gdGhlIHRlbXBsYXRlIGFmdGVyIGNvbXBpbGluZyBpdFxuICAgICAqIEBzaW5jZSAwLjIuMFxuICAgICAqL1xuICAgIHB1YmxpYyBwcmVwYXJlKHRlbXBsYXRlU3RyaW5nOiBzdHJpbmcsIGxvY2Fscz86IGFueSwgbWVudXM/OiBJU2l0ZU1lbnVNYXApIHtcbiAgICAgICAgdGhpcy5pZHMgPSBbXTtcbiAgICAgICAgdGhpcy5hc3NldHMgPSBbXTtcbiAgICAgICAgdGhpcy5tZW51cyA9IFtdO1xuXG4gICAgICAgIHRoaXMuY29tcGlsZWRUZW1wbGF0ZSA9IHB1Zy5jb21waWxlKHRlbXBsYXRlU3RyaW5nKTtcbiAgICAgICAgaWYgKGxvY2FscyAmJiBtZW51cykge1xuICAgICAgICAgICAgdGhpcy5leHRyYWN0SWRzQW5kQXNzZXRzKG9iamVjdEFzc2lnbih7fSwgbG9jYWxzLCB7bWVudXN9KSk7XG4gICAgICAgICAgICB0aGlzLmV4dHJhY3RNZW51cyhsb2NhbHMsIG1lbnVzKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEV4dHJhY3QgSURzIGFuZCBhc3NldHMgZnJvbSBhIGNvbXBpbGVkIHRlbXBsYXRlIHVzaW5nIG1vY2sgZ2VuZXJhdG9yc1xuICAgICAqIEBzaW5jZSAwLjIuMFxuICAgICAqL1xuICAgIHByaXZhdGUgZXh0cmFjdElkc0FuZEFzc2V0cyhsb2NhbHM6IGFueSkge1xuICAgICAgICBsZXQgZXh0cmFMb2NhbHMgPSB7XG4gICAgICAgICAgICB1cmw6IHRoaXMubW9ja0dlbmVyYXRvcih0aGlzLmlkcyksXG4gICAgICAgICAgICBhc3NldDogdGhpcy5tb2NrR2VuZXJhdG9yKHRoaXMuYXNzZXRzKSxcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5jb21waWxlZFRlbXBsYXRlKG9iamVjdEFzc2lnbih7fSwgbG9jYWxzLCBleHRyYUxvY2FscykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEV4dHJhY3RzIG1lbnVzIHJlZmVyZW5jZWQgaW4gdGhlIGNvbXBpbGVkIHRlbXBsYXRlXG4gICAgICogQHNpbmNlIDAuMi4wXG4gICAgICovXG4gICAgcHJpdmF0ZSBleHRyYWN0TWVudXMobG9jYWxzOiBhbnksIG1lbnVzOiBJU2l0ZU1lbnVNYXApIHtcbiAgICAgICAgZm9yIChsZXQgbWVudSBpbiBtZW51cykge1xuICAgICAgICAgICAgaWYgKG1lbnVzLmhhc093blByb3BlcnR5KG1lbnUpKSB7XG4gICAgICAgICAgICAgICAgbGV0IGN1dE1lbnVzID0gb2JqZWN0QXNzaWduKHt9LCBtZW51cyk7XG4gICAgICAgICAgICAgICAgY3V0TWVudXNbbWVudV0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb21waWxlZFRlbXBsYXRlKG9iamVjdEFzc2lnbih7fSwgbG9jYWxzLCB7bWVudXM6IGN1dE1lbnVzfSkpO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGV4Y2VwdGlvbikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm1lbnVzLnB1c2gobWVudSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIG1vY2sgc3RyaW5nIGdlbmVyYXRvciB0aGF0IGxvZ3MgY2FsbCBwYXJhbWV0ZXJzIGludG8gYW4gYXJyYXlcbiAgICAgKiBAc2luY2UgMC4yLjBcbiAgICAgKi9cbiAgICBwcml2YXRlIG1vY2tHZW5lcmF0b3IobG9nQXJyYXk6IHN0cmluZ1tdKTogKHZhbHVlPzogc3RyaW5nKSA9PiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gKHZhbHVlPzogc3RyaW5nKSA9PiB7XG4gICAgICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICBsb2dBcnJheS5wdXNoKHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAnLi9zb21lL3BhdGgnO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdlbmVyYXRlcyBhIEhUTUwgcGFnZSBmcm9tIHRoZSB0ZW1wbGF0ZVxuICAgICAqIEBzaW5jZSAwLjIuMFxuICAgICAqL1xuICAgIHB1YmxpYyBnZW5lcmF0ZShsb2NhbHM/OiBhbnkpOiBzdHJpbmcge1xuICAgICAgICBpZiAodGhpcy5jb21waWxlZFRlbXBsYXRlKCkgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgZ2VuZXJhdGUgYSBwYWdlIGZyb20gdGVtcGxhdGUgd2l0aCBub3RoaW5nIHByZXBhcmVkIScpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmNvbXBpbGVkVGVtcGxhdGUobG9jYWxzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAc2luY2UgMC4yLjBcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0SWRzKCk6IHN0cmluZ1tdIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaWRzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBzaW5jZSAwLjIuMFxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRBc3NldHMoKTogc3RyaW5nW10ge1xuICAgICAgICByZXR1cm4gdGhpcy5hc3NldHM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHNpbmNlIDAuMi4wXG4gICAgICovXG4gICAgcHVibGljIGdldE1lbnVzKCk6IHN0cmluZ1tdIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWVudXM7XG4gICAgfVxufVxuIl19
