"use strict";
var chai_1 = require('chai');
var fs = require('fs-extra');
var path = require('path');
var child_process_1 = require('child_process');
var Util_1 = require('../../src/helpers/Util');
describe('Blitz project initialiser', function () {
    var basePath = process.cwd();
    var blitzCli = 'node ' + path.join(basePath, 'blitz-cli');
    var templatesPath = path.join(basePath, 'templates');
    var tempPath = path.join(basePath, 'temp');
    if (Util_1.Util.pathExists(tempPath)) {
        fs.removeSync(tempPath);
    }
    child_process_1.execSync('mkdir temp');
    var templateNames = fs.readdirSync(templatesPath);
    var nameCount = templateNames.length;
    var templatesTestInfo = [];
    var templateTestCount = 0;
    it('should not copy the `build` folder on init', function (done) {
        for (var i = 0; i < nameCount; i++) {
            var templateName = templateNames[i];
            child_process_1.execSync('mkdir ' + templateName, { cwd: tempPath });
            var projectPath = path.join(tempPath, templateName);
            child_process_1.execSync(blitzCli + ' init -t ' + templateName, { cwd: projectPath });
            templatesTestInfo.push({
                name: templateName,
                projectPath: projectPath,
                projectBuild: path.join(projectPath, 'build'),
                templatePath: path.join(templatesPath, templateName),
                templateBuild: path.join(templatesPath, templateName, 'build'),
            });
        }
        templateTestCount = templatesTestInfo.length;
        for (var i = 0; i < templateTestCount; i++) {
            var templateTestInfo = templatesTestInfo[i];
            chai_1.assert.isFalse(Util_1.Util.pathExists(templateTestInfo.projectBuild), templateTestInfo.name + ' template');
        }
        done();
    }).timeout(6000);
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
