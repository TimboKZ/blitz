"use strict";
var nomnom = require('nomnom');
var path = require('path');
var ProjectInitialiser_1 = require('./ProjectInitialiser');
var Logger_1 = require('./Logger');
var Blitz_1 = require('./Blitz');
var Config_1 = require('./Config');
var SiteGenerator_1 = require('./SiteGenerator');
var Util_1 = require('./Util');
exports.CLI_NAME = 'blitz';
var CLI = (function () {
    function CLI() {
    }
    CLI.run = function (argv) {
        var parser = nomnom();
        global.debug = false;
        global.verbose = false;
        parser.script(exports.CLI_NAME);
        parser.printer(function (message) {
            var strings = Logger_1.Logger.split(message);
            var verboseState = global.verbose;
            if (strings[0].substr(0, 5) === 'Usage' || strings[0].substr(0, 5) === 'blitz') {
                global.verbose = true;
            }
            for (var i = 0; i < strings.length; i++) {
                if (strings[i].match(/^command/)) {
                    strings[i] = 'Commands:';
                }
            }
            Logger_1.Logger.logMany(strings);
            global.verbose = verboseState;
        });
        parser.nocommand().callback(function () { return CLI.version(); });
        parser.option('verbose', {
            abbr: 'v',
            flag: true,
            help: 'displays warnings and log output',
            callback: function (flagSet) { return global.verbose = flagSet; },
        });
        parser.option('debug', {
            abbr: 'd',
            flag: true,
            help: 'displays debug output',
            callback: function (flagSet) { return global.debug = flagSet; },
        });
        parser.command('init')
            .option('template', {
            abbr: 't',
            default: ProjectInitialiser_1.DEFAULT_TEMPLATE,
            help: 'template name',
        })
            .option('path', {
            abbr: 'p',
            default: process.cwd(),
            help: 'path to project folder',
        })
            .help('initialise a project from template')
            .callback(function (opts) { return Blitz_1.Blitz.init(opts.template, opts.path); });
        parser.command('build')
            .option('config', {
            abbr: 'c',
            default: path.join(process.cwd(), Config_1.DEFAULT_CONFIG_NAME),
            help: 'path to Blitz config',
        })
            .option('build', {
            abbr: 'b',
            default: path.join(process.cwd(), SiteGenerator_1.DEFAULT_BUILD_DIRECTORY_NAME),
            help: 'path to target build directory',
        })
            .help('builds site using `blitz.yml`')
            .callback(function (opts) { return Blitz_1.Blitz.build(opts.config, opts.build); });
        parser.command('watch')
            .option('config', {
            abbr: 'c',
            default: path.join(process.cwd(), Config_1.DEFAULT_CONFIG_NAME),
            help: 'path to Blitz config',
        })
            .option('build', {
            abbr: 'b',
            default: path.join(process.cwd(), SiteGenerator_1.DEFAULT_BUILD_DIRECTORY_NAME),
            help: 'path to target build directory',
        })
            .help('watches source code and rebuilds the website when necessary')
            .callback(function (opts) { return Blitz_1.Blitz.watch(opts.config, opts.build); });
        parser.command('preview')
            .help('starts a web server for real-time change preview')
            .callback(function () { return Blitz_1.Blitz.preview(); });
        var normalisedArgv = argv.slice(2);
        exports.args = parser.parse(normalisedArgv);
    };
    CLI.version = function () {
        var verboseState = global.verbose;
        global.verbose = true;
        Logger_1.Logger.log('Blitz v' + Util_1.Util.getPackageInfo().version + ', use `' + Logger_1.Logger.brand('blitz -h') + '` for help');
        Logger_1.Logger.log('For documentation, refer to ' + Logger_1.Logger.brand('https://getblitz.io/'));
        global.verbose = verboseState;
    };
    return CLI;
}());
exports.CLI = CLI;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
