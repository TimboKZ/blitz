"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var fm = require('front-matter');
var deepEqual = require('deep-equal');
var deepDiff = require('deep-diff');
var Logger_1 = require('../Logger');
var GenericFile_1 = require('./GenericFile');
var Content_1 = require('./Content');
var ContentFile = (function (_super) {
    __extends(ContentFile, _super);
    function ContentFile(rootPath, relativePath, name) {
        _super.call(this, rootPath, relativePath, name);
        this.attributes = {};
        this.content = new Content_1.Content();
    }
    ContentFile.prototype.reload = function () {
        var changes = {};
        var tempContents = this.contents;
        this.read();
        if (tempContents === this.contents) {
            return changes;
        }
        var contentsObject = fm(this.contents);
        if (!deepEqual(this.attributes, contentsObject.attributes)) {
            changes.attributes = deepDiff.diff(this.attributes, contentsObject.attributes);
            this.attributes = contentsObject.attributes;
        }
        if (this.rawContent !== contentsObject.body) {
            this.rawContent = contentsObject.body;
            this.content.prepare(this.rawContent);
            changes.content = {};
            changes.content.ids = this.content.getIds();
            changes.content.assets = this.content.getAssets();
            changes.content.generator = this.content.generate;
        }
        return changes;
    };
    ContentFile.prototype.write = function () {
        throw new Error('Attempted to write to a content file `' + Logger_1.Logger.brand(this.name) + '`. This is not allowed!');
    };
    ContentFile.prototype.getAttributes = function () {
        return this.attributes;
    };
    ContentFile.prototype.getContent = function () {
        return this.content;
    };
    return ContentFile;
}(GenericFile_1.GenericFile));
exports.ContentFile = ContentFile;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9maWxlcy9Db250ZW50RmlsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFRQSxJQUFZLEVBQUUsV0FBTSxjQUFjLENBQUMsQ0FBQTtBQUNuQyxJQUFZLFNBQVMsV0FBTSxZQUFZLENBQUMsQ0FBQTtBQUN4QyxJQUFZLFFBQVEsV0FBTSxXQUFXLENBQUMsQ0FBQTtBQUN0Qyx1QkFBcUIsV0FBVyxDQUFDLENBQUE7QUFDakMsNEJBQXVDLGVBQWUsQ0FBQyxDQUFBO0FBQ3ZELHdCQUFzQixXQUFXLENBQUMsQ0FBQTtBQStCbEM7SUFBaUMsK0JBQVc7SUF1QnhDLHFCQUFtQixRQUFnQixFQUFFLFlBQXNCLEVBQUUsSUFBWTtRQUNyRSxrQkFBTSxRQUFRLEVBQUUsWUFBWSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ3BDLElBQUksQ0FBQyxVQUFVLEdBQUcsRUFBRSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxpQkFBTyxFQUFFLENBQUM7SUFDakMsQ0FBQztJQU1NLDRCQUFNLEdBQWI7UUFDSSxJQUFJLE9BQU8sR0FBUSxFQUFFLENBQUM7UUFDdEIsSUFBSSxZQUFZLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztRQUNqQyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDWixFQUFFLENBQUMsQ0FBQyxZQUFZLEtBQUssSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFDakMsTUFBTSxDQUFDLE9BQU8sQ0FBQztRQUNuQixDQUFDO1FBQ0QsSUFBSSxjQUFjLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUN2QyxFQUFFLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLGNBQWMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDekQsT0FBTyxDQUFDLFVBQVUsR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsY0FBYyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBQy9FLElBQUksQ0FBQyxVQUFVLEdBQUcsY0FBYyxDQUFDLFVBQVUsQ0FBQztRQUNoRCxDQUFDO1FBQ0QsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsS0FBSyxjQUFjLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUMxQyxJQUFJLENBQUMsVUFBVSxHQUFHLGNBQWMsQ0FBQyxJQUFJLENBQUM7WUFDdEMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBQ3RDLE9BQU8sQ0FBQyxPQUFPLEdBQUcsRUFBRSxDQUFDO1lBQ3JCLE9BQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLENBQUM7WUFDNUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEVBQUUsQ0FBQztZQUNsRCxPQUFPLENBQUMsT0FBTyxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQztRQUN0RCxDQUFDO1FBQ0QsTUFBTSxDQUFDLE9BQThCLENBQUM7SUFDMUMsQ0FBQztJQU1NLDJCQUFLLEdBQVo7UUFDSSxNQUFNLElBQUksS0FBSyxDQUFDLHdDQUF3QyxHQUFHLGVBQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLHlCQUF5QixDQUFDLENBQUM7SUFDcEgsQ0FBQztJQUtNLG1DQUFhLEdBQXBCO1FBQ0ksTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUM7SUFDM0IsQ0FBQztJQUtNLGdDQUFVLEdBQWpCO1FBQ0ksTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7SUFDeEIsQ0FBQztJQUNMLGtCQUFDO0FBQUQsQ0E3RUEsQUE2RUMsQ0E3RWdDLHlCQUFXLEdBNkUzQztBQTdFWSxtQkFBVyxjQTZFdkIsQ0FBQSIsImZpbGUiOiJzcmMvZmlsZXMvQ29udGVudEZpbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlIENvbnRhaW5zIGNvZGUgcmVsYXRlZCBDb250ZW50IEZpbGUgcGFyc2luZ1xuICogQGF1dGhvciBUaW11ciBLdXpoYWdhbGl5ZXYgPHRpbS5rdXpoQGdtYWlsLmNvbT5cbiAqIEBjb3B5cmlnaHQgMjAxNlxuICogQGxpY2Vuc2UgR1BMLTMuMFxuICogQHNpbmNlIDAuMi4wXG4gKi9cblxuaW1wb3J0ICogYXMgZm0gZnJvbSAnZnJvbnQtbWF0dGVyJztcbmltcG9ydCAqIGFzIGRlZXBFcXVhbCBmcm9tICdkZWVwLWVxdWFsJztcbmltcG9ydCAqIGFzIGRlZXBEaWZmIGZyb20gJ2RlZXAtZGlmZic7XG5pbXBvcnQge0xvZ2dlcn0gZnJvbSAnLi4vTG9nZ2VyJztcbmltcG9ydCB7R2VuZXJpY0ZpbGUsIElSZWxvYWRhYmxlfSBmcm9tICcuL0dlbmVyaWNGaWxlJztcbmltcG9ydCB7Q29udGVudH0gZnJvbSAnLi9Db250ZW50JztcbmltcG9ydCB7Q29udGVudFBhcnNlcn0gZnJvbSAnLi4vQ29udGVudFBhcnNlcic7XG5pbXBvcnQge0lBc3NldFBhdGhHZW5lcmF0b3IsIElVcmxHZW5lcmF0b3J9IGZyb20gJy4uL1NpdGVHZW5lcmF0b3InO1xuXG4vKipcbiAqIEF0dHJpYnV0ZXMgZGVmaW5lZCBpbiB0aGUgZnJvbnQgbWF0dGVyIG9mIGEgY29udGVudCBmaWxlXG4gKiBAc2luY2UgMC4yLjBcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJQ29udGVudEZpbGVBdHRyaWJ1dGVzIHtcbiAgICBba2V5OiBzdHJpbmddOiBhbnk7XG59XG5cbi8qKlxuICpcbiAqIEBzaW5jZSAwLjIuMFxuICovXG5leHBvcnQgaW50ZXJmYWNlIElDb250ZW50RmlsZUNoYW5nZXMge1xuICAgIGF0dHJpYnV0ZXM6IGRlZXBEaWZmLklEaWZmW107XG4gICAgY29udGVudDoge1xuICAgICAgICBpZHM6IHN0cmluZ1tdLFxuICAgICAgICBhc3NldHM6IHN0cmluZ1tdLFxuICAgICAgICBnZW5lcmF0b3I6ICh1cmxHZW5lcmF0b3I6IElVcmxHZW5lcmF0b3IsXG4gICAgICAgICAgICAgICAgICAgIGFzc2V0UGF0aEdlbmVyYXRvcjogSUFzc2V0UGF0aEdlbmVyYXRvcixcbiAgICAgICAgICAgICAgICAgICAgY29udGVudFBhcnNlcjogQ29udGVudFBhcnNlcikgPT4gc3RyaW5nLFxuICAgIH07XG59XG5cbi8qKlxuICogQGNsYXNzIEZpbGUgcmVzcG9uc2libGUgZm9yIHJlcHJlc2VudGluZyBjb250ZW50IGZpbGVzXG4gKiBAc2luY2UgMC4yLjBcbiAqL1xuZXhwb3J0IGNsYXNzIENvbnRlbnRGaWxlIGV4dGVuZHMgR2VuZXJpY0ZpbGUgaW1wbGVtZW50cyBJUmVsb2FkYWJsZSB7XG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlcyBleHRyYWN0ZWQgZnJvbSB0aGUgZnJvbnQgbWF0dGVyXG4gICAgICogQHNpbmNlIDAuMi4wXG4gICAgICovXG4gICAgcHJpdmF0ZSBhdHRyaWJ1dGVzOiBJQ29udGVudEZpbGVBdHRyaWJ1dGVzO1xuXG4gICAgLyoqXG4gICAgICogUmF3IGNvbnRlbnQgb2YgYSBjb250ZW50IGZpbGUgKGV2ZXJ5dGhpbmcgZXhjZXB0IHRoZSBmcm9udCBtYXR0ZXIpXG4gICAgICogQHNpbmNlIDAuMi4wXG4gICAgICovXG4gICAgcHJpdmF0ZSByYXdDb250ZW50OiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBQcm9jZXNzZWQgY29udGVudFxuICAgICAqIEBzaW5jZSAwLjIuMFxuICAgICAqL1xuICAgIHByaXZhdGUgY29udGVudDogQ29udGVudDtcblxuICAgIC8qKlxuICAgICAqIENvbnRlbnRGaWxlIGNvbnN0cnVjdG9yXG4gICAgICogQHNpbmNlIDAuMi4wXG4gICAgICovXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKHJvb3RQYXRoOiBzdHJpbmcsIHJlbGF0aXZlUGF0aDogc3RyaW5nW10sIG5hbWU6IHN0cmluZykge1xuICAgICAgICBzdXBlcihyb290UGF0aCwgcmVsYXRpdmVQYXRoLCBuYW1lKTtcbiAgICAgICAgdGhpcy5hdHRyaWJ1dGVzID0ge307XG4gICAgICAgIHRoaXMuY29udGVudCA9IG5ldyBDb250ZW50KCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVsb2FkcyB0aGUgY29udGVudHMgb2YgdGhlIGZpbGUgYW5kIHByb2Nlc3NlcyBhbnkgY2hhbmdlc1xuICAgICAqIEBzaW5jZSAwLjIuMFxuICAgICAqL1xuICAgIHB1YmxpYyByZWxvYWQoKTogSUNvbnRlbnRGaWxlQ2hhbmdlcyB7XG4gICAgICAgIGxldCBjaGFuZ2VzOiBhbnkgPSB7fTtcbiAgICAgICAgbGV0IHRlbXBDb250ZW50cyA9IHRoaXMuY29udGVudHM7XG4gICAgICAgIHRoaXMucmVhZCgpO1xuICAgICAgICBpZiAodGVtcENvbnRlbnRzID09PSB0aGlzLmNvbnRlbnRzKSB7XG4gICAgICAgICAgICByZXR1cm4gY2hhbmdlcztcbiAgICAgICAgfVxuICAgICAgICBsZXQgY29udGVudHNPYmplY3QgPSBmbSh0aGlzLmNvbnRlbnRzKTtcbiAgICAgICAgaWYgKCFkZWVwRXF1YWwodGhpcy5hdHRyaWJ1dGVzLCBjb250ZW50c09iamVjdC5hdHRyaWJ1dGVzKSkge1xuICAgICAgICAgICAgY2hhbmdlcy5hdHRyaWJ1dGVzID0gZGVlcERpZmYuZGlmZih0aGlzLmF0dHJpYnV0ZXMsIGNvbnRlbnRzT2JqZWN0LmF0dHJpYnV0ZXMpO1xuICAgICAgICAgICAgdGhpcy5hdHRyaWJ1dGVzID0gY29udGVudHNPYmplY3QuYXR0cmlidXRlcztcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5yYXdDb250ZW50ICE9PSBjb250ZW50c09iamVjdC5ib2R5KSB7XG4gICAgICAgICAgICB0aGlzLnJhd0NvbnRlbnQgPSBjb250ZW50c09iamVjdC5ib2R5O1xuICAgICAgICAgICAgdGhpcy5jb250ZW50LnByZXBhcmUodGhpcy5yYXdDb250ZW50KTtcbiAgICAgICAgICAgIGNoYW5nZXMuY29udGVudCA9IHt9O1xuICAgICAgICAgICAgY2hhbmdlcy5jb250ZW50LmlkcyA9IHRoaXMuY29udGVudC5nZXRJZHMoKTtcbiAgICAgICAgICAgIGNoYW5nZXMuY29udGVudC5hc3NldHMgPSB0aGlzLmNvbnRlbnQuZ2V0QXNzZXRzKCk7XG4gICAgICAgICAgICBjaGFuZ2VzLmNvbnRlbnQuZ2VuZXJhdG9yID0gdGhpcy5jb250ZW50LmdlbmVyYXRlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjaGFuZ2VzIGFzIElDb250ZW50RmlsZUNoYW5nZXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhyb3dzIGFuIGVycm9yIGJlY2F1c2UgY29udGVudCBmaWxlcyBzaG91bGQgbm90IGJlIHdyaXR0ZW4gdG9cbiAgICAgKiBAc2luY2UgMC4yLjBcbiAgICAgKi9cbiAgICBwdWJsaWMgd3JpdGUoKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignQXR0ZW1wdGVkIHRvIHdyaXRlIHRvIGEgY29udGVudCBmaWxlIGAnICsgTG9nZ2VyLmJyYW5kKHRoaXMubmFtZSkgKyAnYC4gVGhpcyBpcyBub3QgYWxsb3dlZCEnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAc2luY2UgMC4yLjBcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0QXR0cmlidXRlcygpOiBJQ29udGVudEZpbGVBdHRyaWJ1dGVzIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYXR0cmlidXRlcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAc2luY2UgMC4yLjBcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0Q29udGVudCgpOiBDb250ZW50IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29udGVudDtcbiAgICB9XG59XG4iXX0=
