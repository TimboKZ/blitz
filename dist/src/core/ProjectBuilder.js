"use strict";
var URLHelper_1 = require('../helpers/URLHelper');
var PathHelper_1 = require('../helpers/PathHelper');
var SiteFile_1 = require('../files/SiteFile');
var TemplateFile_1 = require('../files/TemplateFile');
var AssetManager_1 = require('./AssetManager');
var DEFAULT_PAGE_EXTENSION = '.html';
var DEFAULT_INDEX_PAGE = 'index' + DEFAULT_PAGE_EXTENSION;
var ProjectBuilder = (function () {
    function ProjectBuilder(projectSettings) {
        this.settings = projectSettings;
        this.config = this.settings.config.get();
    }
    ProjectBuilder.prototype.build = function () {
        var assetManager = new AssetManager_1.AssetManager(this.settings);
        assetManager.setupListeners();
        assetManager.copyAssets();
        this.preparePages(this.config.pages, []);
    };
    ProjectBuilder.prototype.preparePages = function (pages, currentPath) {
        var length = pages.length;
        for (var i = 0; i < length; i++) {
            this.preparePage(pages[i], currentPath);
        }
    };
    ProjectBuilder.prototype.preparePage = function (page, currentPath) {
        var relativeUriArray = ProjectBuilder.extractRelativeUriArray(page);
        if (page.template) {
            var relativePagePathArray = this.determinePagePathArray(relativeUriArray);
            var pageUri = this.determineUri(relativePagePathArray);
            var fullPagePath = PathHelper_1.PathHelper.join(this.settings.buildPath, currentPath, relativePagePathArray);
            var templatePath = PathHelper_1.PathHelper.join(this.settings.templatePath, page.template);
            var templateFile = new TemplateFile_1.TemplateFile(templatePath);
            templateFile.reload();
            var siteFile = new SiteFile_1.SiteFile(fullPagePath, templateFile);
            siteFile.rebuild();
            siteFile.write();
        }
    };
    ProjectBuilder.extractRelativeUriArray = function (page) {
        var relativePathArray;
        if (page.uri !== undefined) {
            relativePathArray = URLHelper_1.URLHelper.split(page.uri);
        }
        else if (page.content !== undefined) {
            relativePathArray = URLHelper_1.URLHelper.split(PathHelper_1.PathHelper.stripExtension(page.content));
        }
        else if (page.template !== undefined) {
            relativePathArray = URLHelper_1.URLHelper.split(PathHelper_1.PathHelper.stripExtension(page.template));
        }
        else {
            throw new Error('Could not determine page path!');
        }
        return relativePathArray;
    };
    ProjectBuilder.prototype.determinePagePathArray = function (uriArray) {
        var isIndex = uriArray.length === 0 || (uriArray.length === 1 && uriArray[0] === 'index');
        if (isIndex) {
            return [DEFAULT_INDEX_PAGE];
        }
        var lastIndex = uriArray.length - 1;
        if (this.config.explicit_html_extensions) {
            uriArray[lastIndex] = uriArray[lastIndex] + DEFAULT_PAGE_EXTENSION;
        }
        else {
            uriArray.push(DEFAULT_INDEX_PAGE);
        }
        return uriArray;
    };
    ProjectBuilder.prototype.determineUri = function (pagePathArray) {
        var array = pagePathArray.slice(0);
        var lastIndex = array.length - 1;
        if (array[lastIndex] === DEFAULT_INDEX_PAGE
            && !this.config.explicit_html_extensions) {
            array.pop();
        }
        return URLHelper_1.URLHelper.join(array);
    };
    return ProjectBuilder;
}());
exports.ProjectBuilder = ProjectBuilder;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
