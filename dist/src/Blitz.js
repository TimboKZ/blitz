"use strict";
var path = require('path');
var fse = require('fs-extra');
var yaml = require('js-yaml');
var ProjectInitialiser_1 = require('./ProjectInitialiser');
var Logger_1 = require('./Logger');
var Config_1 = require('./Config');
var ProjectWatcher_1 = require('./ProjectWatcher');
var events_1 = require('events');
var Blitz = (function () {
    function Blitz() {
    }
    Blitz.init = function (templateName, projectPath) {
        Logger_1.Logger.log('Initialising a new project in `' +
            Logger_1.Logger.brand(projectPath) + '` using the template `' +
            Logger_1.Logger.brand(templateName) + '`...', Logger_1.LogLevel.Debug);
        var templatesPath = path.join(__dirname, '..', '..', 'templates');
        var projectInitialiser = new ProjectInitialiser_1.ProjectInitialiser(projectPath, templatesPath);
        projectInitialiser.initialise(templateName, function (error) {
            if (error) {
                Logger_1.Logger.logMany(Logger_1.Logger.split(error), Logger_1.LogLevel.Error);
                process.exit(1);
            }
            Logger_1.Logger.log('Project initialised!');
            process.exit(0);
        });
    };
    Blitz.build = function (configPath, buildDirectory) {
        Logger_1.Logger.log('Building site using `' +
            Logger_1.Logger.brand(configPath) + '` in directory `' +
            Logger_1.Logger.brand(buildDirectory) + '`...', Logger_1.LogLevel.Debug);
        var configContents = fse.readFileSync(configPath, 'utf8');
        var rawConfig = yaml.safeLoad(configContents);
        if (!rawConfig) {
            rawConfig = {};
        }
        var config = new Config_1.Config();
        config.load(rawConfig);
        try {
            config.validate();
        }
        catch (exception) {
            Logger_1.Logger.log('Error validating the config:', Logger_1.LogLevel.Error);
            Logger_1.Logger.logMany(Logger_1.Logger.split(exception.message), Logger_1.LogLevel.Error);
            process.exit(1);
        }
        console.log(config.get());
    };
    Blitz.watch = function (configPath, buildPath) {
        var eventEmitter = new events_1.EventEmitter();
        var projectWatcher = new ProjectWatcher_1.ProjectWatcher(configPath, buildPath, eventEmitter);
        projectWatcher.watch();
    };
    Blitz.preview = function () {
    };
    return Blitz;
}());
exports.Blitz = Blitz;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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QUFDLENBQUMsQ0FBQztRQUNwQixDQUFDO1FBQ0QsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQztJQUM5QixDQUFDO0lBTWEsV0FBSyxHQUFuQixVQUFvQixVQUFrQixFQUFFLFNBQWlCO1FBQ3JELElBQUksWUFBWSxHQUFHLElBQUkscUJBQVksRUFBRSxDQUFDO1FBQ3RDLElBQUksY0FBYyxHQUFHLElBQUksK0JBQWMsQ0FBQyxVQUFVLEVBQUUsU0FBUyxFQUFDLFlBQVksQ0FBQyxDQUFDO1FBQzVFLGNBQWMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUMzQixDQUFDO0lBTWEsYUFBTyxHQUFyQjtJQUVBLENBQUM7SUFDTCxZQUFDO0FBQUQsQ0FqRUEsQUFpRUMsSUFBQTtBQWpFWSxhQUFLLFFBaUVqQixDQUFBIiwiZmlsZSI6InNyYy9CbGl0ei5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGUgRmlsZSBjb250YWluaW5nIHRoZSBjb3JlIG9mIEJsaXR6XG4gKiBAYXV0aG9yIFRpbXVyIEt1emhhZ2FsaXlldiA8dGltLmt1emhAZ21haWwuY29tPlxuICogQGNvcHlyaWdodCAyMDE2XG4gKiBAbGljZW5zZSBHUEwtMy4wXG4gKiBAc2luY2UgMC4yLjBcbiAqL1xuXG5pbXBvcnQgKiBhcyBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0ICogYXMgZnNlIGZyb20gJ2ZzLWV4dHJhJztcbmltcG9ydCAqIGFzIHlhbWwgZnJvbSAnanMteWFtbCc7XG5pbXBvcnQge1Byb2plY3RJbml0aWFsaXNlcn0gZnJvbSAnLi9Qcm9qZWN0SW5pdGlhbGlzZXInO1xuaW1wb3J0IHtMb2dnZXIsIExvZ0xldmVsfSBmcm9tICcuL0xvZ2dlcic7XG5pbXBvcnQge0NvbmZpZ30gZnJvbSAnLi9Db25maWcnO1xuaW1wb3J0IHtQcm9qZWN0V2F0Y2hlcn0gZnJvbSAnLi9Qcm9qZWN0V2F0Y2hlcic7XG5pbXBvcnQge0V2ZW50RW1pdHRlcn0gZnJvbSAnZXZlbnRzJztcblxuLyoqXG4gKiBAY2xhc3MgTWFpbiBjbGFzcyBvZiBCbGl0eiwgZXhwb3NlcyB0aGUgQVBJIGZvciBleHRlcm5hbCBtb2R1bGVzIHRvIHVzZVxuICogQHNpbmNlIDAuMi4wXG4gKi9cbmV4cG9ydCBjbGFzcyBCbGl0eiB7XG4gICAgLyoqXG4gICAgICogSW5pdGlhbGlzZXMgYSBCbGl0eiBwcm9qZWN0IGZyb20gYSB0ZW1wbGF0ZVxuICAgICAqIEBzaW5jZSAwLjIuMFxuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgaW5pdCh0ZW1wbGF0ZU5hbWU6IHN0cmluZywgcHJvamVjdFBhdGg6IHN0cmluZykge1xuICAgICAgICBMb2dnZXIubG9nKCdJbml0aWFsaXNpbmcgYSBuZXcgcHJvamVjdCBpbiBgJyArXG4gICAgICAgICAgICBMb2dnZXIuYnJhbmQocHJvamVjdFBhdGgpICsgJ2AgdXNpbmcgdGhlIHRlbXBsYXRlIGAnICtcbiAgICAgICAgICAgIExvZ2dlci5icmFuZCh0ZW1wbGF0ZU5hbWUpICsgJ2AuLi4nLCBMb2dMZXZlbC5EZWJ1Zyk7XG4gICAgICAgIGxldCB0ZW1wbGF0ZXNQYXRoID0gcGF0aC5qb2luKF9fZGlybmFtZSwgJy4uJywgJy4uJywgJ3RlbXBsYXRlcycpO1xuICAgICAgICBsZXQgcHJvamVjdEluaXRpYWxpc2VyID0gbmV3IFByb2plY3RJbml0aWFsaXNlcihwcm9qZWN0UGF0aCwgdGVtcGxhdGVzUGF0aCk7XG4gICAgICAgIHByb2plY3RJbml0aWFsaXNlci5pbml0aWFsaXNlKHRlbXBsYXRlTmFtZSwgKGVycm9yKSA9PiB7XG4gICAgICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBMb2dnZXIubG9nTWFueShMb2dnZXIuc3BsaXQoZXJyb3IpLCBMb2dMZXZlbC5FcnJvcik7XG4gICAgICAgICAgICAgICAgcHJvY2Vzcy5leGl0KDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgTG9nZ2VyLmxvZygnUHJvamVjdCBpbml0aWFsaXNlZCEnKTtcbiAgICAgICAgICAgIHByb2Nlc3MuZXhpdCgwKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQnVpbGRzIHRoZSB3ZWJzaXRlIHVzaW5nIHRoZSBzcGVjaWZpZWQgY29uZmlnLiBBc3N1bWVzIHRoYXQgYWxsIHJlbGV2YW50IGZvbGRlcnMgKGUuZy4gYGFzc2V0c2AsIGBjb250ZW50YCxcbiAgICAgKiBgcGx1Z2luc2AsIGB0ZW1wbGF0ZXNgLCBldGMuKSBleGlzdCBpbiB0aGUgc2FtZSBkaXJlY3RvcnkgYXMgdGhlIGNvbmZpZy4gVGhlIGdlbmVyYXRlZCBmaWxlcyBhcmUgcGxhY2VkIGludG8gdGhlXG4gICAgICogc3BlY2lmaWVkIGJ1aWxkIGRpcmVjdG9yeS5cbiAgICAgKiBAc2luY2UgMC4yLjBcbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIGJ1aWxkKGNvbmZpZ1BhdGg6IHN0cmluZywgYnVpbGREaXJlY3Rvcnk6IHN0cmluZykge1xuICAgICAgICBMb2dnZXIubG9nKCdCdWlsZGluZyBzaXRlIHVzaW5nIGAnICtcbiAgICAgICAgICAgIExvZ2dlci5icmFuZChjb25maWdQYXRoKSArICdgIGluIGRpcmVjdG9yeSBgJyArXG4gICAgICAgICAgICBMb2dnZXIuYnJhbmQoYnVpbGREaXJlY3RvcnkpICsgJ2AuLi4nLCBMb2dMZXZlbC5EZWJ1Zyk7XG4gICAgICAgIGxldCBjb25maWdDb250ZW50cyA9IGZzZS5yZWFkRmlsZVN5bmMoY29uZmlnUGF0aCwgJ3V0ZjgnKTtcbiAgICAgICAgbGV0IHJhd0NvbmZpZyA9IHlhbWwuc2FmZUxvYWQoY29uZmlnQ29udGVudHMpO1xuICAgICAgICBpZiAoIXJhd0NvbmZpZykge1xuICAgICAgICAgICAgcmF3Q29uZmlnID0ge307XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGNvbmZpZyA9IG5ldyBDb25maWcoKTtcbiAgICAgICAgY29uZmlnLmxvYWQocmF3Q29uZmlnKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbmZpZy52YWxpZGF0ZSgpO1xuICAgICAgICB9IGNhdGNoIChleGNlcHRpb24pIHtcbiAgICAgICAgICAgIExvZ2dlci5sb2coJ0Vycm9yIHZhbGlkYXRpbmcgdGhlIGNvbmZpZzonLCBMb2dMZXZlbC5FcnJvcik7XG4gICAgICAgICAgICBMb2dnZXIubG9nTWFueShMb2dnZXIuc3BsaXQoZXhjZXB0aW9uLm1lc3NhZ2UpLCBMb2dMZXZlbC5FcnJvcik7XG4gICAgICAgICAgICBwcm9jZXNzLmV4aXQoMSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc29sZS5sb2coY29uZmlnLmdldCgpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBXYXRjaGVzIHRoZSBjdXJyZW50IGRpcmVjdG9yeSBhbmQgcmVidWlsZHMgY2VydGFpbiBwYXJ0cyBvZiB0aGUgd2Vic2l0ZSB3aGVuIG5lY2Vzc2FyeVxuICAgICAqIEBzaW5jZSAwLjIuMFxuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgd2F0Y2goY29uZmlnUGF0aDogc3RyaW5nLCBidWlsZFBhdGg6IHN0cmluZykge1xuICAgICAgICBsZXQgZXZlbnRFbWl0dGVyID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICAgICAgICBsZXQgcHJvamVjdFdhdGNoZXIgPSBuZXcgUHJvamVjdFdhdGNoZXIoY29uZmlnUGF0aCwgYnVpbGRQYXRoLCBldmVudEVtaXR0ZXIpO1xuICAgICAgICBwcm9qZWN0V2F0Y2hlci53YXRjaCgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJ1bnMgYSB3ZWIgc2VydmVyIHdpdGggdGhlIHByZXZpZXcgb2YgdGhlIHdlYnNpdGVcbiAgICAgKiBAc2luY2UgMC4yLjBcbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIHByZXZpZXcoKSB7XG5cbiAgICB9XG59XG4iXX0=
