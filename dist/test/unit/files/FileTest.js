"use strict";
var mock = require('mock-fs');
var fse = require('fs-extra');
var path = require('path');
var chai_1 = require('chai');
var File_1 = require('../../../src/files/File');
describe('File', function () {
    describe('#getFullPath()', function () {
        it('combines paths correctly', function () {
            chai_1.assert.equal(new File_1.File('first', ['second', 'third'], 'fourth.txt').getFullPath(), path.join('first', 'second', 'third', 'fourth.txt'));
        });
    });
    describe('#read()', function () {
        it('reads file contents correctly', function () {
            var fileContents = 'Hello world!';
            var mockConfig = {
                'test.txt': mock.file({
                    content: fileContents,
                    mode: 777,
                }),
            };
            mock(mockConfig);
            var file = new File_1.File('', [], 'test.txt');
            file.read();
            chai_1.assert.equal(file.getContents(), fileContents);
            mock.restore();
        });
    });
    describe('#write()', function () {
        it('writes file contents correctly', function () {
            var fileContents = 'Hello world!';
            var mockConfig = {
                'test.txt': mock.file({
                    content: '',
                    mode: 777,
                }),
            };
            mock(mockConfig);
            var file = new File_1.File('/', [], 'test.txt');
            file.setContents(fileContents);
            file.write();
            chai_1.assert.equal(fse.readFileSync('/test.txt', 'utf8'), fileContents);
            mock.restore();
        });
    });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3Rlc3QvdW5pdC9maWxlcy9GaWxlVGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBUUEsSUFBWSxJQUFJLFdBQU0sU0FBUyxDQUFDLENBQUE7QUFDaEMsSUFBWSxHQUFHLFdBQU0sVUFBVSxDQUFDLENBQUE7QUFDaEMsSUFBWSxJQUFJLFdBQU0sTUFBTSxDQUFDLENBQUE7QUFDN0IscUJBQXFCLE1BQU0sQ0FBQyxDQUFBO0FBQzVCLHFCQUFtQix5QkFBeUIsQ0FBQyxDQUFBO0FBRTdDLFFBQVEsQ0FBQyxNQUFNLEVBQUU7SUFDYixRQUFRLENBQUMsZ0JBQWdCLEVBQUU7UUFDdkIsRUFBRSxDQUFDLDBCQUEwQixFQUFFO1lBQzNCLGFBQU0sQ0FBQyxLQUFLLENBQ1IsSUFBSSxXQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsUUFBUSxFQUFFLE9BQU8sQ0FBQyxFQUFFLFlBQVksQ0FBQyxDQUFDLFdBQVcsRUFBRSxFQUNsRSxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLFlBQVksQ0FBQyxDQUN0RCxDQUFDO1FBQ04sQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDLENBQUMsQ0FBQztJQUNILFFBQVEsQ0FBQyxTQUFTLEVBQUU7UUFDaEIsRUFBRSxDQUFDLCtCQUErQixFQUFFO1lBQ2hDLElBQUksWUFBWSxHQUFHLGNBQWMsQ0FBQztZQUNsQyxJQUFJLFVBQVUsR0FBRztnQkFDYixVQUFVLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQztvQkFDbEIsT0FBTyxFQUFFLFlBQVk7b0JBQ3JCLElBQUksRUFBRSxHQUFHO2lCQUNaLENBQUM7YUFDTCxDQUFDO1lBQ0YsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBQ2pCLElBQUksSUFBSSxHQUFHLElBQUksV0FBSSxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsVUFBVSxDQUFDLENBQUM7WUFDeEMsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO1lBQ1osYUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLEVBQUUsWUFBWSxDQUFDLENBQUM7WUFDL0MsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQ25CLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQyxDQUFDLENBQUM7SUFDSCxRQUFRLENBQUMsVUFBVSxFQUFFO1FBQ2pCLEVBQUUsQ0FBQyxnQ0FBZ0MsRUFBRTtZQUNqQyxJQUFJLFlBQVksR0FBRyxjQUFjLENBQUM7WUFDbEMsSUFBSSxVQUFVLEdBQUc7Z0JBQ2IsVUFBVSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUM7b0JBQ2xCLE9BQU8sRUFBRSxFQUFFO29CQUNYLElBQUksRUFBRSxHQUFHO2lCQUNaLENBQUM7YUFDTCxDQUFDO1lBQ0YsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBQ2pCLElBQUksSUFBSSxHQUFHLElBQUksV0FBSSxDQUFDLEdBQUcsRUFBRSxFQUFFLEVBQUUsVUFBVSxDQUFDLENBQUM7WUFDekMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsQ0FBQztZQUMvQixJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7WUFDYixhQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsV0FBVyxFQUFFLE1BQU0sQ0FBQyxFQUFFLFlBQVksQ0FBQyxDQUFDO1lBQ2xFLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUNuQixDQUFDLENBQUMsQ0FBQztJQUNQLENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyxDQUFDLENBQUMiLCJmaWxlIjoidGVzdC91bml0L2ZpbGVzL0ZpbGVUZXN0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZSBGaWxlIHRlc3RzXG4gKiBAYXV0aG9yIFRpbXVyIEt1emhhZ2FsaXlldiA8dGltLmt1emhAZ21haWwuY29tPlxuICogQGNvcHlyaWdodCAyMDE2XG4gKiBAbGljZW5zZSBHUEwtMy4wXG4gKiBAc2luY2UgMC4yLjBcbiAqL1xuXG5pbXBvcnQgKiBhcyBtb2NrIGZyb20gJ21vY2stZnMnO1xuaW1wb3J0ICogYXMgZnNlIGZyb20gJ2ZzLWV4dHJhJztcbmltcG9ydCAqIGFzIHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQge2Fzc2VydH0gZnJvbSAnY2hhaSc7XG5pbXBvcnQge0ZpbGV9IGZyb20gJy4uLy4uLy4uL3NyYy9maWxlcy9GaWxlJztcblxuZGVzY3JpYmUoJ0ZpbGUnLCAoKSA9PiB7XG4gICAgZGVzY3JpYmUoJyNnZXRGdWxsUGF0aCgpJywgKCkgPT4ge1xuICAgICAgICBpdCgnY29tYmluZXMgcGF0aHMgY29ycmVjdGx5JywgKCkgPT4ge1xuICAgICAgICAgICAgYXNzZXJ0LmVxdWFsKFxuICAgICAgICAgICAgICAgIG5ldyBGaWxlKCdmaXJzdCcsIFsnc2Vjb25kJywgJ3RoaXJkJ10sICdmb3VydGgudHh0JykuZ2V0RnVsbFBhdGgoKSxcbiAgICAgICAgICAgICAgICBwYXRoLmpvaW4oJ2ZpcnN0JywgJ3NlY29uZCcsICd0aGlyZCcsICdmb3VydGgudHh0JylcbiAgICAgICAgICAgICk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuICAgIGRlc2NyaWJlKCcjcmVhZCgpJywgKCkgPT4ge1xuICAgICAgICBpdCgncmVhZHMgZmlsZSBjb250ZW50cyBjb3JyZWN0bHknLCAoKSA9PiB7XG4gICAgICAgICAgICBsZXQgZmlsZUNvbnRlbnRzID0gJ0hlbGxvIHdvcmxkISc7XG4gICAgICAgICAgICBsZXQgbW9ja0NvbmZpZyA9IHtcbiAgICAgICAgICAgICAgICAndGVzdC50eHQnOiBtb2NrLmZpbGUoe1xuICAgICAgICAgICAgICAgICAgICBjb250ZW50OiBmaWxlQ29udGVudHMsXG4gICAgICAgICAgICAgICAgICAgIG1vZGU6IDc3NyxcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBtb2NrKG1vY2tDb25maWcpO1xuICAgICAgICAgICAgbGV0IGZpbGUgPSBuZXcgRmlsZSgnJywgW10sICd0ZXN0LnR4dCcpO1xuICAgICAgICAgICAgZmlsZS5yZWFkKCk7XG4gICAgICAgICAgICBhc3NlcnQuZXF1YWwoZmlsZS5nZXRDb250ZW50cygpLCBmaWxlQ29udGVudHMpO1xuICAgICAgICAgICAgbW9jay5yZXN0b3JlKCk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuICAgIGRlc2NyaWJlKCcjd3JpdGUoKScsICgpID0+IHtcbiAgICAgICAgaXQoJ3dyaXRlcyBmaWxlIGNvbnRlbnRzIGNvcnJlY3RseScsICgpID0+IHtcbiAgICAgICAgICAgIGxldCBmaWxlQ29udGVudHMgPSAnSGVsbG8gd29ybGQhJztcbiAgICAgICAgICAgIGxldCBtb2NrQ29uZmlnID0ge1xuICAgICAgICAgICAgICAgICd0ZXN0LnR4dCc6IG1vY2suZmlsZSh7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6ICcnLFxuICAgICAgICAgICAgICAgICAgICBtb2RlOiA3NzcsXG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgbW9jayhtb2NrQ29uZmlnKTtcbiAgICAgICAgICAgIGxldCBmaWxlID0gbmV3IEZpbGUoJy8nLCBbXSwgJ3Rlc3QudHh0Jyk7XG4gICAgICAgICAgICBmaWxlLnNldENvbnRlbnRzKGZpbGVDb250ZW50cyk7XG4gICAgICAgICAgICBmaWxlLndyaXRlKCk7XG4gICAgICAgICAgICBhc3NlcnQuZXF1YWwoZnNlLnJlYWRGaWxlU3luYygnL3Rlc3QudHh0JywgJ3V0ZjgnKSwgZmlsZUNvbnRlbnRzKTtcbiAgICAgICAgICAgIG1vY2sucmVzdG9yZSgpO1xuICAgICAgICB9KTtcbiAgICB9KTtcbn0pO1xuIl19
