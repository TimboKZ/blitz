"use strict";
var mock = require('mock-fs');
var chai_1 = require('chai');
var ContentFile_1 = require('../../../src/files/ContentFile');
describe('ContentFile', function () {
    describe('#reload()', function () {
        it('extracts the content of the file correctly', function () {
            var contentString = 'Hello World!';
            var fileContents = '---\n---\n' + contentString;
            var mockConfig = {
                'test.txt': mock.file({
                    content: fileContents,
                    mode: 777,
                }),
            };
            mock(mockConfig);
            var file = new ContentFile_1.ContentFile('', [], 'test.txt');
            file.reload();
            var idFunction = function (input) { return input; };
            var generatedString = file.getContent().generate(idFunction, idFunction, idFunction);
            chai_1.assert.equal(generatedString, contentString);
            mock.restore();
        });
    });
    describe('#write()', function () {
        it('throws an error because operation is prohibited', function () {
            var contentFile = new ContentFile_1.ContentFile('', [], 'test.txt');
            chai_1.assert.throws(function () { return contentFile.write(); });
        });
    });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3Rlc3QvdW5pdC9maWxlcy9Db250ZW50RmlsZVRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQVFBLElBQVksSUFBSSxXQUFNLFNBQVMsQ0FBQyxDQUFBO0FBQ2hDLHFCQUFxQixNQUFNLENBQUMsQ0FBQTtBQUM1Qiw0QkFBMEIsZ0NBQWdDLENBQUMsQ0FBQTtBQUUzRCxRQUFRLENBQUMsYUFBYSxFQUFFO0lBQ3BCLFFBQVEsQ0FBQyxXQUFXLEVBQUU7UUFFbEIsRUFBRSxDQUFDLDRDQUE0QyxFQUFFO1lBQzdDLElBQUksYUFBYSxHQUFHLGNBQWMsQ0FBQztZQUNuQyxJQUFJLFlBQVksR0FBRyxZQUFZLEdBQUcsYUFBYSxDQUFDO1lBQ2hELElBQUksVUFBVSxHQUFHO2dCQUNiLFVBQVUsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDO29CQUNsQixPQUFPLEVBQUUsWUFBWTtvQkFDckIsSUFBSSxFQUFFLEdBQUc7aUJBQ1osQ0FBQzthQUNMLENBQUM7WUFDRixJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7WUFDakIsSUFBSSxJQUFJLEdBQUcsSUFBSSx5QkFBVyxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsVUFBVSxDQUFDLENBQUM7WUFDL0MsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO1lBQ2QsSUFBSSxVQUFVLEdBQUcsVUFBQyxLQUFhLElBQUssT0FBQSxLQUFLLEVBQUwsQ0FBSyxDQUFDO1lBQzFDLElBQUksZUFBZSxHQUFHLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQyxRQUFRLENBQUMsVUFBVSxFQUFFLFVBQVUsRUFBRSxVQUFVLENBQUMsQ0FBQztZQUNyRixhQUFNLENBQUMsS0FBSyxDQUFDLGVBQWUsRUFBRSxhQUFhLENBQUMsQ0FBQztZQUM3QyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDbkIsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDLENBQUMsQ0FBQztJQUNILFFBQVEsQ0FBQyxVQUFVLEVBQUU7UUFDakIsRUFBRSxDQUFDLGlEQUFpRCxFQUFFO1lBQ2xELElBQUksV0FBVyxHQUFHLElBQUkseUJBQVcsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLFVBQVUsQ0FBQyxDQUFDO1lBQ3RELGFBQU0sQ0FBQyxNQUFNLENBQUMsY0FBTSxPQUFBLFdBQVcsQ0FBQyxLQUFLLEVBQUUsRUFBbkIsQ0FBbUIsQ0FBQyxDQUFDO1FBQzdDLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQyxDQUFDLENBQUM7QUFDUCxDQUFDLENBQUMsQ0FBQyIsImZpbGUiOiJ0ZXN0L3VuaXQvZmlsZXMvQ29udGVudEZpbGVUZXN0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZSBDb250ZW50RmlsZSB0ZXN0c1xuICogQGF1dGhvciBUaW11ciBLdXpoYWdhbGl5ZXYgPHRpbS5rdXpoQGdtYWlsLmNvbT5cbiAqIEBjb3B5cmlnaHQgMjAxNlxuICogQGxpY2Vuc2UgR1BMLTMuMFxuICogQHNpbmNlIDAuMi4wXG4gKi9cblxuaW1wb3J0ICogYXMgbW9jayBmcm9tICdtb2NrLWZzJztcbmltcG9ydCB7YXNzZXJ0fSBmcm9tICdjaGFpJztcbmltcG9ydCB7Q29udGVudEZpbGV9IGZyb20gJy4uLy4uLy4uL3NyYy9maWxlcy9Db250ZW50RmlsZSc7XG5cbmRlc2NyaWJlKCdDb250ZW50RmlsZScsICgpID0+IHtcbiAgICBkZXNjcmliZSgnI3JlbG9hZCgpJywgKCkgPT4ge1xuICAgICAgICAvLyBUT0RPOiBBZGQgbW9yZSB0ZXN0cyBmb3IgcmVsb2FkKCkgb25jZSBpdHMgY29tcGxldGVcbiAgICAgICAgaXQoJ2V4dHJhY3RzIHRoZSBjb250ZW50IG9mIHRoZSBmaWxlIGNvcnJlY3RseScsICgpID0+IHtcbiAgICAgICAgICAgIGxldCBjb250ZW50U3RyaW5nID0gJ0hlbGxvIFdvcmxkISc7XG4gICAgICAgICAgICBsZXQgZmlsZUNvbnRlbnRzID0gJy0tLVxcbi0tLVxcbicgKyBjb250ZW50U3RyaW5nO1xuICAgICAgICAgICAgbGV0IG1vY2tDb25maWcgPSB7XG4gICAgICAgICAgICAgICAgJ3Rlc3QudHh0JzogbW9jay5maWxlKHtcbiAgICAgICAgICAgICAgICAgICAgY29udGVudDogZmlsZUNvbnRlbnRzLFxuICAgICAgICAgICAgICAgICAgICBtb2RlOiA3NzcsXG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgbW9jayhtb2NrQ29uZmlnKTtcbiAgICAgICAgICAgIGxldCBmaWxlID0gbmV3IENvbnRlbnRGaWxlKCcnLCBbXSwgJ3Rlc3QudHh0Jyk7XG4gICAgICAgICAgICBmaWxlLnJlbG9hZCgpO1xuICAgICAgICAgICAgbGV0IGlkRnVuY3Rpb24gPSAoaW5wdXQ6IHN0cmluZykgPT4gaW5wdXQ7XG4gICAgICAgICAgICBsZXQgZ2VuZXJhdGVkU3RyaW5nID0gZmlsZS5nZXRDb250ZW50KCkuZ2VuZXJhdGUoaWRGdW5jdGlvbiwgaWRGdW5jdGlvbiwgaWRGdW5jdGlvbik7XG4gICAgICAgICAgICBhc3NlcnQuZXF1YWwoZ2VuZXJhdGVkU3RyaW5nLCBjb250ZW50U3RyaW5nKTtcbiAgICAgICAgICAgIG1vY2sucmVzdG9yZSgpO1xuICAgICAgICB9KTtcbiAgICB9KTtcbiAgICBkZXNjcmliZSgnI3dyaXRlKCknLCAoKSA9PiB7XG4gICAgICAgIGl0KCd0aHJvd3MgYW4gZXJyb3IgYmVjYXVzZSBvcGVyYXRpb24gaXMgcHJvaGliaXRlZCcsICgpID0+IHtcbiAgICAgICAgICAgIGxldCBjb250ZW50RmlsZSA9IG5ldyBDb250ZW50RmlsZSgnJywgW10sICd0ZXN0LnR4dCcpO1xuICAgICAgICAgICAgYXNzZXJ0LnRocm93cygoKSA9PiBjb250ZW50RmlsZS53cml0ZSgpKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG59KTtcbiJdfQ==
