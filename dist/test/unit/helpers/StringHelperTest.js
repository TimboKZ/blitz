"use strict";
var chai_1 = require('chai');
var StringHelper_1 = require('../../../src/helpers/StringHelper');
describe('StringHelper', function () {
    describe('#isString()', function () {
        it('correctly identifies strings', function () {
            chai_1.assert.isTrue(StringHelper_1.StringHelper.isString(''));
            chai_1.assert.isTrue(StringHelper_1.StringHelper.isString('hello'));
        });
        it('correctly identifies non-string objects', function () {
            chai_1.assert.isFalse(StringHelper_1.StringHelper.isString(null));
            chai_1.assert.isFalse(StringHelper_1.StringHelper.isString(undefined));
            chai_1.assert.isFalse(StringHelper_1.StringHelper.isString({}));
            chai_1.assert.isFalse(StringHelper_1.StringHelper.isString([]));
        });
    });
    describe('#isString()', function () {
        it('generates strings of the right length', function () {
            chai_1.assert.equal(StringHelper_1.StringHelper.random(5).length, 5);
            chai_1.assert.equal(StringHelper_1.StringHelper.random(10).length, 10);
            chai_1.assert.equal(StringHelper_1.StringHelper.random(15).length, 15);
        });
        it('generates different strings', function () {
            var first = StringHelper_1.StringHelper.random(8);
            var second = StringHelper_1.StringHelper.random(8);
            var third = StringHelper_1.StringHelper.random(8);
            chai_1.assert.notEqual(first, second);
            chai_1.assert.notEqual(first, third);
            chai_1.assert.notEqual(second, third);
        });
    });
    describe('#stringify()', function () {
        it('leaves string untouched', function () {
            chai_1.assert.equal(StringHelper_1.StringHelper.stringify(''), '');
            chai_1.assert.equal(StringHelper_1.StringHelper.stringify('hello'), 'hello');
        });
        it('converts non-string objects to their JSON representation', function () {
            chai_1.assert.equal(StringHelper_1.StringHelper.stringify(null), JSON.stringify(null));
            chai_1.assert.equal(StringHelper_1.StringHelper.stringify({}), JSON.stringify({}));
            chai_1.assert.equal(StringHelper_1.StringHelper.stringify(['hello']), JSON.stringify(['hello']));
        });
    });
    describe('#empty()', function () {
        it('correctly identifies empty strings', function () {
            chai_1.assert.isTrue(StringHelper_1.StringHelper.empty(null));
            chai_1.assert.isTrue(StringHelper_1.StringHelper.empty(undefined));
            chai_1.assert.isTrue(StringHelper_1.StringHelper.empty(''));
        });
        it('correctly identifies non-empty strings', function () {
            chai_1.assert.isFalse(StringHelper_1.StringHelper.empty('hello'));
        });
    });
    describe('#stripExtension()', function () {
        it('leaves strings without extension untouched', function () {
            chai_1.assert.equal(StringHelper_1.StringHelper.stripExtension('hello'), 'hello');
        });
        it('correctly removes a single extension', function () {
            chai_1.assert.equal(StringHelper_1.StringHelper.stripExtension('hello.test'), 'hello');
            chai_1.assert.equal(StringHelper_1.StringHelper.stripExtension('index.blade.php'), 'index.blade');
        });
    });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3Rlc3QvdW5pdC9oZWxwZXJzL1N0cmluZ0hlbHBlclRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQVFBLHFCQUFxQixNQUFNLENBQUMsQ0FBQTtBQUM1Qiw2QkFBMkIsbUNBQW1DLENBQUMsQ0FBQTtBQUUvRCxRQUFRLENBQUMsY0FBYyxFQUFFO0lBQ3JCLFFBQVEsQ0FBQyxhQUFhLEVBQUU7UUFDcEIsRUFBRSxDQUFDLDhCQUE4QixFQUFFO1lBQy9CLGFBQU0sQ0FBQyxNQUFNLENBQUMsMkJBQVksQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUN6QyxhQUFNLENBQUMsTUFBTSxDQUFDLDJCQUFZLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7UUFDbEQsQ0FBQyxDQUFDLENBQUM7UUFDSCxFQUFFLENBQUMseUNBQXlDLEVBQUU7WUFDMUMsYUFBTSxDQUFDLE9BQU8sQ0FBQywyQkFBWSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQzVDLGFBQU0sQ0FBQyxPQUFPLENBQUMsMkJBQVksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztZQUNqRCxhQUFNLENBQUMsT0FBTyxDQUFDLDJCQUFZLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDMUMsYUFBTSxDQUFDLE9BQU8sQ0FBQywyQkFBWSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQzlDLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQyxDQUFDLENBQUM7SUFDSCxRQUFRLENBQUMsYUFBYSxFQUFFO1FBQ3BCLEVBQUUsQ0FBQyx1Q0FBdUMsRUFBRTtZQUN4QyxhQUFNLENBQUMsS0FBSyxDQUFDLDJCQUFZLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQztZQUMvQyxhQUFNLENBQUMsS0FBSyxDQUFDLDJCQUFZLENBQUMsTUFB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LENBQUMsWUFBWSxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUM7WUFDakUsYUFBTSxDQUFDLEtBQUssQ0FBQywyQkFBWSxDQUFDLGNBQWMsQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFLGFBQWEsQ0FBQyxDQUFDO1FBQ2hGLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQyxDQUFDLENBQUM7QUFDUCxDQUFDLENBQUMsQ0FBQyIsImZpbGUiOiJ0ZXN0L3VuaXQvaGVscGVycy9TdHJpbmdIZWxwZXJUZXN0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZSBTdHJpbmdIZWxwZXIgdGVzdHNcbiAqIEBhdXRob3IgVGltdXIgS3V6aGFnYWxpeWV2IDx0aW0ua3V6aEBnbWFpbC5jb20+XG4gKiBAY29weXJpZ2h0IDIwMTZcbiAqIEBsaWNlbnNlIEdQTC0zLjBcbiAqIEBzaW5jZSAwLjAuMVxuICovXG5cbmltcG9ydCB7YXNzZXJ0fSBmcm9tICdjaGFpJztcbmltcG9ydCB7U3RyaW5nSGVscGVyfSBmcm9tICcuLi8uLi8uLi9zcmMvaGVscGVycy9TdHJpbmdIZWxwZXInO1xuXG5kZXNjcmliZSgnU3RyaW5nSGVscGVyJywgKCkgPT4ge1xuICAgIGRlc2NyaWJlKCcjaXNTdHJpbmcoKScsICgpID0+IHtcbiAgICAgICAgaXQoJ2NvcnJlY3RseSBpZGVudGlmaWVzIHN0cmluZ3MnLCAoKSA9PiB7XG4gICAgICAgICAgICBhc3NlcnQuaXNUcnVlKFN0cmluZ0hlbHBlci5pc1N0cmluZygnJykpO1xuICAgICAgICAgICAgYXNzZXJ0LmlzVHJ1ZShTdHJpbmdIZWxwZXIuaXNTdHJpbmcoJ2hlbGxvJykpO1xuICAgICAgICB9KTtcbiAgICAgICAgaXQoJ2NvcnJlY3RseSBpZGVudGlmaWVzIG5vbi1zdHJpbmcgb2JqZWN0cycsICgpID0+IHtcbiAgICAgICAgICAgIGFzc2VydC5pc0ZhbHNlKFN0cmluZ0hlbHBlci5pc1N0cmluZyhudWxsKSk7IC8vIHRzbGludDpkaXNhYmxlLWxpbmU6bm8tbnVsbC1rZXl3b3JkXG4gICAgICAgICAgICBhc3NlcnQuaXNGYWxzZShTdHJpbmdIZWxwZXIuaXNTdHJpbmcodW5kZWZpbmVkKSk7XG4gICAgICAgICAgICBhc3NlcnQuaXNGYWxzZShTdHJpbmdIZWxwZXIuaXNTdHJpbmcoe30pKTtcbiAgICAgICAgICAgIGFzc2VydC5pc0ZhbHNlKFN0cmluZ0hlbHBlci5pc1N0cmluZyhbXSkpO1xuICAgICAgICB9KTtcbiAgICB9KTtcbiAgICBkZXNjcmliZSgnI2lzU3RyaW5nKCknLCAoKSA9PiB7XG4gICAgICAgIGl0KCdnZW5lcmF0ZXMgc3RyaW5ncyBvZiB0aGUgcmlnaHQgbGVuZ3RoJywgKCkgPT4ge1xuICAgICAgICAgICAgYXNzZXJ0LmVxdWFsKFN0cmluZ0hlbHBlci5yYW5kb20oNSkubGVuZ3RoLCA1KTtcbiAgICAgICAgICAgIGFzc2VydC5lcXVhbChTdHJpbmdIZWxwZXIucmFuZG9tKDEwKS5sZW5ndGgsIDEwKTtcbiAgICAgICAgICAgIGFzc2VydC5lcXVhbChTdHJpbmdIZWxwZXIucmFuZG9tKDE1KS5sZW5ndGgsIDE1KTtcbiAgICAgICAgfSk7XG4gICAgICAgIGl0KCdnZW5lcmF0ZXMgZGlmZmVyZW50IHN0cmluZ3MnLCAoKSA9PiB7XG4gICAgICAgICAgICBsZXQgZmlyc3QgPSBTdHJpbmdIZWxwZXIucmFuZG9tKDgpO1xuICAgICAgICAgICAgbGV0IHNlY29uZCA9IFN0cmluZ0hlbHBlci5yYW5kb20oOCk7XG4gICAgICAgICAgICBsZXQgdGhpcmQgPSBTdHJpbmdIZWxwZXIucmFuZG9tKDgpO1xuICAgICAgICAgICAgYXNzZXJ0Lm5vdEVxdWFsKGZpcnN0LCBzZWNvbmQpO1xuICAgICAgICAgICAgYXNzZXJ0Lm5vdEVxdWFsKGZpcnN0LCB0aGlyZCk7XG4gICAgICAgICAgICBhc3NlcnQubm90RXF1YWwoc2Vjb25kLCB0aGlyZCk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuICAgIGRlc2NyaWJlKCcjc3RyaW5naWZ5KCknLCAoKSA9PiB7XG4gICAgICAgIGl0KCdsZWF2ZXMgc3RyaW5nIHVudG91Y2hlZCcsICgpID0+IHtcbiAgICAgICAgICAgIGFzc2VydC5lcXVhbChTdHJpbmdIZWxwZXIuc3RyaW5naWZ5KCcnKSwgJycpO1xuICAgICAgICAgICAgYXNzZXJ0LmVxdWFsKFN0cmluZ0hlbHBlci5zdHJpbmdpZnkoJ2hlbGxvJyksICdoZWxsbycpO1xuICAgICAgICB9KTtcbiAgICAgICAgaXQoJ2NvbnZlcnRzIG5vbi1zdHJpbmcgb2JqZWN0cyB0byB0aGVpciBKU09OIHJlcHJlc2VudGF0aW9uJywgKCkgPT4ge1xuICAgICAgICAgICAgYXNzZXJ0LmVxdWFsKFN0cmluZ0hlbHBlci5zdHJpbmdpZnkobnVsbCksIEpTT04uc3RyaW5naWZ5KG51bGwpKTsgLy8gdHNsaW50OmRpc2FibGUtbGluZTpuby1udWxsLWtleXdvcmRcbiAgICAgICAgICAgIGFzc2VydC5lcXVhbChTdHJpbmdIZWxwZXIuc3RyaW5naWZ5KHt9KSwgSlNPTi5zdHJpbmdpZnkoe30pKTtcbiAgICAgICAgICAgIGFzc2VydC5lcXVhbChTdHJpbmdIZWxwZXIuc3RyaW5naWZ5KFsnaGVsbG8nXSksIEpTT04uc3RyaW5naWZ5KFsnaGVsbG8nXSkpO1xuICAgICAgICB9KTtcbiAgICB9KTtcbiAgICBkZXNjcmliZSgnI2VtcHR5KCknLCAoKSA9PiB7XG4gICAgICAgIGl0KCdjb3JyZWN0bHkgaWRlbnRpZmllcyBlbXB0eSBzdHJpbmdzJywgKCkgPT4ge1xuICAgICAgICAgICAgYXNzZXJ0LmlzVHJ1ZShTdHJpbmdIZWxwZXIuZW1wdHkobnVsbCkpOyAvLyB0c2xpbnQ6ZGlzYWJsZS1saW5lOm5vLW51bGwta2V5d29yZFxuICAgICAgICAgICAgYXNzZXJ0LmlzVHJ1ZShTdHJpbmdIZWxwZXIuZW1wdHkodW5kZWZpbmVkKSk7XG4gICAgICAgICAgICBhc3NlcnQuaXNUcnVlKFN0cmluZ0hlbHBlci5lbXB0eSgnJykpO1xuICAgICAgICB9KTtcbiAgICAgICAgaXQoJ2NvcnJlY3RseSBpZGVudGlmaWVzIG5vbi1lbXB0eSBzdHJpbmdzJywgKCkgPT4ge1xuICAgICAgICAgICAgYXNzZXJ0LmlzRmFsc2UoU3RyaW5nSGVscGVyLmVtcHR5KCdoZWxsbycpKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG4gICAgZGVzY3JpYmUoJyNzdHJpcEV4dGVuc2lvbigpJywgKCkgPT4ge1xuICAgICAgICBpdCgnbGVhdmVzIHN0cmluZ3Mgd2l0aG91dCBleHRlbnNpb24gdW50b3VjaGVkJywgKCkgPT4ge1xuICAgICAgICAgICAgYXNzZXJ0LmVxdWFsKFN0cmluZ0hlbHBlci5zdHJpcEV4dGVuc2lvbignaGVsbG8nKSwgJ2hlbGxvJyk7XG4gICAgICAgIH0pO1xuICAgICAgICBpdCgnY29ycmVjdGx5IHJlbW92ZXMgYSBzaW5nbGUgZXh0ZW5zaW9uJywgKCkgPT4ge1xuICAgICAgICAgICAgYXNzZXJ0LmVxdWFsKFN0cmluZ0hlbHBlci5zdHJpcEV4dGVuc2lvbignaGVsbG8udGVzdCcpLCAnaGVsbG8nKTtcbiAgICAgICAgICAgIGFzc2VydC5lcXVhbChTdHJpbmdIZWxwZXIuc3RyaXBFeHRlbnNpb24oJ2luZGV4LmJsYWRlLnBocCcpLCAnaW5kZXguYmxhZGUnKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG59KTtcbiJdfQ==
