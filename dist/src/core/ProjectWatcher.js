"use strict";
var path = require('path');
var chokidar = require('chokidar');
var AssetManager_1 = require('./AssetManager');
exports.BUILD_CHANGE_EVENT = 'buildChange';
var ProjectWatcher = (function () {
    function ProjectWatcher(configPath, buildPath, eventEmitter) {
        this.configPath = configPath;
        this.projectPath = path.dirname(configPath);
        this.buildPath = buildPath;
        this.eventEmitter = eventEmitter;
    }
    ProjectWatcher.prototype.watch = function () {
        this.setupFileWatchers();
        var assetManager = new AssetManager_1.AssetManager(path.join(this.projectPath, 'assets'), path.join(this.buildPath, 'assets'), this.eventEmitter);
        assetManager.setupListeners();
    };
    ProjectWatcher.prototype.setupFileWatchers = function () {
        this.setupFileWatcher('assets', [
            {
                fsEvent: 'add',
                blitzEvent: AssetManager_1.ASSET_CHANGE_EVENT,
            },
            {
                fsEvent: 'addDir',
                blitzEvent: AssetManager_1.ASSET_CHANGE_EVENT,
            },
            {
                fsEvent: 'change',
                blitzEvent: AssetManager_1.ASSET_CHANGE_EVENT,
            },
            {
                fsEvent: 'unlink',
                blitzEvent: AssetManager_1.ASSET_REMOVE_EVENT,
            },
            {
                fsEvent: 'unlinkDir',
                blitzEvent: AssetManager_1.ASSET_REMOVE_EVENT,
            },
        ]);
    };
    ProjectWatcher.prototype.setupFileWatcher = function (directory, events) {
        var _this = this;
        var fullPath = path.join(this.projectPath, directory);
        var watcher = chokidar.watch(fullPath);
        var _loop_1 = function(i) {
            var event_1 = events[i];
            watcher.on(event_1.fsEvent, function (filePath) { return _this.eventEmitter.emit(event_1.blitzEvent, path.relative(fullPath, filePath)); });
        };
        for (var i = 0; i < events.length; i++) {
            _loop_1(i);
        }
        watcher.on('error', function (error) {
            if (process.platform === 'win32'
                && error.code === 'EPERM'
                && error.filename === null) {
                return;
            }
            return error;
        });
    };
    return ProjectWatcher;
}());
exports.ProjectWatcher = ProjectWatcher;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jb3JlL1Byb2plY3RXYXRjaGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFRQSxJQUFZLElBQUksV0FBTSxNQUFNLENBQUMsQ0FBQTtBQUM3QixJQUFZLFFBQVEsV0FBTSxVQUFVLENBQUMsQ0FBQTtBQUNyQyw2QkFBbUUsZ0JBQWdCLENBQUMsQ0FBQTtBQWdCdkUsMEJBQWtCLEdBQUcsYUFBYSxDQUFDO0FBTWhEO0lBeUJJLHdCQUFZLFVBQWtCLEVBQUUsU0FBaUIsRUFBRSxZQUEwQjtRQUN6RSxJQUFJLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQztRQUM3QixJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDNUMsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7UUFDM0IsSUFBSSxDQUFDLFlBQVksR0FBRyxZQUFZLENBQUM7SUFDckMsQ0FBQztJQUVNLDhCQUFLLEdBQVo7UUFDSSxJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztRQUN6QixJQUFJLFlBQVksR0FBRyxJQUFJLDJCQUFZLENBQy9CLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxRQUFRLENBQUMsRUFDckMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLFFBQVEsQ0FBQyxFQUNuQyxJQUFJLENBQUMsWUFBWSxDQUNwQixDQUFDO1FBQ0YsWUFBWSxDQUFDLGNBQWMsRUFBRSxDQUFDO0lBQ2xDLENBQUM7SUFFTywwQ0FBaUIsR0FBekI7UUFDSSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxFQUFFO1lBQzVCO2dCQUNJLE9BQU8sRUFBRSxLQUFLO2dCQUNkLFVBQVUsRUFBRSxpQ0FBa0I7YUFDakM7WUFDRDtnQkFDSSxPQUFPLEVBQUUsUUFBUTtnQkFDakIsVUFBVSxFQUFFLGlDQUFrQjthQUNqQztZQUNEO2dCQUNJLE9BQU8sRUFBRSxRQUFRO2dCQUNqQixVQUFVLEVBQUUsaUNBQWtCO2FBQ2pDO1lBQ0Q7Z0JBQ0ksT0FBTyxFQUFFLFFBQVE7Z0JBQ2pCLFVBQVUsRUFBRSxpQ0FBa0I7YUFDakM7WUFDRDtnQkFDSSxPQUFPLEVBQUUsV0FBVztnQkFDcEIsVUFBVSxFQUFFLGlDQUFrQjthQUNqQztTQUNKLENBQUMsQ0FBQztJQUNQLENBQUM7SUFNTyx5Q0FBZ0IsR0FBeEIsVUFBeUIsU0FBaUIsRUFBRSxNQUFzQjtRQUFsRSxpQkFtQkM7UUFsQkcsSUFBSSxRQUFRLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQ3RELElBQUksT0FBTyxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDdkM7WUFDSSxJQUFJLE9BQUssR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDdEIsT0FBTyxDQUFDLEVBQUUsQ0FDTixPQUFLLENBQUMsT0FBTyxFQUNiLFVBQUMsUUFBUSxJQUFLLE9BQUEsS0FBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsT0FBSyxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsRUFBRSxRQUFRLENBQUMsQ0FBQyxFQUEzRSxDQUEyRSxDQUM1RixDQUFDOztRQUxOLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUU7O1NBTXJDO1FBQ0QsT0FBTyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsVUFBQyxLQUFVO1lBRTNCLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxRQUFRLEtBQUssT0FBTzttQkFDekIsS0FBSyxDQUFDLElBQUksS0FBSyxPQUFPO21CQUN0QixLQUFLLENBQUMsUUFBUSxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUM7Z0JBQzdCLE1BQU0sQ0FBQztZQUNYLENBQUM7WUFDRCxNQUFNLENBQUMsS0FBSyxDQUFDO1FBQ2pCLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUNMLHFCQUFDO0FBQUQsQ0EzRkEsQUEyRkMsSUFBQTtBQTNGWSxzQkFBYyxpQkEyRjFCLENBQUEiLCJmaWxlIjoic3JjL2NvcmUvUHJvamVjdFdhdGNoZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlIENvbnRhaW5zIGNvZGUgcmVsYXRlZCB0byB3YXRjaGluZyBwcm9qZWN0IGZvciBjaGFuZ2VzIGFuZCByZWNvbXBpbGluZ1xuICogQGF1dGhvciBUaW11ciBLdXpoYWdhbGl5ZXYgPHRpbS5rdXpoQGdtYWlsLmNvbT5cbiAqIEBjb3B5cmlnaHQgMjAxNlxuICogQGxpY2Vuc2UgR1BMLTMuMFxuICogQHNpbmNlIDAuMi4wXG4gKi9cblxuaW1wb3J0ICogYXMgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCAqIGFzIGNob2tpZGFyIGZyb20gJ2Nob2tpZGFyJztcbmltcG9ydCB7QXNzZXRNYW5hZ2VyLCBBU1NFVF9DSEFOR0VfRVZFTlQsIEFTU0VUX1JFTU9WRV9FVkVOVH0gZnJvbSAnLi9Bc3NldE1hbmFnZXInO1xuaW1wb3J0IHtFdmVudEVtaXR0ZXJ9IGZyb20gJ2V2ZW50cyc7XG5cbi8qKlxuICpcbiAqIEBzaW5jZSAwLjIuMFxuICovXG5leHBvcnQgaW50ZXJmYWNlIElGU0V2ZW50UGFpciB7XG4gICAgZnNFdmVudDogc3RyaW5nO1xuICAgIGJsaXR6RXZlbnQ6IHN0cmluZztcbn1cblxuLyoqXG4gKiBFdmVudCBjYWxsZWQgd2hlbiBhIGZpbGUgaW5zaWRlIHRoZSBidWlsZCBmb2xkZXIgY2hhbmdlc1xuICogQHNpbmNlIDAuMi4wXG4gKi9cbmV4cG9ydCBjb25zdCBCVUlMRF9DSEFOR0VfRVZFTlQgPSAnYnVpbGRDaGFuZ2UnO1xuXG4vKipcbiAqIEBjbGFzcyBQcmVwYXJlcyB0aGUgcHJvamVjdCBmb3IgYnVpbGRpbmcgYW5kIHdhdGNoZXMgaXQgZm9yIGNoYW5nZXNcbiAqIEBzaW5jZSAwLjIuMFxuICovXG5leHBvcnQgY2xhc3MgUHJvamVjdFdhdGNoZXIge1xuICAgIC8qKlxuICAgICAqIExvY2F0aW9uIG9mIHRoZSBjb25maWcgdGhhdCB3aWxsIGJlIHVzZWQgZm9yIGdlbmVyYXRpb24gb2YgdGhlIHdlYnNpdGVcbiAgICAgKiBAc2luY2UgMC4yLjBcbiAgICAgKi9cbiAgICBwcml2YXRlIGNvbmZpZ1BhdGg6IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIFJvb3QgcHJvamVjdCBmb2xkZXIsIHdoaWNoIGNvbnRhaW5zIGBhc3NldHNgLCBgY29udGVudGAsIGB0ZW1wbGF0ZXNgIGV0Yy5cbiAgICAgKiBAc2luY2UgMC4yLjBcbiAgICAgKi9cbiAgICBwcml2YXRlIHByb2plY3RQYXRoOiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBUYXJnZXQgYnVpbGQgcGF0aFxuICAgICAqIEBzaW5jZSAwLjIuMFxuICAgICAqL1xuICAgIHByaXZhdGUgYnVpbGRQYXRoOiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBJbmplY3RlZCBldmVudCBlbWl0dGVyIHJlZmVyZW5jZVxuICAgICAqIEBzaW5jZSAwLjIuMFxuICAgICAqL1xuICAgIHByaXZhdGUgZXZlbnRFbWl0dGVyOiBFdmVudEVtaXR0ZXI7XG5cbiAgICBjb25zdHJ1Y3Rvcihjb25maWdQYXRoOiBzdHJpbmcsIGJ1aWxkUGF0aDogc3RyaW5nLCBldmVudEVtaXR0ZXI6IEV2ZW50RW1pdHRlcikge1xuICAgICAgICB0aGlzLmNvbmZpZ1BhdGggPSBjb25maWdQYXRoO1xuICAgICAgICB0aGlzLnByb2plY3RQYXRoID0gcGF0aC5kaXJuYW1lKGNvbmZpZ1BhdGgpO1xuICAgICAgICB0aGlzLmJ1aWxkUGF0aCA9IGJ1aWxkUGF0aDtcbiAgICAgICAgdGhpcy5ldmVudEVtaXR0ZXIgPSBldmVudEVtaXR0ZXI7XG4gICAgfVxuXG4gICAgcHVibGljIHdhdGNoKCkge1xuICAgICAgICB0aGlzLnNldHVwRmlsZVdhdGNoZXJzKCk7XG4gICAgICAgIGxldCBhc3NldE1hbmFnZXIgPSBuZXcgQXNzZXRNYW5hZ2VyKFxuICAgICAgICAgICAgcGF0aC5qb2luKHRoaXMucHJvamVjdFBhdGgsICdhc3NldHMnKSxcbiAgICAgICAgICAgIHBhdGguam9pbih0aGlzLmJ1aWxkUGF0aCwgJ2Fzc2V0cycpLFxuICAgICAgICAgICAgdGhpcy5ldmVudEVtaXR0ZXJcbiAgICAgICAgKTtcbiAgICAgICAgYXNzZXRNYW5hZ2VyLnNldHVwTGlzdGVuZXJzKCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzZXR1cEZpbGVXYXRjaGVycygpIHtcbiAgICAgICAgdGhpcy5zZXR1cEZpbGVXYXRjaGVyKCdhc3NldHMnLCBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgZnNFdmVudDogJ2FkZCcsXG4gICAgICAgICAgICAgICAgYmxpdHpFdmVudDogQVNTRVRfQ0hBTkdFX0VWRU5ULFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBmc0V2ZW50OiAnYWRkRGlyJyxcbiAgICAgICAgICAgICAgICBibGl0ekV2ZW50OiBBU1NFVF9DSEFOR0VfRVZFTlQsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGZzRXZlbnQ6ICdjaGFuZ2UnLFxuICAgICAgICAgICAgICAgIGJsaXR6RXZlbnQ6IEFTU0VUX0NIQU5HRV9FVkVOVCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgZnNFdmVudDogJ3VubGluaycsXG4gICAgICAgICAgICAgICAgYmxpdHpFdmVudDogQVNTRVRfUkVNT1ZFX0VWRU5ULFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBmc0V2ZW50OiAndW5saW5rRGlyJyxcbiAgICAgICAgICAgICAgICBibGl0ekV2ZW50OiBBU1NFVF9SRU1PVkVfRVZFTlQsXG4gICAgICAgICAgICB9LFxuICAgICAgICBdKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXR1cCB3YXRjaGVycyBmb3IgYSBkaXJlY3RvcnkgdXNpbmcgYW4gZXZlbnQgcGFpclxuICAgICAqIEBzaW5jZSAwLjIuMFxuICAgICAqL1xuICAgIHByaXZhdGUgc2V0dXBGaWxlV2F0Y2hlcihkaXJlY3Rvcnk6IHN0cmluZywgZXZlbnRzOiBJRlNFdmVudFBhaXJbXSkge1xuICAgICAgICBsZXQgZnVsbFBhdGggPSBwYXRoLmpvaW4odGhpcy5wcm9qZWN0UGF0aCwgZGlyZWN0b3J5KTtcbiAgICAgICAgbGV0IHdhdGNoZXIgPSBjaG9raWRhci53YXRjaChmdWxsUGF0aCk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZXZlbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgZXZlbnQgPSBldmVudHNbaV07XG4gICAgICAgICAgICB3YXRjaGVyLm9uKFxuICAgICAgICAgICAgICAgIGV2ZW50LmZzRXZlbnQsXG4gICAgICAgICAgICAgICAgKGZpbGVQYXRoKSA9PiB0aGlzLmV2ZW50RW1pdHRlci5lbWl0KGV2ZW50LmJsaXR6RXZlbnQsIHBhdGgucmVsYXRpdmUoZnVsbFBhdGgsIGZpbGVQYXRoKSlcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgd2F0Y2hlci5vbignZXJyb3InLCAoZXJyb3I6IGFueSkgPT4ge1xuICAgICAgICAgICAgLy8gV29ya2Fyb3VuZCBmb3IgdGhlIFwiV2luZG93cyByb3VnaCBlZGdlXCIgcmVnYXJkaW5nIHRoZSBkZWxldGlvbiBvZiBkaXJlY3Rvcmllc1xuICAgICAgICAgICAgaWYgKHByb2Nlc3MucGxhdGZvcm0gPT09ICd3aW4zMidcbiAgICAgICAgICAgICAgICAmJiBlcnJvci5jb2RlID09PSAnRVBFUk0nXG4gICAgICAgICAgICAgICAgJiYgZXJyb3IuZmlsZW5hbWUgPT09IG51bGwpIHsgLy8gdHNsaW50OmRpc2FibGUtbGluZTpuby1udWxsLWtleXdvcmRcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZXJyb3I7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbiJdfQ==
