"use strict";
var path = require("path");
var chokidar = require("chokidar");
var AssetManager_1 = require("./AssetManager");
exports.BUILD_CHANGE_EVENT = 'buildChange';
var ProjectWatcher = (function () {
    function ProjectWatcher(configPath, buildPath, eventEmitter) {
        this.configPath = configPath;
        this.projectPath = path.dirname(configPath);
        this.buildPath = buildPath;
        this.eventEmitter = eventEmitter;
    }
    ProjectWatcher.prototype.watch = function () {
        this.setupFileWatchers();
        var assetManager = new AssetManager_1.AssetManager(path.join(this.projectPath, 'assets'), path.join(this.buildPath, 'assets'), this.eventEmitter);
        assetManager.setupListeners();
    };
    ProjectWatcher.prototype.setupFileWatchers = function () {
        this.setupFileWatcher('assets', [
            {
                fsEvent: 'add',
                blitzEvent: AssetManager_1.ASSET_CHANGE_EVENT,
            },
            {
                fsEvent: 'addDir',
                blitzEvent: AssetManager_1.ASSET_CHANGE_EVENT,
            },
            {
                fsEvent: 'change',
                blitzEvent: AssetManager_1.ASSET_CHANGE_EVENT,
            },
            {
                fsEvent: 'unlink',
                blitzEvent: AssetManager_1.ASSET_REMOVE_EVENT,
            },
            {
                fsEvent: 'unlinkDir',
                blitzEvent: AssetManager_1.ASSET_REMOVE_EVENT,
            },
        ]);
    };
    ProjectWatcher.prototype.setupFileWatcher = function (directory, events) {
        var _this = this;
        var fullPath = path.join(this.projectPath, directory);
        var watcher = chokidar.watch(fullPath);
        var _loop_1 = function (i) {
            var event_1 = events[i];
            watcher.on(event_1.fsEvent, function (filePath) { return _this.eventEmitter.emit(event_1.blitzEvent, path.relative(fullPath, filePath)); });
        };
        for (var i = 0; i < events.length; i++) {
            _loop_1(i);
        }
        watcher.on('error', function (error) {
            if (process.platform === 'win32'
                && error.code === 'EPERM'
                && error.filename === null) {
                return;
            }
            return error;
        });
    };
    return ProjectWatcher;
}());
exports.ProjectWatcher = ProjectWatcher;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jb3JlL1Byb2plY3RXYXRjaGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFRQSwyQkFBNkI7QUFDN0IsbUNBQXFDO0FBQ3JDLCtDQUFvRjtBQWdCdkUsUUFBQSxrQkFBa0IsR0FBRyxhQUFhLENBQUM7QUFNaEQ7SUF5Qkksd0JBQVksVUFBa0IsRUFBRSxTQUFpQixFQUFFLFlBQTBCO1FBQ3pFLElBQUksQ0FBQyxVQUFVLEdBQUcsVUFBVSxDQUFDO1FBQzdCLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUM1QyxJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztRQUMzQixJQUFJLENBQUMsWUFBWSxHQUFHLFlBQVksQ0FBQztJQUNyQyxDQUFDO0lBRU0sOEJBQUssR0FBWjtRQUNJLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO1FBQ3pCLElBQUksWUFBWSxHQUFHLElBQUksMkJBQVksQ0FDL0IsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLFFBQVEsQ0FBQyxFQUNyQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsUUFBUSxDQUFDLEVBQ25DLElBQUksQ0FBQyxZQUFZLENBQ3BCLENBQUM7UUFDRixZQUFZLENBQUMsY0FBYyxFQUFFLENBQUM7SUFDbEMsQ0FBQztJQUVPLDBDQUFpQixHQUF6QjtRQUNJLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLEVBQUU7WUFDNUI7Z0JBQ0ksT0FBTyxFQUFFLEtBQUs7Z0JBQ2QsVUFBVSxFQUFFLGlDQUFrQjthQUNqQztZQUNEO2dCQUNJLE9BQU8sRUFBRSxRQUFRO2dCQUNqQixVQUFVLEVBQUUsaUNBQWtCO2FBQ2pDO1lBQ0Q7Z0JBQ0ksT0FBTyxFQUFFLFFBQVE7Z0JBQ2pCLFVBQVUsRUFBRSxpQ0FBa0I7YUFDakM7WUFDRDtnQkFDSSxPQUFPLEVBQUUsUUFBUTtnQkFDakIsVUFBVSxFQUFFLGlDQUFrQjthQUNqQztZQUNEO2dCQUNJLE9BQU8sRUFBRSxXQUFXO2dCQUNwQixVQUFVLEVBQUUsaUNBQWtCO2FBQ2pDO1NBQ0osQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQU1PLHlDQUFnQixHQUF4QixVQUF5QixTQUFpQixFQUFFLE1BQXNCO1FBQWxFLGlCQW1CQztRQWxCRyxJQUFJLFFBQVEsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFDdEQsSUFBSSxPQUFPLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztnQ0FDOUIsQ0FBQztZQUNOLElBQUksT0FBSyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN0QixPQUFPLENBQUMsRUFBRSxDQUNOLE9BQUssQ0FBQyxPQUFPLEVBQ2IsVUFBQyxRQUFRLElBQUssT0FBQSxLQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxPQUFLLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFLFFBQVEsQ0FBQyxDQUFDLEVBQTNFLENBQTJFLENBQzVGLENBQUM7UUFDTixDQUFDO1FBTkQsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRTtvQkFBN0IsQ0FBQztTQU1UO1FBQ0QsT0FBTyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsVUFBQyxLQUFVO1lBRTNCLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxRQUFRLEtBQUssT0FBTzttQkFDekIsS0FBSyxDQUFDLElBQUksS0FBSyxPQUFPO21CQUN0QixLQUFLLENBQUMsUUFBUSxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUM7Z0JBQzdCLE1BQU0sQ0FBQztZQUNYLENBQUM7WUFDRCxNQUFNLENBQUMsS0FBSyxDQUFDO1FBQ2pCLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUNMLHFCQUFDO0FBQUQsQ0EzRkEsQUEyRkMsSUFBQTtBQTNGWSx3Q0FBYyIsImZpbGUiOiJzcmMvY29yZS9Qcm9qZWN0V2F0Y2hlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGUgQ29udGFpbnMgY29kZSByZWxhdGVkIHRvIHdhdGNoaW5nIHByb2plY3QgZm9yIGNoYW5nZXMgYW5kIHJlY29tcGlsaW5nXG4gKiBAYXV0aG9yIFRpbXVyIEt1emhhZ2FsaXlldiA8dGltLmt1emhAZ21haWwuY29tPlxuICogQGNvcHlyaWdodCAyMDE2XG4gKiBAbGljZW5zZSBHUEwtMy4wXG4gKiBAc2luY2UgMC4yLjBcbiAqL1xuXG5pbXBvcnQgKiBhcyBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0ICogYXMgY2hva2lkYXIgZnJvbSAnY2hva2lkYXInO1xuaW1wb3J0IHtBc3NldE1hbmFnZXIsIEFTU0VUX0NIQU5HRV9FVkVOVCwgQVNTRVRfUkVNT1ZFX0VWRU5UfSBmcm9tICcuL0Fzc2V0TWFuYWdlcic7XG5pbXBvcnQge0V2ZW50RW1pdHRlcn0gZnJvbSAnZXZlbnRzJztcblxuLyoqXG4gKlxuICogQHNpbmNlIDAuMi4wXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSUZTRXZlbnRQYWlyIHtcbiAgICBmc0V2ZW50OiBzdHJpbmc7XG4gICAgYmxpdHpFdmVudDogc3RyaW5nO1xufVxuXG4vKipcbiAqIEV2ZW50IGNhbGxlZCB3aGVuIGEgZmlsZSBpbnNpZGUgdGhlIGJ1aWxkIGZvbGRlciBjaGFuZ2VzXG4gKiBAc2luY2UgMC4yLjBcbiAqL1xuZXhwb3J0IGNvbnN0IEJVSUxEX0NIQU5HRV9FVkVOVCA9ICdidWlsZENoYW5nZSc7XG5cbi8qKlxuICogQGNsYXNzIFByZXBhcmVzIHRoZSBwcm9qZWN0IGZvciBidWlsZGluZyBhbmQgd2F0Y2hlcyBpdCBmb3IgY2hhbmdlc1xuICogQHNpbmNlIDAuMi4wXG4gKi9cbmV4cG9ydCBjbGFzcyBQcm9qZWN0V2F0Y2hlciB7XG4gICAgLyoqXG4gICAgICogTG9jYXRpb24gb2YgdGhlIGNvbmZpZyB0aGF0IHdpbGwgYmUgdXNlZCBmb3IgZ2VuZXJhdGlvbiBvZiB0aGUgd2Vic2l0ZVxuICAgICAqIEBzaW5jZSAwLjIuMFxuICAgICAqL1xuICAgIHByaXZhdGUgY29uZmlnUGF0aDogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogUm9vdCBwcm9qZWN0IGZvbGRlciwgd2hpY2ggY29udGFpbnMgYGFzc2V0c2AsIGBjb250ZW50YCwgYHRlbXBsYXRlc2AgZXRjLlxuICAgICAqIEBzaW5jZSAwLjIuMFxuICAgICAqL1xuICAgIHByaXZhdGUgcHJvamVjdFBhdGg6IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIFRhcmdldCBidWlsZCBwYXRoXG4gICAgICogQHNpbmNlIDAuMi4wXG4gICAgICovXG4gICAgcHJpdmF0ZSBidWlsZFBhdGg6IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEluamVjdGVkIGV2ZW50IGVtaXR0ZXIgcmVmZXJlbmNlXG4gICAgICogQHNpbmNlIDAuMi4wXG4gICAgICovXG4gICAgcHJpdmF0ZSBldmVudEVtaXR0ZXI6IEV2ZW50RW1pdHRlcjtcblxuICAgIGNvbnN0cnVjdG9yKGNvbmZpZ1BhdGg6IHN0cmluZywgYnVpbGRQYXRoOiBzdHJpbmcsIGV2ZW50RW1pdHRlcjogRXZlbnRFbWl0dGVyKSB7XG4gICAgICAgIHRoaXMuY29uZmlnUGF0aCA9IGNvbmZpZ1BhdGg7XG4gICAgICAgIHRoaXMucHJvamVjdFBhdGggPSBwYXRoLmRpcm5hbWUoY29uZmlnUGF0aCk7XG4gICAgICAgIHRoaXMuYnVpbGRQYXRoID0gYnVpbGRQYXRoO1xuICAgICAgICB0aGlzLmV2ZW50RW1pdHRlciA9IGV2ZW50RW1pdHRlcjtcbiAgICB9XG5cbiAgICBwdWJsaWMgd2F0Y2goKSB7XG4gICAgICAgIHRoaXMuc2V0dXBGaWxlV2F0Y2hlcnMoKTtcbiAgICAgICAgbGV0IGFzc2V0TWFuYWdlciA9IG5ldyBBc3NldE1hbmFnZXIoXG4gICAgICAgICAgICBwYXRoLmpvaW4odGhpcy5wcm9qZWN0UGF0aCwgJ2Fzc2V0cycpLFxuICAgICAgICAgICAgcGF0aC5qb2luKHRoaXMuYnVpbGRQYXRoLCAnYXNzZXRzJyksXG4gICAgICAgICAgICB0aGlzLmV2ZW50RW1pdHRlclxuICAgICAgICApO1xuICAgICAgICBhc3NldE1hbmFnZXIuc2V0dXBMaXN0ZW5lcnMoKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHNldHVwRmlsZVdhdGNoZXJzKCkge1xuICAgICAgICB0aGlzLnNldHVwRmlsZVdhdGNoZXIoJ2Fzc2V0cycsIFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBmc0V2ZW50OiAnYWRkJyxcbiAgICAgICAgICAgICAgICBibGl0ekV2ZW50OiBBU1NFVF9DSEFOR0VfRVZFTlQsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGZzRXZlbnQ6ICdhZGREaXInLFxuICAgICAgICAgICAgICAgIGJsaXR6RXZlbnQ6IEFTU0VUX0NIQU5HRV9FVkVOVCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgZnNFdmVudDogJ2NoYW5nZScsXG4gICAgICAgICAgICAgICAgYmxpdHpFdmVudDogQVNTRVRfQ0hBTkdFX0VWRU5ULFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBmc0V2ZW50OiAndW5saW5rJyxcbiAgICAgICAgICAgICAgICBibGl0ekV2ZW50OiBBU1NFVF9SRU1PVkVfRVZFTlQsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGZzRXZlbnQ6ICd1bmxpbmtEaXInLFxuICAgICAgICAgICAgICAgIGJsaXR6RXZlbnQ6IEFTU0VUX1JFTU9WRV9FVkVOVCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHVwIHdhdGNoZXJzIGZvciBhIGRpcmVjdG9yeSB1c2luZyBhbiBldmVudCBwYWlyXG4gICAgICogQHNpbmNlIDAuMi4wXG4gICAgICovXG4gICAgcHJpdmF0ZSBzZXR1cEZpbGVXYXRjaGVyKGRpcmVjdG9yeTogc3RyaW5nLCBldmVudHM6IElGU0V2ZW50UGFpcltdKSB7XG4gICAgICAgIGxldCBmdWxsUGF0aCA9IHBhdGguam9pbih0aGlzLnByb2plY3RQYXRoLCBkaXJlY3RvcnkpO1xuICAgICAgICBsZXQgd2F0Y2hlciA9IGNob2tpZGFyLndhdGNoKGZ1bGxQYXRoKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBldmVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGxldCBldmVudCA9IGV2ZW50c1tpXTtcbiAgICAgICAgICAgIHdhdGNoZXIub24oXG4gICAgICAgICAgICAgICAgZXZlbnQuZnNFdmVudCxcbiAgICAgICAgICAgICAgICAoZmlsZVBhdGgpID0+IHRoaXMuZXZlbnRFbWl0dGVyLmVtaXQoZXZlbnQuYmxpdHpFdmVudCwgcGF0aC5yZWxhdGl2ZShmdWxsUGF0aCwgZmlsZVBhdGgpKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICB3YXRjaGVyLm9uKCdlcnJvcicsIChlcnJvcjogYW55KSA9PiB7XG4gICAgICAgICAgICAvLyBXb3JrYXJvdW5kIGZvciB0aGUgXCJXaW5kb3dzIHJvdWdoIGVkZ2VcIiByZWdhcmRpbmcgdGhlIGRlbGV0aW9uIG9mIGRpcmVjdG9yaWVzXG4gICAgICAgICAgICBpZiAocHJvY2Vzcy5wbGF0Zm9ybSA9PT0gJ3dpbjMyJ1xuICAgICAgICAgICAgICAgICYmIGVycm9yLmNvZGUgPT09ICdFUEVSTSdcbiAgICAgICAgICAgICAgICAmJiBlcnJvci5maWxlbmFtZSA9PT0gbnVsbCkgeyAvLyB0c2xpbnQ6ZGlzYWJsZS1saW5lOm5vLW51bGwta2V5d29yZFxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBlcnJvcjtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuIl19
