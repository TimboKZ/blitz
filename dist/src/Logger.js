"use strict";
var colors = require("colors");
var Util_1 = require("./Util");
var LogLevel;
(function (LogLevel) {
    LogLevel[LogLevel["Log"] = 0] = "Log";
    LogLevel[LogLevel["Warn"] = 1] = "Warn";
    LogLevel[LogLevel["Error"] = 2] = "Error";
    LogLevel[LogLevel["Debug"] = 3] = "Debug";
})(LogLevel = exports.LogLevel || (exports.LogLevel = {}));
var Logger = (function () {
    function Logger() {
    }
    Logger.brand = function (text) {
        return colors.cyan(text);
    };
    Logger.logWithPrefix = function (prefix, object, print) {
        if (print === void 0) { print = true; }
        var logString = prefix + ' ' + object.toString();
        if (print) {
            return console.log(logString);
        }
        return logString;
    };
    Logger.log = function (object, level, print) {
        if (level === void 0) { level = LogLevel.Log; }
        if (print === void 0) { print = true; }
        if (level === LogLevel.Debug && !global.debug) {
            return;
        }
        if ((level === LogLevel.Log || level === LogLevel.Warn) && !global.verbose) {
            return;
        }
        var prefix;
        switch (level) {
            case LogLevel.Warn:
                prefix = colors.yellow('[Blitz WRN]');
                break;
            case LogLevel.Error:
                prefix = colors.red('[Blitz ERR]');
                break;
            case LogLevel.Debug:
                prefix = colors.magenta('[Blitz DBG]');
                break;
            default:
                prefix = Logger.brand('[Blitz LOG]');
        }
        if (Util_1.Util.isString(object)) {
            object = object.replace(/\n/g, '\n' + (new Array(colors.strip(prefix).length + 2)).join(' '));
        }
        return Logger.logWithPrefix(prefix, object, print);
    };
    Logger.logMany = function (objects, level) {
        if (level === void 0) { level = LogLevel.Log; }
        for (var i = 0; i < objects.length; i++) {
            Logger.log(objects[i], level);
        }
    };
    Logger.split = function (stringWithNewlines) {
        stringWithNewlines = stringWithNewlines.replace(/^(\n)*/g, '');
        stringWithNewlines = stringWithNewlines.replace(/(\n)*$/g, '');
        return stringWithNewlines.split('\n');
    };
    return Logger;
}());
exports.Logger = Logger;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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QyxHQUFHO1FBQ2hFLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO1lBQ3RDLE1BQU0sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ2xDLENBQUM7SUFDTCxDQUFDO0lBTWEsWUFBSyxHQUFuQixVQUFvQixrQkFBMEI7UUFDMUMsa0JBQWtCLEdBQUcsa0JBQWtCLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUMvRCxrQkFBa0IsR0FBRyxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQy9ELE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDMUMsQ0FBQztJQUNMLGFBQUM7QUFBRCxDQXhFQSxBQXdFQyxJQUFBO0FBeEVZLHdCQUFNIiwiZmlsZSI6InNyYy9Mb2dnZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlIENvbnRhaW5zIGNvZGUgcmVsYXRlZCB0byBkYXRhIGxvZ2dpbmdcbiAqIEBhdXRob3IgVGltdXIgS3V6aGFnYWxpeWV2IDx0aW0ua3V6aEBnbWFpbC5jb20+XG4gKiBAY29weXJpZ2h0IDIwMTZcbiAqIEBsaWNlbnNlIEdQTC0zLjBcbiAqIEBzaW5jZSAwLjIuMFxuICovXG5cbmltcG9ydCAqIGFzIGNvbG9ycyBmcm9tICdjb2xvcnMnO1xuaW1wb3J0IHtVdGlsfSBmcm9tICcuL1V0aWwnO1xuXG4vKipcbiAqIExvZyBsZXZlbHMgd2hpY2ggY2hhbmdlIHByZWZpeGVzLCBjb25kaXRpb25zIGZvciBsb2dnaW5nIGFuZCBjb2xvdXJzXG4gKi9cbmV4cG9ydCBlbnVtIExvZ0xldmVsIHtcbiAgICBMb2csXG4gICAgV2FybixcbiAgICBFcnJvcixcbiAgICBEZWJ1Zyxcbn1cblxuLyoqXG4gKiBAY2xhc3MgSG9sZHMgdmFyaW91cyBzdGF0aWMgbWV0aG9kcyBmb3IgbG9nZ2luZyBvZiBkYXRhIGludG8gY29uc29sZVxuICogQHNpbmNlIDAuMi4wXG4gKi9cbmV4cG9ydCBjbGFzcyBMb2dnZXIge1xuICAgIC8qKlxuICAgICAqIENoYW5nZXMgdGhlIGNvbG9yIG9mIHN1cHBsaWVkIHN0cmluZyB0byBCbGl0eiBicmFuZCBjb2xvclxuICAgICAqIEBzaW5jZSAwLjIuMFxuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgYnJhbmQodGV4dDogc3RyaW5nKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIGNvbG9ycy5jeWFuKHRleHQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIExvZ3MgYW4gb2JqZWN0IHRvIGNvbnNvbGUgcHJlZml4aW5nIGl0IHdpdGggdGhlIHNwZWNpZmllZCBzdHJpbmcuXG4gICAgICogQHNpbmNlIDAuMi4wXG4gICAgICovXG4gICAgcHVibGljIHN0YXRpYyBsb2dXaXRoUHJlZml4KHByZWZpeDogc3RyaW5nLCBvYmplY3Q6IGFueSwgcHJpbnQ6IGJvb2xlYW4gPSB0cnVlKTogc3RyaW5nfHZvaWQge1xuICAgICAgICBsZXQgbG9nU3RyaW5nID0gcHJlZml4ICsgJyAnICsgb2JqZWN0LnRvU3RyaW5nKCk7XG4gICAgICAgIGlmIChwcmludCkge1xuICAgICAgICAgICAgcmV0dXJuIGNvbnNvbGUubG9nKGxvZ1N0cmluZyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGxvZ1N0cmluZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBMb2dzIGEgc2luZ2xlIG9iamVjdCBpbnRvIGNvbnNvbGUuIFRyaW1zIG5ld2xpbmUgY2hhcmFjdGVycyBhbmQgaW5kZW50cyBhbGwgcmVtYWluaW5nIG5ldyBsaW5lcyB0byB0aGUgbGVuZ3RoXG4gICAgICogb2YgdGhlIHByZWZpeC5cbiAgICAgKiBAc2luY2UgMC4yLjBcbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIGxvZyhvYmplY3Q6IGFueSwgbGV2ZWw6IExvZ0xldmVsID0gTG9nTGV2ZWwuTG9nLCBwcmludDogYm9vbGVhbiA9IHRydWUpOiBzdHJpbmd8dm9pZCB7XG4gICAgICAgIGlmIChsZXZlbCA9PT0gTG9nTGV2ZWwuRGVidWcgJiYgIWdsb2JhbC5kZWJ1Zykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICgobGV2ZWwgPT09IExvZ0xldmVsLkxvZyB8fCBsZXZlbCA9PT0gTG9nTGV2ZWwuV2FybikgJiYgIWdsb2JhbC52ZXJib3NlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHByZWZpeDtcbiAgICAgICAgc3dpdGNoIChsZXZlbCkge1xuICAgICAgICAgICAgY2FzZSBMb2dMZXZlbC5XYXJuOlxuICAgICAgICAgICAgICAgIHByZWZpeCA9IGNvbG9ycy55ZWxsb3coJ1tCbGl0eiBXUk5dJyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIExvZ0xldmVsLkVycm9yOlxuICAgICAgICAgICAgICAgIHByZWZpeCA9IGNvbG9ycy5yZWQoJ1tCbGl0eiBFUlJdJyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIExvZ0xldmVsLkRlYnVnOlxuICAgICAgICAgICAgICAgIHByZWZpeCA9IGNvbG9ycy5tYWdlbnRhKCdbQmxpdHogREJHXScpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBwcmVmaXggPSBMb2dnZXIuYnJhbmQoJ1tCbGl0eiBMT0ddJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKFV0aWwuaXNTdHJpbmcob2JqZWN0KSkge1xuICAgICAgICAgICAgb2JqZWN0ID0gb2JqZWN0LnJlcGxhY2UoL1xcbi9nLCAnXFxuJyArIChuZXcgQXJyYXkoY29sb3JzLnN0cmlwKHByZWZpeCkubGVuZ3RoICsgMikpLmpvaW4oJyAnKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIExvZ2dlci5sb2dXaXRoUHJlZml4KHByZWZpeCwgb2JqZWN0LCBwcmludCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTG9ncyBhbiBhcnJheSBvZiBvYmplY3RzIHRvIGNvbnNvbGVcbiAgICAgKiBAc2luY2UgMC4yLjBcbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIGxvZ01hbnkob2JqZWN0czogYW55W10sIGxldmVsOiBMb2dMZXZlbCA9IExvZ0xldmVsLkxvZykge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG9iamVjdHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIExvZ2dlci5sb2cob2JqZWN0c1tpXSwgbGV2ZWwpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU3RyaXBzIGxlYWRpbmcgYW5kIHRyYWlsaW5nIG5ld2xpbmVzIGJlZm9yZSBzcGxpdHRpbmcgaW50byBzdWJzdHJpbmdzIHVzaW5nIG5ld2xpbmUgYXMgZGVsaW1pdGVyXG4gICAgICogQHNpbmNlIDAuMi4wXG4gICAgICovXG4gICAgcHVibGljIHN0YXRpYyBzcGxpdChzdHJpbmdXaXRoTmV3bGluZXM6IHN0cmluZyk6IHN0cmluZ1tdIHtcbiAgICAgICAgc3RyaW5nV2l0aE5ld2xpbmVzID0gc3RyaW5nV2l0aE5ld2xpbmVzLnJlcGxhY2UoL14oXFxuKSovZywgJycpO1xuICAgICAgICBzdHJpbmdXaXRoTmV3bGluZXMgPSBzdHJpbmdXaXRoTmV3bGluZXMucmVwbGFjZSgvKFxcbikqJC9nLCAnJyk7XG4gICAgICAgIHJldHVybiBzdHJpbmdXaXRoTmV3bGluZXMuc3BsaXQoJ1xcbicpO1xuICAgIH1cbn1cbiJdfQ==
