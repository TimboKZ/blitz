"use strict";
var colors = require('colors');
var chai_1 = require('chai');
var Logger_1 = require('../../src/Logger');
describe('Logger', function () {
    describe('#brand()', function () {
        it('colours a string', function () {
            var plainString = 'hello world';
            var colouredString = Logger_1.Logger.brand(plainString);
            if (colors.enabled) {
                chai_1.assert.notEqual(colouredString, plainString);
            }
            chai_1.assert.equal(colors.strip(colouredString), plainString);
        });
    });
    describe('#logWithPrefix()', function () {
        var consoleLog = console.log;
        var output = '';
        beforeEach(function (done) {
            console.log = function (message) {
                output = message;
            };
            done();
        });
        afterEach(function (done) {
            console.log = consoleLog;
            done();
        });
        it('adds a prefix to a string', function () {
            Logger_1.Logger.logWithPrefix('hello', 'world');
            chai_1.assert.equal(output, 'hello world');
            chai_1.assert.equal(Logger_1.Logger.logWithPrefix('hello', 'world', false), 'hello world');
        });
    });
    describe('#log()', function () {
        var consoleLog = console.log;
        var output = '';
        beforeEach(function (done) {
            output = '';
            console.log = function (message) {
                output = message;
            };
            done();
        });
        afterEach(function (done) {
            console.log = consoleLog;
            done();
        });
        it('only prints Log and Warn levels if verbose option is on', function () {
            global.verbose = false;
            Logger_1.Logger.log('Hello World', Logger_1.LogLevel.Log);
            chai_1.assert.equal(output, '');
            Logger_1.Logger.log('Hello World', Logger_1.LogLevel.Warn);
            chai_1.assert.equal(output, '');
            global.verbose = true;
            Logger_1.Logger.log('Hello', Logger_1.LogLevel.Log);
            chai_1.assert.notEqual(output, '');
            output = '';
            Logger_1.Logger.log('World', Logger_1.LogLevel.Warn);
            chai_1.assert.notEqual(output, '');
        });
        it('only prints Debug level if debug option is on', function () {
            global.debug = false;
            Logger_1.Logger.log('Hello World', Logger_1.LogLevel.Debug);
            chai_1.assert.equal(output, '');
            global.debug = true;
            Logger_1.Logger.log('Hello', Logger_1.LogLevel.Debug);
            chai_1.assert.notEqual(output, '');
        });
        it('always prints errors', function () {
            global.debug = false;
            global.verbose = false;
            Logger_1.Logger.log('Hello World', Logger_1.LogLevel.Error);
            chai_1.assert.notEqual(output, '');
        });
        it('indents the string after the newline character', function () {
            global.debug = false;
            global.verbose = true;
            Logger_1.Logger.log('Hello\nWorld');
            chai_1.assert.isTrue(/\n(\s)+/g.test(output));
        });
    });
    describe('#logMany()', function () {
        it('logs an array', function () {
            var consoleLog = console.log;
            var output = [];
            console.log = function (message) {
                output.push(message);
            };
            Logger_1.Logger.logMany(['1', '2', '3']);
            chai_1.assert.equal(output.length, 3);
            console.log = consoleLog;
        });
    });
    describe('#split()', function () {
        it('trims newline characters', function () {
            var testString = '\n\n\nHello\n\n\n';
            chai_1.assert.deepEqual(Logger_1.Logger.split(testString), ['Hello']);
        });
        it('breaks string into an array correctly', function () {
            var testString = '\n\n\nHello\nWorld\n\n\n';
            chai_1.assert.deepEqual(Logger_1.Logger.split(testString), ['Hello', 'World']);
        });
    });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
