"use strict";
var fs = require('fs');
var path = require('path');
var fm = require('front-matter');
var Util_1 = require('./Util');
var ContentParser = (function () {
    function ContentParser() {
    }
    ContentParser.parse = function (content) {
        var result;
        var parsedFrontMatter = fm(content);
        if (typeof parsedFrontMatter.attributes === 'string') {
            result = {
                title: parsedFrontMatter.attributes,
            };
        }
        else {
            result = parsedFrontMatter.attributes;
        }
        result.content = Util_1.Util.parseMarkdown(parsedFrontMatter.body);
        return result;
    };
    ContentParser.parseFile = function (filePath) {
        if (this.fileCache[filePath] === undefined) {
            var fileContents = Util_1.Util.getFileContents(filePath);
            var rawData = ContentParser.parse(fileContents);
            rawData.file = path.basename(filePath);
            this.fileCache[filePath] = rawData;
        }
        return this.fileCache[filePath];
    };
    ContentParser.parseDirectory = function (directoryPath) {
        if (this.directoryCache[directoryPath] === undefined) {
            var files = fs.readdirSync(directoryPath);
            var fileCount = files.length;
            var directoryData = [];
            for (var i = 0; i < fileCount; i++) {
                var filePath = path.join(directoryPath, files[i]);
                var fileStats = fs.lstatSync(filePath);
                if (fileStats.isFile()) {
                    var fileData = ContentParser.parseFile(filePath);
                    directoryData.push(fileData);
                }
            }
            this.directoryCache[directoryPath] = directoryData;
        }
        return this.directoryCache[directoryPath];
    };
    ContentParser.directoryCache = {};
    ContentParser.fileCache = {};
    return ContentParser;
}());
exports.ContentParser = ContentParser;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9Db250ZW50UGFyc2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFRQSxJQUFZLEVBQUUsV0FBTSxJQUFJLENBQUMsQ0FBQTtBQUN6QixJQUFZLElBQUksV0FBTSxNQUFNLENBQUMsQ0FBQTtBQUM3QixJQUFZLEVBQUUsV0FBTSxjQUFjLENBQUMsQ0FBQTtBQUNuQyxxQkFBbUIsUUFBUSxDQUFDLENBQUE7QUErQjVCO0lBQUE7SUErRUEsQ0FBQztJQXpEaUIsbUJBQUssR0FBbkIsVUFBb0IsT0FBZTtRQUMvQixJQUFJLE1BQU0sQ0FBQztRQUNYLElBQUksaUJBQWlCLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3BDLEVBQUUsQ0FBQyxDQUFDLE9BQU8saUJBQWlCLENBQUMsVUFBVSxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFDbkQsTUFBTSxHQUFHO2dCQUNMLEtBQUssRUFBRSxpQkFBaUIsQ0FBQyxVQUFVO2FBQ3RDLENBQUM7UUFDTixDQUFDO1FBQUMsSUFBSSxDQUFDLENBQUM7WUFDSixNQUFNLEdBQUcsaUJBQWlCLENBQUMsVUFBVSxDQUFDO1FBQzFDLENBQUM7UUFDRCxNQUFNLENBQUMsT0FBTyxHQUFHLFdBQUksQ0FBQyxhQUFhLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDNUQsTUFBTSxDQUFDLE1BQU0sQ0FBQztJQUNsQixDQUFDO0lBVWEsdUJBQVMsR0FBdkIsVUFBd0IsUUFBZ0I7UUFDcEMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDO1lBQ3pDLElBQUksWUFBWSxHQUFHLFdBQUksQ0FBQyxlQUFlLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDbEQsSUFBSSxPQUFPLEdBQUcsYUFBYSxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQztZQUMvQyxPQUFpQyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQ2xFLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLEdBQUksT0FBaUMsQ0FBQztRQUNsRSxDQUFDO1FBQ0QsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDcEMsQ0FBQztJQVVhLDRCQUFjLEdBQTVCLFVBQTZCLGFBQXFCO1FBQzlDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsYUFBYSxDQUFDLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQztZQUNuRCxJQUFJLEtBQUssR0FBRyxFQUFFLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBQzFDLElBQUksU0FBUyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUM7WUFDN0IsSUFBSSxhQUFhLEdBQVUsRUFBRSxDQUFDO1lBQzlCLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsU0FBUyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUM7Z0JBQ2pDLElBQUksUUFBUSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNsRCxJQUFJLFNBQVMsR0FBRyxFQUFFLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDO2dCQUN2QyxFQUFFLENBQUMsQ0FBQyxTQUFTLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDO29CQUNyQixJQUFJLFFBQVEsR0FBRyxhQUFhLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDO29CQUNqRCxhQUFhLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO2dCQUNqQyxDQUFDO1lBQ0wsQ0FBQztZQUNELElBQUksQ0FBQyxjQUFjLENBQUMsYUFBYSxDQUFDLEdBQUcsYUFBYSxDQUFDO1FBQ3ZELENBQUM7UUFDRCxNQUFNLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUM5QyxDQUFDO0lBekVjLDRCQUFjLEdBQTJCLEVBQUUsQ0FBQztJQU01Qyx1QkFBUyxHQUFzQixFQUFFLENBQUM7SUFvRXJELG9CQUFDO0FBQUQsQ0EvRUEsQUErRUMsSUFBQTtBQS9FWSxxQkFBYSxnQkErRXpCLENBQUEiLCJmaWxlIjoic3JjL0NvbnRlbnRQYXJzZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlIEZpbGUgY29udGFpbmluZyBldmVyeXRoaW5nIHJlbGF0ZWQgdG8gY29udGVudCBwYXJzaW5nXG4gKiBAYXV0aG9yIFRpbXVyIEt1emhhZ2FsaXlldiA8dGltLmt1emhAZ21haWwuY29tPlxuICogQGNvcHlyaWdodCAyMDE2XG4gKiBAbGljZW5zZSBHUEwtMy4wXG4gKiBAc2luY2UgMC4wLjFcbiAqL1xuXG5pbXBvcnQgKiBhcyBmcyBmcm9tICdmcyc7XG5pbXBvcnQgKiBhcyBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0ICogYXMgZm0gZnJvbSAnZnJvbnQtbWF0dGVyJztcbmltcG9ydCB7VXRpbH0gZnJvbSAnLi9VdGlsJztcblxuLyoqXG4gKiBJbnRlcmZhY2UgZm9yIGNvbnRlbnQgY2FjaGVcbiAqIEBzaW5jZSAwLjAuMVxuICovXG5leHBvcnQgaW50ZXJmYWNlIElEaXJlY3RvcnlDb250ZW50Q2FjaGUge1xuICAgIFtwYXRoOiBzdHJpbmddOiBJUHJvY2Vzc2VkRmlsZUNvbnRlbnRbXTtcbn1cbmV4cG9ydCBpbnRlcmZhY2UgSUZpbGVDb250ZW50Q2FjaGUge1xuICAgIFtwYXRoOiBzdHJpbmddOiBJUHJvY2Vzc2VkRmlsZUNvbnRlbnQ7XG59XG5cbi8qKlxuICogSW50ZXJmYWNlcyBmb3IgcHJvY2Vzc2VkIGRhdGFcbiAqIEBzaW5jZSAwLjEuMiBBZGRlZCBgSVByb2Nlc3NlZENvbnRlbnRgXG4gKiBAc2luY2UgMC4wLjFcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJUHJvY2Vzc2VkQ29udGVudCB7XG4gICAgdGl0bGU/OiBzdHJpbmc7XG4gICAgY29udGVudDogc3RyaW5nO1xuICAgIFtrZXk6IHN0cmluZ106IGFueTtcbn1cbmV4cG9ydCBpbnRlcmZhY2UgSVByb2Nlc3NlZEZpbGVDb250ZW50IGV4dGVuZHMgSVByb2Nlc3NlZENvbnRlbnQge1xuICAgIGZpbGU6IHN0cmluZztcbn1cblxuLyoqXG4gKiBAY2xhc3MgQ29sbGVjdGlvbiBvZiBzdGF0aWMgbWV0aG9kcyBmb3IgY29udGVudCBwYXJzaW5nXG4gKiBAc2luY2UgMC4wLjFcbiAqL1xuZXhwb3J0IGNsYXNzIENvbnRlbnRQYXJzZXIge1xuICAgIC8qKlxuICAgICAqIENhY2hlIGZvciB0aGUgY29udGVudHMgb2YgYSBkaXJlY3RvcnlcbiAgICAgKiBAc2luY2UgMC4wLjFcbiAgICAgKi9cbiAgICBwcml2YXRlIHN0YXRpYyBkaXJlY3RvcnlDYWNoZTogSURpcmVjdG9yeUNvbnRlbnRDYWNoZSA9IHt9O1xuXG4gICAgLyoqXG4gICAgICogQ2FjaGUgZm9yIHRoZSBjb250ZW50cyBvZiBhIGZpbGVcbiAgICAgKiBAc2luY2UgMC4wLjFcbiAgICAgKi9cbiAgICBwcml2YXRlIHN0YXRpYyBmaWxlQ2FjaGU6IElGaWxlQ29udGVudENhY2hlID0ge307XG5cbiAgICAvKipcbiAgICAgKiBFeHRyYWN0cyBmcm9udCBtYXR0ZXIgdXNpbmcgdGhlIGBmcm9udC1tYXR0ZXJgIHBhY2thZ2UgYW5kIGFkZHMgYSBgY29udGVudGAgcHJvcGVydHlcbiAgICAgKlxuICAgICAqIElmIFlBTUwgZXh0cmFjdGVkIGZyb20gZnJvbnQgbWF0dGVyIGlzIGEgc3RyaW5nLCBtYWtlIGl0IHRoZSBgdGl0bGVgLlxuICAgICAqXG4gICAgICogQHNlZSBodHRwczovL2dpdGh1Yi5jb20vanhzb24vZnJvbnQtbWF0dGVyXG4gICAgICogQHNpbmNlIDAuMS4yIE5vdyB1c2VzIGBmcm9udC1tYXR0ZXJgIHBhY2thZ2VcbiAgICAgKiBAc2luY2UgMC4wLjFcbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIHBhcnNlKGNvbnRlbnQ6IHN0cmluZyk6IElQcm9jZXNzZWRDb250ZW50IHtcbiAgICAgICAgbGV0IHJlc3VsdDtcbiAgICAgICAgbGV0IHBhcnNlZEZyb250TWF0dGVyID0gZm0oY29udGVudCk7XG4gICAgICAgIGlmICh0eXBlb2YgcGFyc2VkRnJvbnRNYXR0ZXIuYXR0cmlidXRlcyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IHtcbiAgICAgICAgICAgICAgICB0aXRsZTogcGFyc2VkRnJvbnRNYXR0ZXIuYXR0cmlidXRlcyxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXN1bHQgPSBwYXJzZWRGcm9udE1hdHRlci5hdHRyaWJ1dGVzO1xuICAgICAgICB9XG4gICAgICAgIHJlc3VsdC5jb250ZW50ID0gVXRpbC5wYXJzZU1hcmtkb3duKHBhcnNlZEZyb250TWF0dGVyLmJvZHkpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIExvYWRzIGNvbnRlbnQgb2YgdGhlIHN1cHBsaWVkIGZpbGUgYW5kIHBpcGVzIGl0IGludG8gYFV0aWwucGFyc2UoKWAgb3IgcmV0dXJucyBmcm9tIGNhY2hlIGlmIHBvc3NpYmxlLlxuICAgICAqXG4gICAgICogQWRkcyBhIHByb3BlcnR5IGNhbGxlZCBgZmlsZWAgdG8gdGhlIHJhdyBkYXRhLlxuICAgICAqXG4gICAgICogQHNpbmNlIDAuMS4yIFJlbW92ZWQgdHJ5L2NhdGNoIGJsb2Nrc1xuICAgICAqIEBzaW5jZSAwLjAuMVxuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgcGFyc2VGaWxlKGZpbGVQYXRoOiBzdHJpbmcpOiBJUHJvY2Vzc2VkRmlsZUNvbnRlbnQge1xuICAgICAgICBpZiAodGhpcy5maWxlQ2FjaGVbZmlsZVBhdGhdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGxldCBmaWxlQ29udGVudHMgPSBVdGlsLmdldEZpbGVDb250ZW50cyhmaWxlUGF0aCk7XG4gICAgICAgICAgICBsZXQgcmF3RGF0YSA9IENvbnRlbnRQYXJzZXIucGFyc2UoZmlsZUNvbnRlbnRzKTtcbiAgICAgICAgICAgIChyYXdEYXRhIGFzIElQcm9jZXNzZWRGaWxlQ29udGVudCkuZmlsZSA9IHBhdGguYmFzZW5hbWUoZmlsZVBhdGgpO1xuICAgICAgICAgICAgdGhpcy5maWxlQ2FjaGVbZmlsZVBhdGhdID0gKHJhd0RhdGEgYXMgSVByb2Nlc3NlZEZpbGVDb250ZW50KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5maWxlQ2FjaGVbZmlsZVBhdGhdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIExvYWRzIGNvbnRlbnQgb2YgYSBkaXJlY3RvcnksIGFzIGFuIGFycmF5IHdpdGggYW4gZWxlbWVudCBmb3IgZWFjaCBmaWxlLCBvciByZXR1cm5zIGZyb20gY2FjaGUgaWYgcG9zc2libGUuXG4gICAgICpcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIGlzIE5PVCByZWN1cnNpdmUsIGkuZS4gaXQgd2lsbCBOT1QgcGFyc2UgbmVzdGVkIGRpcmVjdG9yaWVzLlxuICAgICAqXG4gICAgICogQHNpbmNlIDAuMS4yIFJlbW92ZWQgdHJ5L2NhdGNoIGJsb2Nrc1xuICAgICAqIEBzaW5jZSAwLjAuMVxuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgcGFyc2VEaXJlY3RvcnkoZGlyZWN0b3J5UGF0aDogc3RyaW5nKTogSVByb2Nlc3NlZEZpbGVDb250ZW50W10ge1xuICAgICAgICBpZiAodGhpcy5kaXJlY3RvcnlDYWNoZVtkaXJlY3RvcnlQYXRoXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBsZXQgZmlsZXMgPSBmcy5yZWFkZGlyU3luYyhkaXJlY3RvcnlQYXRoKTtcbiAgICAgICAgICAgIGxldCBmaWxlQ291bnQgPSBmaWxlcy5sZW5ndGg7XG4gICAgICAgICAgICBsZXQgZGlyZWN0b3J5RGF0YTogYW55W10gPSBbXTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZmlsZUNvdW50OyBpKyspIHtcbiAgICAgICAgICAgICAgICBsZXQgZmlsZVBhdGggPSBwYXRoLmpvaW4oZGlyZWN0b3J5UGF0aCwgZmlsZXNbaV0pO1xuICAgICAgICAgICAgICAgIGxldCBmaWxlU3RhdHMgPSBmcy5sc3RhdFN5bmMoZmlsZVBhdGgpO1xuICAgICAgICAgICAgICAgIGlmIChmaWxlU3RhdHMuaXNGaWxlKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGZpbGVEYXRhID0gQ29udGVudFBhcnNlci5wYXJzZUZpbGUoZmlsZVBhdGgpO1xuICAgICAgICAgICAgICAgICAgICBkaXJlY3RvcnlEYXRhLnB1c2goZmlsZURhdGEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuZGlyZWN0b3J5Q2FjaGVbZGlyZWN0b3J5UGF0aF0gPSBkaXJlY3RvcnlEYXRhO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmRpcmVjdG9yeUNhY2hlW2RpcmVjdG9yeVBhdGhdO1xuICAgIH1cbn1cbiJdfQ==
