"use strict";
var path = require('path');
var fse = require('fs-extra');
var GenericFile = (function () {
    function GenericFile(rootPath, relativePath, name) {
        this.rootPath = rootPath;
        this.relativePath = relativePath;
        this.name = name;
        var relativePathString = path.join.apply(undefined, this.relativePath);
        this.fullPath = path.join(this.rootPath, relativePathString, this.name);
    }
    GenericFile.prototype.read = function () {
        this.contents = fse.readFileSync(this.getFullPath(), 'utf8');
    };
    GenericFile.prototype.write = function () {
        fse.writeFileSync(this.getFullPath(), this.contents);
    };
    GenericFile.prototype.getFullPath = function () {
        return this.fullPath;
    };
    GenericFile.prototype.getName = function () {
        return this.name;
    };
    GenericFile.prototype.getContents = function () {
        return this.contents;
    };
    GenericFile.prototype.setContents = function (contents) {
        this.contents = contents;
    };
    return GenericFile;
}());
exports.GenericFile = GenericFile;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9maWxlcy9HZW5lcmljRmlsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBUUEsSUFBWSxJQUFJLFdBQU0sTUFBTSxDQUFDLENBQUE7QUFDN0IsSUFBWSxHQUFHLFdBQU0sVUFBVSxDQUFDLENBQUE7QUFjaEM7SUFtQ0kscUJBQVksUUFBZ0IsRUFBRSxZQUFzQixFQUFFLElBQVk7UUFDOUQsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7UUFDekIsSUFBSSxDQUFDLFlBQVksR0FBRyxZQUFZLENBQUM7UUFDakMsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxrQkFBa0IsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQ3ZFLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLGtCQUFrQixFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM1RSxDQUFDO0lBTU0sMEJBQUksR0FBWDtRQUNJLElBQUksQ0FBQyxRQUFRLEdBQUcsR0FBRyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDakUsQ0FBQztJQU1NLDJCQUFLLEdBQVo7UUFDSSxHQUFHLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDekQsQ0FBQztJQU1NLGlDQUFXLEdBQWxCO1FBQ0ksTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUM7SUFDekIsQ0FBQztJQUtNLDZCQUFPLEdBQWQ7UUFDSSxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztJQUNyQixDQUFDO0lBS00saUNBQVcsR0FBbEI7UUFDSSxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQztJQUN6QixDQUFDO0lBS00saUNBQVcsR0FBbEIsVUFBbUIsUUFBZ0I7UUFDL0IsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7SUFDN0IsQ0FBQztJQUNMLGtCQUFDO0FBQUQsQ0F2RkEsQUF1RkMsSUFBQTtBQXZGWSxtQkFBVyxjQXVGdkIsQ0FBQSIsImZpbGUiOiJzcmMvZmlsZXMvR2VuZXJpY0ZpbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlIENvbnRhaW5zIGFsbCBnZW5lcmljIEZpbGUgY2xhc3NlcyBhbmQgaW50ZXJmYWNlc1xuICogQGF1dGhvciBUaW11ciBLdXpoYWdhbGl5ZXYgPHRpbS5rdXpoQGdtYWlsLmNvbT5cbiAqIEBjb3B5cmlnaHQgMjAxNlxuICogQGxpY2Vuc2UgR1BMLTMuMFxuICogQHNpbmNlIDAuMi4wXG4gKi9cblxuaW1wb3J0ICogYXMgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCAqIGFzIGZzZSBmcm9tICdmcy1leHRyYSc7XG5cbi8qKlxuICogU3BlY2lmaWVzIHRoYXQgdGhlIGZpbGUgaXMgYWJsZSB0byByZWxvYWQgaXRzZWxmXG4gKiBAc2luY2UgMC4yLjBcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJUmVsb2FkYWJsZSB7XG4gICAgcmVsb2FkOiAoKSA9PiB2b2lkO1xufVxuXG4vKipcbiAqIEBjbGFzcyBBIGNsYXNzLlxuICogQHNpbmNlIDAuMi4wXG4gKi9cbmV4cG9ydCBjbGFzcyBHZW5lcmljRmlsZSB7XG4gICAgLyoqXG4gICAgICogUGF0aCBpbiBhIGZpbGUgc3lzdGVtIHRoYXQgd2lsbCBiZSBhcHBlbmRlZCB0byB0aGUgcmVsYXRpdmUgcGF0aFxuICAgICAqIEBzaW5jZSAwLjIuMFxuICAgICAqL1xuICAgIHByb3RlY3RlZCByb290UGF0aDogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogUGF0aCByZWxhdGl2ZSB0byB0aGUgcm9vdCBwYXRoIHNwZWNpZmllZCBhYm92ZVxuICAgICAqIEBzaW5jZSAwLjIuMFxuICAgICAqL1xuICAgIHByb3RlY3RlZCByZWxhdGl2ZVBhdGg6IHN0cmluZ1tdO1xuXG4gICAgLyoqXG4gICAgICogTmFtZSBvZiB0aGUgZmlsZSwgaW5jbHVkaW5nIGV4dGVuc2lvblxuICAgICAqIEBzaW5jZSAwLjIuMFxuICAgICAqL1xuICAgIHByb3RlY3RlZCBuYW1lOiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBGdWxsIHBhdGggdG8gdGhlIGZpbGVcbiAgICAgKiBAc2luY2UgMC4yLjBcbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgZnVsbFBhdGg6IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIFRoZSBjb250ZW50cyBvZiB0aGUgZmlsZVxuICAgICAqIEBzaW5jZSAwLjIuMFxuICAgICAqL1xuICAgIHByb3RlY3RlZCBjb250ZW50czogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogR2VuZXJpY0ZpbGUgY29uc3RydWN0b3JcbiAgICAgKiBAc2luY2UgMC4yLjBcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcihyb290UGF0aDogc3RyaW5nLCByZWxhdGl2ZVBhdGg6IHN0cmluZ1tdLCBuYW1lOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5yb290UGF0aCA9IHJvb3RQYXRoO1xuICAgICAgICB0aGlzLnJlbGF0aXZlUGF0aCA9IHJlbGF0aXZlUGF0aDtcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICAgICAgbGV0IHJlbGF0aXZlUGF0aFN0cmluZyA9IHBhdGguam9pbi5hcHBseSh1bmRlZmluZWQsIHRoaXMucmVsYXRpdmVQYXRoKTtcbiAgICAgICAgdGhpcy5mdWxsUGF0aCA9IHBhdGguam9pbih0aGlzLnJvb3RQYXRoLCByZWxhdGl2ZVBhdGhTdHJpbmcsIHRoaXMubmFtZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVhZHMgZmlsZSBzeXN0ZW0gdG8gZXh0cmFjdCB0aGUgY29udGVudHMgb2YgdGhlIGZpbGVcbiAgICAgKiBAc2luY2UgMC4yLjBcbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZCgpIHtcbiAgICAgICAgdGhpcy5jb250ZW50cyA9IGZzZS5yZWFkRmlsZVN5bmModGhpcy5nZXRGdWxsUGF0aCgpLCAndXRmOCcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFdyaXRlcyBhIGZpbGUgdG8gdGhlIGZpbGUgc3lzdGVtXG4gICAgICogQHNpbmNlIDAuMi4wXG4gICAgICovXG4gICAgcHVibGljIHdyaXRlKCkge1xuICAgICAgICBmc2Uud3JpdGVGaWxlU3luYyh0aGlzLmdldEZ1bGxQYXRoKCksIHRoaXMuY29udGVudHMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgZnVsbCBwYXRoIHRvIHRoZSBmaWxlXG4gICAgICogQHNpbmNlIDAuMi4wXG4gICAgICovXG4gICAgcHVibGljIGdldEZ1bGxQYXRoKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLmZ1bGxQYXRoO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBzaW5jZSAwLjIuMFxuICAgICAqL1xuICAgIHB1YmxpYyBnZXROYW1lKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLm5hbWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHNpbmNlIDAuMi4wXG4gICAgICovXG4gICAgcHVibGljIGdldENvbnRlbnRzKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbnRlbnRzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBzaW5jZSAwLjIuMFxuICAgICAqL1xuICAgIHB1YmxpYyBzZXRDb250ZW50cyhjb250ZW50czogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuY29udGVudHMgPSBjb250ZW50cztcbiAgICB9XG59XG4iXX0=
