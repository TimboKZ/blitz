"use strict";
var path = require('path');
var fse = require('fs-extra');
var GenericFile = (function () {
    function GenericFile(rootPath, relativePath, name) {
        this.rootPath = rootPath;
        this.relativePathArray = relativePath;
        this.name = name;
        var relativePathString = path.join.apply(undefined, this.relativePathArray);
        this.fullPath = path.join(this.rootPath, relativePathString, this.name);
    }
    GenericFile.prototype.read = function () {
        this.contents = fse.readFileSync(this.getFullPath(), 'utf8');
    };
    GenericFile.prototype.write = function () {
        fse.writeFileSync(this.getFullPath(), this.contents);
    };
    GenericFile.prototype.getFullPath = function () {
        return this.fullPath;
    };
    GenericFile.prototype.getName = function () {
        return this.name;
    };
    GenericFile.prototype.getContents = function () {
        return this.contents;
    };
    GenericFile.prototype.setContents = function (contents) {
        this.contents = contents;
    };
    return GenericFile;
}());
exports.GenericFile = GenericFile;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9maWxlcy9HZW5lcmljRmlsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBUUEsSUFBWSxJQUFJLFdBQU0sTUFBTSxDQUFDLENBQUE7QUFDN0IsSUFBWSxHQUFHLFdBQU0sVUFBVSxDQUFDLENBQUE7QUFNaEM7SUFtQ0kscUJBQVksUUFBZ0IsRUFBRSxZQUFzQixFQUFFLElBQVk7UUFDOUQsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7UUFDekIsSUFBSSxDQUFDLGlCQUFpQixHQUFHLFlBQVksQ0FBQztRQUN0QyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUNqQixJQUFJLGtCQUFrQixHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQztRQUM1RSxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxrQkFBa0IsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDNUUsQ0FBQztJQU1NLDBCQUFJLEdBQVg7UUFDSSxJQUFJLENBQUMsUUFBUSxHQUFHLEdBQUcsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ2pFLENBQUM7SUFNTSwyQkFBSyxHQUFaO1FBQ0ksR0FBRyxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ3pELENBQUM7SUFNTSxpQ0FBVyxHQUFsQjtRQUNJLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDO0lBQ3pCLENBQUM7SUFLTSw2QkFBTyxHQUFkO1FBQ0ksTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7SUFDckIsQ0FBQztJQUtNLGlDQUFXLEdBQWxCO1FBQ0ksTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUM7SUFDekIsQ0FBQztJQUtNLGlDQUFXLEdBQWxCLFVBQW1CLFFBQWdCO1FBQy9CLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO0lBQzdCLENBQUM7SUFDTCxrQkFBQztBQUFELENBdkZBLEFBdUZDLElBQUE7QUF2RlksbUJBQVcsY0F1RnZCLENBQUEiLCJmaWxlIjoic3JjL2ZpbGVzL0dlbmVyaWNGaWxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZSBDb250YWlucyBhbGwgZ2VuZXJpYyBGaWxlIGNsYXNzZXMgYW5kIGludGVyZmFjZXNcbiAqIEBhdXRob3IgVGltdXIgS3V6aGFnYWxpeWV2IDx0aW0ua3V6aEBnbWFpbC5jb20+XG4gKiBAY29weXJpZ2h0IDIwMTZcbiAqIEBsaWNlbnNlIEdQTC0zLjBcbiAqIEBzaW5jZSAwLjIuMFxuICovXG5cbmltcG9ydCAqIGFzIHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgKiBhcyBmc2UgZnJvbSAnZnMtZXh0cmEnO1xuXG4vKipcbiAqIEBjbGFzcyBBIGNsYXNzLlxuICogQHNpbmNlIDAuMi4wXG4gKi9cbmV4cG9ydCBjbGFzcyBHZW5lcmljRmlsZSB7XG4gICAgLyoqXG4gICAgICogUGF0aCBpbiBhIGZpbGUgc3lzdGVtIHRoYXQgd2lsbCBiZSBhcHBlbmRlZCB0byB0aGUgcmVsYXRpdmUgcGF0aFxuICAgICAqIEBzaW5jZSAwLjIuMFxuICAgICAqL1xuICAgIHByb3RlY3RlZCByb290UGF0aDogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogUGF0aCByZWxhdGl2ZSB0byB0aGUgcm9vdCBwYXRoIHNwZWNpZmllZCBhYm92ZVxuICAgICAqIEBzaW5jZSAwLjIuMFxuICAgICAqL1xuICAgIHByb3RlY3RlZCByZWxhdGl2ZVBhdGhBcnJheTogc3RyaW5nW107XG5cbiAgICAvKipcbiAgICAgKiBOYW1lIG9mIHRoZSBmaWxlLCBpbmNsdWRpbmcgZXh0ZW5zaW9uXG4gICAgICogQHNpbmNlIDAuMi4wXG4gICAgICovXG4gICAgcHJvdGVjdGVkIG5hbWU6IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEZ1bGwgcGF0aCB0byB0aGUgZmlsZVxuICAgICAqIEBzaW5jZSAwLjIuMFxuICAgICAqL1xuICAgIHByb3RlY3RlZCBmdWxsUGF0aDogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGNvbnRlbnRzIG9mIHRoZSBmaWxlXG4gICAgICogQHNpbmNlIDAuMi4wXG4gICAgICovXG4gICAgcHJvdGVjdGVkIGNvbnRlbnRzOiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBHZW5lcmljRmlsZSBjb25zdHJ1Y3RvclxuICAgICAqIEBzaW5jZSAwLjIuMFxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHJvb3RQYXRoOiBzdHJpbmcsIHJlbGF0aXZlUGF0aDogc3RyaW5nW10sIG5hbWU6IHN0cmluZykge1xuICAgICAgICB0aGlzLnJvb3RQYXRoID0gcm9vdFBhdGg7XG4gICAgICAgIHRoaXMucmVsYXRpdmVQYXRoQXJyYXkgPSByZWxhdGl2ZVBhdGg7XG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgICAgIGxldCByZWxhdGl2ZVBhdGhTdHJpbmcgPSBwYXRoLmpvaW4uYXBwbHkodW5kZWZpbmVkLCB0aGlzLnJlbGF0aXZlUGF0aEFycmF5KTtcbiAgICAgICAgdGhpcy5mdWxsUGF0aCA9IHBhdGguam9pbih0aGlzLnJvb3RQYXRoLCByZWxhdGl2ZVBhdGhTdHJpbmcsIHRoaXMubmFtZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVhZHMgZmlsZSBzeXN0ZW0gdG8gZXh0cmFjdCB0aGUgY29udGVudHMgb2YgdGhlIGZpbGVcbiAgICAgKiBAc2luY2UgMC4yLjBcbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZCgpIHtcbiAgICAgICAgdGhpcy5jb250ZW50cyA9IGZzZS5yZWFkRmlsZVN5bmModGhpcy5nZXRGdWxsUGF0aCgpLCAndXRmOCcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFdyaXRlcyBhIGZpbGUgdG8gdGhlIGZpbGUgc3lzdGVtXG4gICAgICogQHNpbmNlIDAuMi4wXG4gICAgICovXG4gICAgcHVibGljIHdyaXRlKCkge1xuICAgICAgICBmc2Uud3JpdGVGaWxlU3luYyh0aGlzLmdldEZ1bGxQYXRoKCksIHRoaXMuY29udGVudHMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgZnVsbCBwYXRoIHRvIHRoZSBmaWxlXG4gICAgICogQHNpbmNlIDAuMi4wXG4gICAgICovXG4gICAgcHVibGljIGdldEZ1bGxQYXRoKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLmZ1bGxQYXRoO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBzaW5jZSAwLjIuMFxuICAgICAqL1xuICAgIHB1YmxpYyBnZXROYW1lKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLm5hbWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHNpbmNlIDAuMi4wXG4gICAgICovXG4gICAgcHVibGljIGdldENvbnRlbnRzKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbnRlbnRzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBzaW5jZSAwLjIuMFxuICAgICAqL1xuICAgIHB1YmxpYyBzZXRDb250ZW50cyhjb250ZW50czogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuY29udGVudHMgPSBjb250ZW50cztcbiAgICB9XG59XG4iXX0=
