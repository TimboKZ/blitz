"use strict";
var chai_1 = require('chai');
var StringHelper_1 = require('../../../src/helpers/StringHelper');
describe('StringHelper', function () {
    describe('#isString()', function () {
        it('correctly identifies strings', function () {
            chai_1.assert.isTrue(StringHelper_1.StringHelper.isString(''));
            chai_1.assert.isTrue(StringHelper_1.StringHelper.isString('hello'));
        });
        it('correctly identifies non-string objects', function () {
            chai_1.assert.isFalse(StringHelper_1.StringHelper.isString(null));
            chai_1.assert.isFalse(StringHelper_1.StringHelper.isString(undefined));
            chai_1.assert.isFalse(StringHelper_1.StringHelper.isString({}));
            chai_1.assert.isFalse(StringHelper_1.StringHelper.isString([]));
        });
    });
    describe('#isString()', function () {
        it('generates strings of the right length', function () {
            chai_1.assert.equal(StringHelper_1.StringHelper.randomString(5).length, 5);
            chai_1.assert.equal(StringHelper_1.StringHelper.randomString(10).length, 10);
            chai_1.assert.equal(StringHelper_1.StringHelper.randomString(15).length, 15);
        });
        it('generates different strings', function () {
            var first = StringHelper_1.StringHelper.randomString(8);
            var second = StringHelper_1.StringHelper.randomString(8);
            var third = StringHelper_1.StringHelper.randomString(8);
            chai_1.assert.notEqual(first, second);
            chai_1.assert.notEqual(first, third);
            chai_1.assert.notEqual(second, third);
        });
    });
    describe('#stringify()', function () {
        it('leaves string untouched', function () {
            chai_1.assert.equal(StringHelper_1.StringHelper.stringify(''), '');
            chai_1.assert.equal(StringHelper_1.StringHelper.stringify('hello'), 'hello');
        });
        it('converts non-string objects to their JSON representation', function () {
            chai_1.assert.equal(StringHelper_1.StringHelper.stringify(null), JSON.stringify(null));
            chai_1.assert.equal(StringHelper_1.StringHelper.stringify({}), JSON.stringify({}));
            chai_1.assert.equal(StringHelper_1.StringHelper.stringify(['hello']), JSON.stringify(['hello']));
        });
    });
    describe('#isEmpty()', function () {
        it('correctly identifies empty strings', function () {
            chai_1.assert.isTrue(StringHelper_1.StringHelper.isEmpty(null));
            chai_1.assert.isTrue(StringHelper_1.StringHelper.isEmpty(undefined));
            chai_1.assert.isTrue(StringHelper_1.StringHelper.isEmpty(''));
        });
        it('correctly identifies non-empty strings', function () {
            chai_1.assert.isFalse(StringHelper_1.StringHelper.isEmpty('hello'));
        });
    });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3Rlc3QvdW5pdC9oZWxwZXJzL1N0cmluZ0hlbHBlclRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQVFBLHFCQUFxQixNQUFNLENBQUMsQ0FBQTtBQUM1Qiw2QkFBMkIsbUNBQW1DLENBQUMsQ0FBQTtBQUUvRCxRQUFRLENBQUMsY0FBYyxFQUFFO0lBQ3JCLFFBQVEsQ0FBQyxhQUFhLEVBQUU7UUFDcEIsRUFBRSxDQUFDLDhCQUE4QixFQUFFO1lBQy9CLGFBQU0sQ0FBQyxNQUFNLENBQUMsMkJBQVksQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUN6QyxhQUFNLENBQUMsTUFBTSxDQUFDLDJCQUFZLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7UUFDbEQsQ0FBQyxDQUFDLENBQUM7UUFDSCxFQUFFLENBQUMseUNBQXlDLEVBQUU7WUFDMUMsYUFBTSxDQUFDLE9BQU8sQ0FBQywyQkFBWSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQzVDLGFBQU0sQ0FBQyxPQUFPLENBQUMsMkJBQVksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztZQUNqRCxhQUFNLENBQUMsT0FBTyxDQUFDLDJCQUFZLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDMUMsYUFBTSxDQUFDLE9BQU8sQ0FBQywyQkFBWSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQzlDLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQyxDQUFDLENBQUM7SUFDSCxRQUFRLENBQUMsYUFBYSxFQUFFO1FBQ3BCLEVBQUUsQ0FBQyx1Q0FBdUMsRUFBRTtZQUN4QyxhQUFNLENBQUMsS0FBSyxDQUFDLDJCQUFZLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQztZQUNyRCxhQUFNLENBQUMsS0FBSyxDQUFDLDJCQUFZLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsQ0FBQztZQUN2RCxhQUFNLENBQUMsS0FBSyxDQUFDLDJCQUFZLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsQ0FBQztRQUMzRCxDQUFDLENBQUMsQ0FBQztRQUNILEVBQUUsQ0FBQyw2QkFBNkIsRUFBRTtZQUM5QixJQUFJLEtBQUssR0FBRywyQkFBWSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN6QyxJQUFJLE1BQU0sR0FBRywyQkFBWSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUMxQyxJQUFJLEtBQUssR0FBRywyQkFBWSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN6QyxhQUFNLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQztZQUMvQixhQUFNLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQztZQUM5QixhQUFNLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsQ0FBQztRQUNuQyxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUMsQ0FBQyxDQUFDO0lBQ0gsUUFBUSxDQUFDLGNBQWMsRUFBRTtRQUNyQixFQUFFLENBQUMseUJBQXlCLEVBQUU7WUFDMUIsYUFBTSxDQUFDLEtBQUssQ0FBQywyQkFBWSxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztZQUM3QyxhQUFNLENBQUMsS0FBSyxDQUFDLDJCQUFZLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQzNELENBQUMsQ0FBQyxDQUFDO1FBQ0gsRUFBRSxDQUFDLDBEQUEwRCxFQUFFO1lBQzNELGFBQU0sQ0FBQyxLQUFLLENBQUMsMkJBQVksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQ2pFLGFBQU0sQ0FBQyxLQUFLLENBQUMsMkJBQVksQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQzdELGFBQU0sQ0FBQyxLQUFLLENBQUMsMkJBQVksQ0FBQyxTQUFTLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDL0UsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDLENBQUMsQ0FBQztJQUNILFFBQVEsQ0FBQyxZQUFZLEVBQUU7UUFDbkIsRUFBRSxDQUFDLG9DQUFvQyxFQUFFO1lBQ3JDLGFBQU0sQ0FBQyxNQUFNLENBQUMsMkJBQVksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUMxQyxhQUFNLENBQUMsTUFBTSxDQUFDLDJCQUFZLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7WUFDL0MsYUFBTSxDQUFDLE1BQU0sQ0FBQywyQkFBWSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQzVDLENBQUMsQ0FBQyxDQUFDO1FBQ0gsRUFBRSxDQUFDLHdDQUF3QyxFQUFFO1lBQ3pDLGFBQU0sQ0FBQyxPQUFPLENBQUMsMkJBQVksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztRQUNsRCxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyxDQUFDLENBQUMiLCJmaWxlIjoidGVzdC91bml0L2hlbHBlcnMvU3RyaW5nSGVscGVyVGVzdC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGUgU3RyaW5nSGVscGVyIHRlc3RzXG4gKiBAYXV0aG9yIFRpbXVyIEt1emhhZ2FsaXlldiA8dGltLmt1emhAZ21haWwuY29tPlxuICogQGNvcHlyaWdodCAyMDE2XG4gKiBAbGljZW5zZSBHUEwtMy4wXG4gKiBAc2luY2UgMC4wLjFcbiAqL1xuXG5pbXBvcnQge2Fzc2VydH0gZnJvbSAnY2hhaSc7XG5pbXBvcnQge1N0cmluZ0hlbHBlcn0gZnJvbSAnLi4vLi4vLi4vc3JjL2hlbHBlcnMvU3RyaW5nSGVscGVyJztcblxuZGVzY3JpYmUoJ1N0cmluZ0hlbHBlcicsICgpID0+IHtcbiAgICBkZXNjcmliZSgnI2lzU3RyaW5nKCknLCAoKSA9PiB7XG4gICAgICAgIGl0KCdjb3JyZWN0bHkgaWRlbnRpZmllcyBzdHJpbmdzJywgKCkgPT4ge1xuICAgICAgICAgICAgYXNzZXJ0LmlzVHJ1ZShTdHJpbmdIZWxwZXIuaXNTdHJpbmcoJycpKTtcbiAgICAgICAgICAgIGFzc2VydC5pc1RydWUoU3RyaW5nSGVscGVyLmlzU3RyaW5nKCdoZWxsbycpKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGl0KCdjb3JyZWN0bHkgaWRlbnRpZmllcyBub24tc3RyaW5nIG9iamVjdHMnLCAoKSA9PiB7XG4gICAgICAgICAgICBhc3NlcnQuaXNGYWxzZShTdHJpbmdIZWxwZXIuaXNTdHJpbmcobnVsbCkpOyAvLyB0c2xpbnQ6ZGlzYWJsZS1saW5lOm5vLW51bGwta2V5d29yZFxuICAgICAgICAgICAgYXNzZXJ0LmlzRmFsc2UoU3RyaW5nSGVscGVyLmlzU3RyaW5nKHVuZGVmaW5lZCkpO1xuICAgICAgICAgICAgYXNzZXJ0LmlzRmFsc2UoU3RyaW5nSGVscGVyLmlzU3RyaW5nKHt9KSk7XG4gICAgICAgICAgICBhc3NlcnQuaXNGYWxzZShTdHJpbmdIZWxwZXIuaXNTdHJpbmcoW10pKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG4gICAgZGVzY3JpYmUoJyNpc1N0cmluZygpJywgKCkgPT4ge1xuICAgICAgICBpdCgnZ2VuZXJhdGVzIHN0cmluZ3Mgb2YgdGhlIHJpZ2h0IGxlbmd0aCcsICgpID0+IHtcbiAgICAgICAgICAgIGFzc2VydC5lcXVhbChTdHJpbmdIZWxwZXIucmFuZG9tU3RyaW5nKDUpLmxlbmd0aCwgNSk7XG4gICAgICAgICAgICBhc3NlcnQuZXF1YWwoU3RyaW5nSGVscGVyLnJhbmRvbVN0cmluZygxMCkubGVuZ3RoLCAxMCk7XG4gICAgICAgICAgICBhc3NlcnQuZXF1YWwoU3RyaW5nSGVscGVyLnJhbmRvbVN0cmluZygxNSkubGVuZ3RoLCAxNSk7XG4gICAgICAgIH0pO1xuICAgICAgICBpdCgnZ2VuZXJhdGVzIGRpZmZlcmVudCBzdHJpbmdzJywgKCkgPT4ge1xuICAgICAgICAgICAgbGV0IGZpcnN0ID0gU3RyaW5nSGVscGVyLnJhbmRvbVN0cmluZyg4KTtcbiAgICAgICAgICAgIGxldCBzZWNvbmQgPSBTdHJpbmdIZWxwZXIucmFuZG9tU3RyaW5nKDgpO1xuICAgICAgICAgICAgbGV0IHRoaXJkID0gU3RyaW5nSGVscGVyLnJhbmRvbVN0cmluZyg4KTtcbiAgICAgICAgICAgIGFzc2VydC5ub3RFcXVhbChmaXJzdCwgc2Vjb25kKTtcbiAgICAgICAgICAgIGFzc2VydC5ub3RFcXVhbChmaXJzdCwgdGhpcmQpO1xuICAgICAgICAgICAgYXNzZXJ0Lm5vdEVxdWFsKHNlY29uZCwgdGhpcmQpO1xuICAgICAgICB9KTtcbiAgICB9KTtcbiAgICBkZXNjcmliZSgnI3N0cmluZ2lmeSgpJywgKCkgPT4ge1xuICAgICAgICBpdCgnbGVhdmVzIHN0cmluZyB1bnRvdWNoZWQnLCAoKSA9PiB7XG4gICAgICAgICAgICBhc3NlcnQuZXF1YWwoU3RyaW5nSGVscGVyLnN0cmluZ2lmeSgnJyksICcnKTtcbiAgICAgICAgICAgIGFzc2VydC5lcXVhbChTdHJpbmdIZWxwZXIuc3RyaW5naWZ5KCdoZWxsbycpLCAnaGVsbG8nKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGl0KCdjb252ZXJ0cyBub24tc3RyaW5nIG9iamVjdHMgdG8gdGhlaXIgSlNPTiByZXByZXNlbnRhdGlvbicsICgpID0+IHtcbiAgICAgICAgICAgIGFzc2VydC5lcXVhbChTdHJpbmdIZWxwZXIuc3RyaW5naWZ5KG51bGwpLCBKU09OLnN0cmluZ2lmeShudWxsKSk7IC8vIHRzbGludDpkaXNhYmxlLWxpbmU6bm8tbnVsbC1rZXl3b3JkXG4gICAgICAgICAgICBhc3NlcnQuZXF1YWwoU3RyaW5nSGVscGVyLnN0cmluZ2lmeSh7fSksIEpTT04uc3RyaW5naWZ5KHt9KSk7XG4gICAgICAgICAgICBhc3NlcnQuZXF1YWwoU3RyaW5nSGVscGVyLnN0cmluZ2lmeShbJ2hlbGxvJ10pLCBKU09OLnN0cmluZ2lmeShbJ2hlbGxvJ10pKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG4gICAgZGVzY3JpYmUoJyNpc0VtcHR5KCknLCAoKSA9PiB7XG4gICAgICAgIGl0KCdjb3JyZWN0bHkgaWRlbnRpZmllcyBlbXB0eSBzdHJpbmdzJywgKCkgPT4ge1xuICAgICAgICAgICAgYXNzZXJ0LmlzVHJ1ZShTdHJpbmdIZWxwZXIuaXNFbXB0eShudWxsKSk7IC8vIHRzbGludDpkaXNhYmxlLWxpbmU6bm8tbnVsbC1rZXl3b3JkXG4gICAgICAgICAgICBhc3NlcnQuaXNUcnVlKFN0cmluZ0hlbHBlci5pc0VtcHR5KHVuZGVmaW5lZCkpO1xuICAgICAgICAgICAgYXNzZXJ0LmlzVHJ1ZShTdHJpbmdIZWxwZXIuaXNFbXB0eSgnJykpO1xuICAgICAgICB9KTtcbiAgICAgICAgaXQoJ2NvcnJlY3RseSBpZGVudGlmaWVzIG5vbi1lbXB0eSBzdHJpbmdzJywgKCkgPT4ge1xuICAgICAgICAgICAgYXNzZXJ0LmlzRmFsc2UoU3RyaW5nSGVscGVyLmlzRW1wdHkoJ2hlbGxvJykpO1xuICAgICAgICB9KTtcbiAgICB9KTtcbn0pO1xuIl19
