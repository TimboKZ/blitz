"use strict";
var chai_1 = require('chai');
var events_1 = require('events');
var EventHelper_1 = require('../../../src/helpers/EventHelper');
describe('EventHelper', function () {
    describe('#addListeners()', function () {
        it('correctly adds listeners to an event emitter', function () {
            var eventEmitter = new events_1.EventEmitter();
            var pairs = [
                {
                    event: 'hello',
                    listener: function () { return true; },
                },
                {
                    event: 'world',
                    listener: function () { return true; },
                },
            ];
            chai_1.assert.equal(eventEmitter.listenerCount('hello'), 0);
            chai_1.assert.equal(eventEmitter.listenerCount('world'), 0);
            EventHelper_1.EventHelper.addListeners(eventEmitter, pairs);
            chai_1.assert.equal(eventEmitter.listenerCount('hello'), 1);
            chai_1.assert.equal(eventEmitter.listenerCount('world'), 1);
        });
    });
    describe('#removeListeners()', function () {
        it('correctly removes listeners from an event emitter', function () {
            var eventEmitter = new events_1.EventEmitter();
            var pairs = [
                {
                    event: 'hello',
                    listener: function () { return true; },
                },
                {
                    event: 'world',
                    listener: function () { return true; },
                },
            ];
            EventHelper_1.EventHelper.addListeners(eventEmitter, pairs);
            chai_1.assert.equal(eventEmitter.listenerCount('hello'), 1);
            chai_1.assert.equal(eventEmitter.listenerCount('world'), 1);
            EventHelper_1.EventHelper.removeListeners(eventEmitter, pairs);
            chai_1.assert.equal(eventEmitter.listenerCount('hello'), 0);
            chai_1.assert.equal(eventEmitter.listenerCount('world'), 0);
        });
    });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3Rlc3QvdW5pdC9oZWxwZXJzL0V2ZW50SGVscGVyVGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBUUEscUJBQXFCLE1BQU0sQ0FBQyxDQUFBO0FBQzVCLHVCQUEyQixRQUFRLENBQUMsQ0FBQTtBQUNwQyw0QkFBOEMsa0NBQWtDLENBQUMsQ0FBQTtBQUVqRixRQUFRLENBQUMsYUFBYSxFQUFFO0lBQ3BCLFFBQVEsQ0FBQyxpQkFBaUIsRUFBRTtRQUN4QixFQUFFLENBQUMsOENBQThDLEVBQUU7WUFDL0MsSUFBSSxZQUFZLEdBQUcsSUFBSSxxQkFBWSxFQUFFLENBQUM7WUFDdEMsSUFBSSxLQUFLLEdBQXlCO2dCQUM5QjtvQkFDSSxLQUFLLEVBQUUsT0FBTztvQkFDZCxRQUFRLEVBQUUsY0FBTSxPQUFBLElBQUksRUFBSixDQUFJO2lCQUN2QjtnQkFDRDtvQkFDSSxLQUFLLEVBQUUsT0FBTztvQkFDZCxRQUFRLEVBQUUsY0FBTSxPQUFBLElBQUksRUFBSixDQUFJO2lCQUN2QjthQUNKLENBQUM7WUFDRixhQUFNLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDckQsYUFBTSxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQ3JELHlCQUFXLENBQUMsWUFBWSxDQUFDLFlBQVksRUFBRSxLQUFLLENBQUMsQ0FBQztZQUM5QyxhQUFNLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDckQsYUFBTSxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ3pELENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQyxDQUFDLENBQUM7SUFDSCxRQUFRLENBQUMsb0JBQW9CLEVBQUU7UUFDM0IsRUFBRSxDQUFDLG1EQUFtRCxFQUFFO1lBQ3BELElBQUksWUFBWSxHQUFHLElBQUkscUJBQVksRUFBRSxDQUFDO1lBQ3RDLElBQUksS0FBSyxHQUF5QjtnQkFDOUI7b0JBQ0ksS0FBSyxFQUFFLE9BQU87b0JBQ2QsUUFBUSxFQUFFLGNBQU0sT0FBQSxJQUFJLEVBQUosQ0FBSTtpQkFDdkI7Z0JBQ0Q7b0JBQ0ksS0FBSyxFQUFFLE9BQU87b0JBQ2QsUUFBUSxFQUFFLGNBQU0sT0FBQSxJQUFJLEVBQUosQ0FBSTtpQkFDdkI7YUFDSixDQUFDO1lBQ0YseUJBQVcsQ0FBQyxZQUFZLENBQUMsWUFBWSxFQUFFLEtBQUssQ0FBQyxDQUFDO1lBQzlDLGFBQU0sQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUNyRCxhQUFNLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDckQseUJBQVcsQ0FBQyxlQUFlLENBQUMsWUFBWSxFQUFFLEtBQUssQ0FBQyxDQUFDO1lBQ2pELGFBQU0sQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUNyRCxhQUFNLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDekQsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDLENBQUMsQ0FBQztBQUNQLENBQUMsQ0FBQyxDQUFDIiwiZmlsZSI6InRlc3QvdW5pdC9oZWxwZXJzL0V2ZW50SGVscGVyVGVzdC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGUgRXZlbXRIZWxwZXIgdGVzdHNcbiAqIEBhdXRob3IgVGltdXIgS3V6aGFnYWxpeWV2IDx0aW0ua3V6aEBnbWFpbC5jb20+XG4gKiBAY29weXJpZ2h0IDIwMTZcbiAqIEBsaWNlbnNlIEdQTC0zLjBcbiAqIEBzaW5jZSAwLjIuMFxuICovXG5cbmltcG9ydCB7YXNzZXJ0fSBmcm9tICdjaGFpJztcbmltcG9ydCB7RXZlbnRFbWl0dGVyfSBmcm9tICdldmVudHMnO1xuaW1wb3J0IHtJRXZlbnRMaXN0ZW5lclBhaXIsIEV2ZW50SGVscGVyfSBmcm9tICcuLi8uLi8uLi9zcmMvaGVscGVycy9FdmVudEhlbHBlcic7XG5cbmRlc2NyaWJlKCdFdmVudEhlbHBlcicsICgpID0+IHtcbiAgICBkZXNjcmliZSgnI2FkZExpc3RlbmVycygpJywgKCkgPT4ge1xuICAgICAgICBpdCgnY29ycmVjdGx5IGFkZHMgbGlzdGVuZXJzIHRvIGFuIGV2ZW50IGVtaXR0ZXInLCAoKSA9PiB7XG4gICAgICAgICAgICBsZXQgZXZlbnRFbWl0dGVyID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICAgICAgICAgICAgbGV0IHBhaXJzOiBJRXZlbnRMaXN0ZW5lclBhaXJbXSA9IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGV2ZW50OiAnaGVsbG8nLFxuICAgICAgICAgICAgICAgICAgICBsaXN0ZW5lcjogKCkgPT4gdHJ1ZSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgZXZlbnQ6ICd3b3JsZCcsXG4gICAgICAgICAgICAgICAgICAgIGxpc3RlbmVyOiAoKSA9PiB0cnVlLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBdO1xuICAgICAgICAgICAgYXNzZXJ0LmVxdWFsKGV2ZW50RW1pdHRlci5saXN0ZW5lckNvdW50KCdoZWxsbycpLCAwKTtcbiAgICAgICAgICAgIGFzc2VydC5lcXVhbChldmVudEVtaXR0ZXIubGlzdGVuZXJDb3VudCgnd29ybGQnKSwgMCk7XG4gICAgICAgICAgICBFdmVudEhlbHBlci5hZGRMaXN0ZW5lcnMoZXZlbnRFbWl0dGVyLCBwYWlycyk7XG4gICAgICAgICAgICBhc3NlcnQuZXF1YWwoZXZlbnRFbWl0dGVyLmxpc3RlbmVyQ291bnQoJ2hlbGxvJyksIDEpO1xuICAgICAgICAgICAgYXNzZXJ0LmVxdWFsKGV2ZW50RW1pdHRlci5saXN0ZW5lckNvdW50KCd3b3JsZCcpLCAxKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG4gICAgZGVzY3JpYmUoJyNyZW1vdmVMaXN0ZW5lcnMoKScsICgpID0+IHtcbiAgICAgICAgaXQoJ2NvcnJlY3RseSByZW1vdmVzIGxpc3RlbmVycyBmcm9tIGFuIGV2ZW50IGVtaXR0ZXInLCAoKSA9PiB7XG4gICAgICAgICAgICBsZXQgZXZlbnRFbWl0dGVyID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICAgICAgICAgICAgbGV0IHBhaXJzOiBJRXZlbnRMaXN0ZW5lclBhaXJbXSA9IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGV2ZW50OiAnaGVsbG8nLFxuICAgICAgICAgICAgICAgICAgICBsaXN0ZW5lcjogKCkgPT4gdHJ1ZSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgZXZlbnQ6ICd3b3JsZCcsXG4gICAgICAgICAgICAgICAgICAgIGxpc3RlbmVyOiAoKSA9PiB0cnVlLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBdO1xuICAgICAgICAgICAgRXZlbnRIZWxwZXIuYWRkTGlzdGVuZXJzKGV2ZW50RW1pdHRlciwgcGFpcnMpO1xuICAgICAgICAgICAgYXNzZXJ0LmVxdWFsKGV2ZW50RW1pdHRlci5saXN0ZW5lckNvdW50KCdoZWxsbycpLCAxKTtcbiAgICAgICAgICAgIGFzc2VydC5lcXVhbChldmVudEVtaXR0ZXIubGlzdGVuZXJDb3VudCgnd29ybGQnKSwgMSk7XG4gICAgICAgICAgICBFdmVudEhlbHBlci5yZW1vdmVMaXN0ZW5lcnMoZXZlbnRFbWl0dGVyLCBwYWlycyk7XG4gICAgICAgICAgICBhc3NlcnQuZXF1YWwoZXZlbnRFbWl0dGVyLmxpc3RlbmVyQ291bnQoJ2hlbGxvJyksIDApO1xuICAgICAgICAgICAgYXNzZXJ0LmVxdWFsKGV2ZW50RW1pdHRlci5saXN0ZW5lckNvdW50KCd3b3JsZCcpLCAwKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG59KTtcbiJdfQ==
