"use strict";
var path = require("path");
var chokidar = require("chokidar");
var AssetManager_1 = require("./AssetManager");
exports.BUILD_CHANGE_EVENT = 'buildChange';
var ProjectWatcher = (function () {
    function ProjectWatcher(configPath, buildPath, eventEmitter) {
        this.configPath = configPath;
        this.projectPath = path.dirname(configPath);
        this.buildPath = buildPath;
        this.eventEmitter = eventEmitter;
    }
    ProjectWatcher.prototype.watch = function () {
        this.setupFileWatchers();
        var assetManager = new AssetManager_1.AssetManager(path.join(this.projectPath, 'assets'), path.join(this.buildPath, 'assets'), this.eventEmitter);
        assetManager.setupListeners();
    };
    ProjectWatcher.prototype.setupFileWatchers = function () {
        this.setupFileWatcher('assets', [
            {
                fsEvent: 'add',
                blitzEvent: AssetManager_1.ASSET_CHANGE_EVENT,
            },
            {
                fsEvent: 'addDir',
                blitzEvent: AssetManager_1.ASSET_CHANGE_EVENT,
            },
            {
                fsEvent: 'change',
                blitzEvent: AssetManager_1.ASSET_CHANGE_EVENT,
            },
            {
                fsEvent: 'unlink',
                blitzEvent: AssetManager_1.ASSET_REMOVE_EVENT,
            },
            {
                fsEvent: 'unlinkDir',
                blitzEvent: AssetManager_1.ASSET_REMOVE_EVENT,
            },
        ]);
    };
    ProjectWatcher.prototype.setupFileWatcher = function (directory, events) {
        var _this = this;
        var fullPath = path.join(this.projectPath, directory);
        var watcher = chokidar.watch(fullPath);
        var _loop_1 = function (i) {
            var event_1 = events[i];
            watcher.on(event_1.fsEvent, function (filePath) { return _this.eventEmitter.emit(event_1.blitzEvent, path.relative(fullPath, filePath)); });
        };
        for (var i = 0; i < events.length; i++) {
            _loop_1(i);
        }
        watcher.on('error', function (error) {
            if (process.platform === 'win32'
                && error.code === 'EPERM'
                && error.filename === null) {
                return;
            }
            return error;
        });
    };
    return ProjectWatcher;
}());
exports.ProjectWatcher = ProjectWatcher;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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QztBQUFELENBeEdBLEFBd0dDLElBQUE7QUF4R1ksd0NBQWMiLCJmaWxlIjoic3JjL1Byb2plY3RXYXRjaGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZSBDb250YWlucyBjb2RlIHJlbGF0ZWQgdG8gd2F0Y2hpbmcgcHJvamVjdCBmb3IgY2hhbmdlcyBhbmQgcmVjb21waWxpbmdcbiAqIEBhdXRob3IgVGltdXIgS3V6aGFnYWxpeWV2IDx0aW0ua3V6aEBnbWFpbC5jb20+XG4gKiBAY29weXJpZ2h0IDIwMTZcbiAqIEBsaWNlbnNlIEdQTC0zLjBcbiAqIEBzaW5jZSAwLjIuMFxuICovXG5cbmltcG9ydCAqIGFzIHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgKiBhcyBjaG9raWRhciBmcm9tICdjaG9raWRhcic7XG5pbXBvcnQge0Fzc2V0TWFuYWdlciwgQVNTRVRfQ0hBTkdFX0VWRU5ULCBBU1NFVF9SRU1PVkVfRVZFTlR9IGZyb20gJy4vQXNzZXRNYW5hZ2VyJztcbmltcG9ydCB7RXZlbnRFbWl0dGVyfSBmcm9tICdldmVudHMnO1xuXG4vKipcbiAqXG4gKiBAc2luY2UgMC4yLjBcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJRlNFdmVudFBhaXIge1xuICAgIGZzRXZlbnQ6IHN0cmluZztcbiAgICBibGl0ekV2ZW50OiBzdHJpbmc7XG59XG5cbi8qKlxuICogRXZlbnQgY2FsbGVkIHdoZW4gYSBmaWxlIGluc2lkZSB0aGUgYnVpbGQgZm9sZGVyIGNoYW5nZXNcbiAqIEBzaW5jZSAwLjIuMFxuICovXG5leHBvcnQgY29uc3QgQlVJTERfQ0hBTkdFX0VWRU5UID0gJ2J1aWxkQ2hhbmdlJztcblxuLyoqXG4gKiBAY2xhc3MgUHJlcGFyZXMgdGhlIHByb2plY3QgZm9yIGJ1aWxkaW5nIGFuZCB3YXRjaGVzIGl0IGZvciBjaGFuZ2VzXG4gKiBAc2luY2UgMC4yLjBcbiAqL1xuZXhwb3J0IGNsYXNzIFByb2plY3RXYXRjaGVyIHtcbiAgICAvKipcbiAgICAgKiBMb2NhdGlvbiBvZiB0aGUgY29uZmlnIHRoYXQgd2lsbCBiZSB1c2VkIGZvciBnZW5lcmF0aW9uIG9mIHRoZSB3ZWJzaXRlXG4gICAgICogQHNpbmNlIDAuMi4wXG4gICAgICovXG4gICAgcHJpdmF0ZSBjb25maWdQYXRoOiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBSb290IHByb2plY3QgZm9sZGVyLCB3aGljaCBjb250YWlucyBgYXNzZXRzYCwgYGNvbnRlbnRgLCBgdGVtcGxhdGVzYCBldGMuXG4gICAgICogQHNpbmNlIDAuMi4wXG4gICAgICovXG4gICAgcHJpdmF0ZSBwcm9qZWN0UGF0aDogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogVGFyZ2V0IGJ1aWxkIHBhdGhcbiAgICAgKiBAc2luY2UgMC4yLjBcbiAgICAgKi9cbiAgICBwcml2YXRlIGJ1aWxkUGF0aDogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogSW5qZWN0ZWQgZXZlbnQgZW1pdHRlciByZWZlcmVuY2VcbiAgICAgKiBAc2luY2UgMC4yLjBcbiAgICAgKi9cbiAgICBwcml2YXRlIGV2ZW50RW1pdHRlcjogRXZlbnRFbWl0dGVyO1xuXG4gICAgLyoqXG4gICAgICogUHJvamVjdFdhdGNoZXIgY29uc3RydWN0b3JcbiAgICAgKiBAc2luY2UgMC4yLjBcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcihjb25maWdQYXRoOiBzdHJpbmcsIGJ1aWxkUGF0aDogc3RyaW5nLCBldmVudEVtaXR0ZXI6IEV2ZW50RW1pdHRlcikge1xuICAgICAgICB0aGlzLmNvbmZpZ1BhdGggPSBjb25maWdQYXRoO1xuICAgICAgICB0aGlzLnByb2plY3RQYXRoID0gcGF0aC5kaXJuYW1lKGNvbmZpZ1BhdGgpO1xuICAgICAgICB0aGlzLmJ1aWxkUGF0aCA9IGJ1aWxkUGF0aDtcbiAgICAgICAgdGhpcy5ldmVudEVtaXR0ZXIgPSBldmVudEVtaXR0ZXI7XG4gICAgfVxuICAgIFxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAc2luY2UgMC4yLjBcbiAgICAgKi9cbiAgICBwdWJsaWMgd2F0Y2goKSB7XG4gICAgICAgIHRoaXMuc2V0dXBGaWxlV2F0Y2hlcnMoKTtcbiAgICAgICAgbGV0IGFzc2V0TWFuYWdlciA9IG5ldyBBc3NldE1hbmFnZXIoXG4gICAgICAgICAgICBwYXRoLmpvaW4odGhpcy5wcm9qZWN0UGF0aCwgJ2Fzc2V0cycpLFxuICAgICAgICAgICAgcGF0aC5qb2luKHRoaXMuYnVpbGRQYXRoLCAnYXNzZXRzJyksXG4gICAgICAgICAgICB0aGlzLmV2ZW50RW1pdHRlclxuICAgICAgICApO1xuICAgICAgICBhc3NldE1hbmFnZXIuc2V0dXBMaXN0ZW5lcnMoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXR1cFxuICAgICAqIEBzaW5jZSAwLjIuMFxuICAgICAqL1xuICAgIHByaXZhdGUgc2V0dXBGaWxlV2F0Y2hlcnMoKSB7XG4gICAgICAgIHRoaXMuc2V0dXBGaWxlV2F0Y2hlcignYXNzZXRzJywgW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGZzRXZlbnQ6ICdhZGQnLFxuICAgICAgICAgICAgICAgIGJsaXR6RXZlbnQ6IEFTU0VUX0NIQU5HRV9FVkVOVCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgZnNFdmVudDogJ2FkZERpcicsXG4gICAgICAgICAgICAgICAgYmxpdHpFdmVudDogQVNTRVRfQ0hBTkdFX0VWRU5ULFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBmc0V2ZW50OiAnY2hhbmdlJyxcbiAgICAgICAgICAgICAgICBibGl0ekV2ZW50OiBBU1NFVF9DSEFOR0VfRVZFTlQsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGZzRXZlbnQ6ICd1bmxpbmsnLFxuICAgICAgICAgICAgICAgIGJsaXR6RXZlbnQ6IEFTU0VUX1JFTU9WRV9FVkVOVCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgZnNFdmVudDogJ3VubGlua0RpcicsXG4gICAgICAgICAgICAgICAgYmxpdHpFdmVudDogQVNTRVRfUkVNT1ZFX0VWRU5ULFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0dXAgd2F0Y2hlcnMgZm9yIGEgZGlyZWN0b3J5IHVzaW5nIGFuIGV2ZW50IHBhaXJcbiAgICAgKiBAc2luY2UgMC4yLjBcbiAgICAgKi9cbiAgICBwcml2YXRlIHNldHVwRmlsZVdhdGNoZXIoZGlyZWN0b3J5OiBzdHJpbmcsIGV2ZW50czogSUZTRXZlbnRQYWlyW10pIHtcbiAgICAgICAgbGV0IGZ1bGxQYXRoID0gcGF0aC5qb2luKHRoaXMucHJvamVjdFBhdGgsIGRpcmVjdG9yeSk7XG4gICAgICAgIGxldCB3YXRjaGVyID0gY2hva2lkYXIud2F0Y2goZnVsbFBhdGgpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGV2ZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbGV0IGV2ZW50ID0gZXZlbnRzW2ldO1xuICAgICAgICAgICAgd2F0Y2hlci5vbihcbiAgICAgICAgICAgICAgICBldmVudC5mc0V2ZW50LFxuICAgICAgICAgICAgICAgIChmaWxlUGF0aCkgPT4gdGhpcy5ldmVudEVtaXR0ZXIuZW1pdChldmVudC5ibGl0ekV2ZW50LCBwYXRoLnJlbGF0aXZlKGZ1bGxQYXRoLCBmaWxlUGF0aCkpXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIHdhdGNoZXIub24oJ2Vycm9yJywgKGVycm9yOiBhbnkpID0+IHtcbiAgICAgICAgICAgIC8vIFdvcmthcm91bmQgZm9yIHRoZSBcIldpbmRvd3Mgcm91Z2ggZWRnZVwiIHJlZ2FyZGluZyB0aGUgZGVsZXRpb24gb2YgZGlyZWN0b3JpZXNcbiAgICAgICAgICAgIGlmIChwcm9jZXNzLnBsYXRmb3JtID09PSAnd2luMzInXG4gICAgICAgICAgICAgICAgJiYgZXJyb3IuY29kZSA9PT0gJ0VQRVJNJ1xuICAgICAgICAgICAgICAgICYmIGVycm9yLmZpbGVuYW1lID09PSBudWxsKSB7IC8vIHRzbGludDpkaXNhYmxlLWxpbmU6bm8tbnVsbC1rZXl3b3JkXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGVycm9yO1xuICAgICAgICB9KTtcbiAgICB9XG59XG4iXX0=
