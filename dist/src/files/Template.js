"use strict";
var pug = require('pug');
var objectAssign = require('object-assign');
var Template = (function () {
    function Template() {
    }
    Template.prototype.prepare = function (templateString, locals, menus) {
        this.ids = [];
        this.assets = [];
        this.menus = [];
        this.compiledTemplate = pug.compile(templateString);
        this.extractIdsAndAssets(objectAssign({}, locals, { menus: menus }));
        this.extractMenus(locals, menus);
    };
    Template.prototype.extractIdsAndAssets = function (locals) {
        var extraLocals = {
            url: this.mockGenerator(this.ids),
            asset: this.mockGenerator(this.assets),
        };
        this.compiledTemplate(objectAssign({}, locals, extraLocals));
    };
    Template.prototype.extractMenus = function (locals, menus) {
        for (var menu in menus) {
            if (menus.hasOwnProperty(menu)) {
                var cutMenus = objectAssign({}, menus);
                cutMenus[menu] = undefined;
                try {
                    this.compiledTemplate(objectAssign({}, locals, { menus: cutMenus }));
                }
                catch (exception) {
                    this.menus.push(menu);
                }
            }
        }
    };
    Template.prototype.mockGenerator = function (logArray) {
        return function (value) {
            if (value) {
                logArray.push(value);
            }
            return './some/path';
        };
    };
    Template.prototype.generate = function (locals) {
        if (this.compiledTemplate() === undefined) {
            throw new Error('Cannot generate a page from template with nothing prepared!');
        }
        return this.compiledTemplate(locals);
    };
    Template.prototype.getIds = function () {
        return this.ids;
    };
    Template.prototype.getAssets = function () {
        return this.assets;
    };
    Template.prototype.getMenus = function () {
        return this.menus;
    };
    return Template;
}());
exports.Template = Template;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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QUFTLEdBQWhCO1FBQ0ksTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDdkIsQ0FBQztJQUtNLDJCQUFRLEdBQWY7UUFDSSxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQztJQUN0QixDQUFDO0lBQ0wsZUFBQztBQUFELENBdkdBLEFBdUdDLElBQUE7QUF2R1ksZ0JBQVEsV0F1R3BCLENBQUEiLCJmaWxlIjoic3JjL2ZpbGVzL1RlbXBsYXRlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZSBBbGwgY29kZSByZWxhdGVkIHRvIHRoZSByZXByZXNldG50YXRpb24gb2YgYSB0ZW1wbGF0ZSBmaWxlXG4gKiBAYXV0aG9yIFRpbXVyIEt1emhhZ2FsaXlldiA8dGltLmt1emhAZ21haWwuY29tPlxuICogQGNvcHlyaWdodCAyMDE2XG4gKiBAbGljZW5zZSBHUEwtMy4wXG4gKiBAc2luY2UgMC4yLjBcbiAqL1xuXG5pbXBvcnQgKiBhcyBwdWcgZnJvbSAncHVnJztcbmltcG9ydCAqIGFzIG9iamVjdEFzc2lnbiBmcm9tICdvYmplY3QtYXNzaWduJztcbmltcG9ydCB7SVNpdGVNZW51TWFwfSBmcm9tICcuLi9NZW51JztcblxuLyoqXG4gKiBAY2xhc3MgV3JhcHBlciBhcm91bmQgYSBzcGVjaWZpYyB0ZW1wbGF0aW5nIGVuZ2luZSwgY3VycmVudGx5IG9ubHkgUHVnXG4gKiBAc2luY2UgMC4yLjBcbiAqXG4gKi9cbmV4cG9ydCBjbGFzcyBUZW1wbGF0ZSB7XG4gICAgLyoqXG4gICAgICogQ29tcGlsZWQgUHVnIHRlbXBsYXRlXG4gICAgICogQHNpbmNlIDAuMi4wXG4gICAgICovXG4gICAgcHJpdmF0ZSBjb21waWxlZFRlbXBsYXRlOiAobG9jYWxzPzogYW55KSA9PiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBBcnJheXMgb2YgSURzLCBhc3NldHMgYW5kIG1lbnVzIHJlZmVyZW5jZWQgaW4gdGhlIHRlbXBsYXRlXG4gICAgICogQHNpbmNlIDAuMi4wXG4gICAgICovXG4gICAgcHJpdmF0ZSBpZHM6IHN0cmluZ1tdO1xuICAgIHByaXZhdGUgYXNzZXRzOiBzdHJpbmdbXTtcbiAgICBwcml2YXRlIG1lbnVzOiBzdHJpbmdbXTtcblxuICAgIC8qKlxuICAgICAqIEV4dHJhY3RzIGxpc3Qgb2YgcmVmZXJlbmNlZCBJRHMsIGFzc2V0cyBhbmQgbWVudXMgZnJvbSB0aGUgdGVtcGxhdGUgYWZ0ZXIgY29tcGlsaW5nIGl0XG4gICAgICogQHNpbmNlIDAuMi4wXG4gICAgICovXG4gICAgcHVibGljIHByZXBhcmUodGVtcGxhdGVTdHJpbmc6IHN0cmluZywgbG9jYWxzOiBhbnksIG1lbnVzOiBJU2l0ZU1lbnVNYXApIHtcbiAgICAgICAgdGhpcy5pZHMgPSBbXTtcbiAgICAgICAgdGhpcy5hc3NldHMgPSBbXTtcbiAgICAgICAgdGhpcy5tZW51cyA9IFtdO1xuXG4gICAgICAgIHRoaXMuY29tcGlsZWRUZW1wbGF0ZSA9IHB1Zy5jb21waWxlKHRlbXBsYXRlU3RyaW5nKTtcbiAgICAgICAgdGhpcy5leHRyYWN0SWRzQW5kQXNzZXRzKG9iamVjdEFzc2lnbih7fSwgbG9jYWxzLCB7bWVudXN9KSk7XG4gICAgICAgIHRoaXMuZXh0cmFjdE1lbnVzKGxvY2FscywgbWVudXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEV4dHJhY3QgSURzIGFuZCBhc3NldHMgZnJvbSBhIGNvbXBpbGVkIHRlbXBsYXRlIHVzaW5nIG1vY2sgZ2VuZXJhdG9yc1xuICAgICAqIEBzaW5jZSAwLjIuMFxuICAgICAqL1xuICAgIHByaXZhdGUgZXh0cmFjdElkc0FuZEFzc2V0cyhsb2NhbHM6IGFueSkge1xuICAgICAgICBsZXQgZXh0cmFMb2NhbHMgPSB7XG4gICAgICAgICAgICB1cmw6IHRoaXMubW9ja0dlbmVyYXRvcih0aGlzLmlkcyksXG4gICAgICAgICAgICBhc3NldDogdGhpcy5tb2NrR2VuZXJhdG9yKHRoaXMuYXNzZXRzKSxcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5jb21waWxlZFRlbXBsYXRlKG9iamVjdEFzc2lnbih7fSwgbG9jYWxzLCBleHRyYUxvY2FscykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEV4dHJhY3RzIG1lbnVzIHJlZmVyZW5jZWQgaW4gdGhlIGNvbXBpbGVkIHRlbXBsYXRlXG4gICAgICogQHNpbmNlIDAuMi4wXG4gICAgICovXG4gICAgcHJpdmF0ZSBleHRyYWN0TWVudXMobG9jYWxzOiBhbnksIG1lbnVzOiBJU2l0ZU1lbnVNYXApIHtcbiAgICAgICAgZm9yIChsZXQgbWVudSBpbiBtZW51cykge1xuICAgICAgICAgICAgaWYgKG1lbnVzLmhhc093blByb3BlcnR5KG1lbnUpKSB7XG4gICAgICAgICAgICAgICAgbGV0IGN1dE1lbnVzID0gb2JqZWN0QXNzaWduKHt9LCBtZW51cyk7XG4gICAgICAgICAgICAgICAgY3V0TWVudXNbbWVudV0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb21waWxlZFRlbXBsYXRlKG9iamVjdEFzc2lnbih7fSwgbG9jYWxzLCB7bWVudXM6IGN1dE1lbnVzfSkpO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGV4Y2VwdGlvbikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm1lbnVzLnB1c2gobWVudSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIG1vY2sgc3RyaW5nIGdlbmVyYXRvciB0aGF0IGxvZ3MgY2FsbCBwYXJhbWV0ZXJzIGludG8gYW4gYXJyYXlcbiAgICAgKiBAc2luY2UgMC4yLjBcbiAgICAgKi9cbiAgICBwcml2YXRlIG1vY2tHZW5lcmF0b3IobG9nQXJyYXk6IHN0cmluZ1tdKTogKHZhbHVlPzogc3RyaW5nKSA9PiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gKHZhbHVlPzogc3RyaW5nKSA9PiB7XG4gICAgICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICBsb2dBcnJheS5wdXNoKHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAnLi9zb21lL3BhdGgnO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdlbmVyYXRlcyBhIEhUTUwgcGFnZSBmcm9tIHRoZSB0ZW1wbGF0ZVxuICAgICAqIEBzaW5jZSAwLjIuMFxuICAgICAqL1xuICAgIHB1YmxpYyBnZW5lcmF0ZShsb2NhbHM/OiBhbnkpOiBzdHJpbmcge1xuICAgICAgICBpZiAodGhpcy5jb21waWxlZFRlbXBsYXRlKCkgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgZ2VuZXJhdGUgYSBwYWdlIGZyb20gdGVtcGxhdGUgd2l0aCBub3RoaW5nIHByZXBhcmVkIScpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmNvbXBpbGVkVGVtcGxhdGUobG9jYWxzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAc2luY2UgMC4yLjBcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0SWRzKCk6IHN0cmluZ1tdIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaWRzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBzaW5jZSAwLjIuMFxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRBc3NldHMoKTogc3RyaW5nW10ge1xuICAgICAgICByZXR1cm4gdGhpcy5hc3NldHM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHNpbmNlIDAuMi4wXG4gICAgICovXG4gICAgcHVibGljIGdldE1lbnVzKCk6IHN0cmluZ1tdIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWVudXM7XG4gICAgfVxufVxuIl19
