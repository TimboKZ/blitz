"use strict";
var mock = require("mock-fs");
var fse = require("fs-extra");
var path = require("path");
var chai_1 = require("chai");
var GenericFile_1 = require("../../../src/files/GenericFile");
describe('GenericFile', function () {
    describe('#getFullPath()', function () {
        it('combines paths correctly', function () {
            chai_1.assert.equal(new GenericFile_1.GenericFile('first', ['second', 'third'], 'fourth.txt').getFullPath(), path.join('first', 'second', 'third', 'fourth.txt'));
        });
    });
    describe('#read()', function () {
        it('reads file contents correctly', function () {
            var fileContents = 'Hello world!';
            var mockConfig = {
                'test.txt': mock.file({
                    content: fileContents,
                    mode: 777,
                }),
            };
            mock(mockConfig);
            var file = new GenericFile_1.GenericFile('', [], 'test.txt');
            file.read();
            chai_1.assert.equal(file.getContents(), fileContents);
            mock.restore();
        });
    });
    describe('#write()', function () {
        it('writes file contents correctly', function () {
            var fileContents = 'Hello world!';
            var mockConfig = {
                'test.txt': mock.file({
                    content: '',
                    mode: 777,
                }),
            };
            mock(mockConfig);
            var file = new GenericFile_1.GenericFile('/', [], 'test.txt');
            file.setContents(fileContents);
            file.write();
            chai_1.assert.equal(fse.readFileSync('/test.txt', 'utf8'), fileContents);
            mock.restore();
        });
    });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3Rlc3QvdW5pdC9maWxlcy9HZW5lcmljRmlsZVRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQVFBLDhCQUFnQztBQUNoQyw4QkFBZ0M7QUFDaEMsMkJBQTZCO0FBQzdCLDZCQUE0QjtBQUM1Qiw4REFBMkQ7QUFFM0QsUUFBUSxDQUFDLGFBQWEsRUFBRTtJQUNwQixRQUFRLENBQUMsZ0JBQWdCLEVBQUU7UUFDdkIsRUFBRSxDQUFDLDBCQUEwQixFQUFFO1lBQzNCLGFBQU0sQ0FBQyxLQUFLLENBQ1IsSUFBSSx5QkFBVyxDQUFDLE9BQU8sRUFBRSxDQUFDLFFBQVEsRUFBRSxPQUFPLENBQUMsRUFBRSxZQUFZLENBQUMsQ0FBQyxXQUFXLEVBQUUsRUFDekUsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxZQUFZLENBQUMsQ0FDdEQsQ0FBQztRQUNOLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQyxDQUFDLENBQUM7SUFDSCxRQUFRLENBQUMsU0FBUyxFQUFFO1FBQ2hCLEVBQUUsQ0FBQywrQkFBK0IsRUFBRTtZQUNoQyxJQUFJLFlBQVksR0FBRyxjQUFjLENBQUM7WUFDbEMsSUFBSSxVQUFVLEdBQUc7Z0JBQ2IsVUFBVSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUM7b0JBQ2xCLE9BQU8sRUFBRSxZQUFZO29CQUNyQixJQUFJLEVBQUUsR0FBRztpQkFDWixDQUFDO2FBQ0wsQ0FBQztZQUNGLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztZQUNqQixJQUFJLElBQUksR0FBRyxJQUFJLHlCQUFXLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxVQUFVLENBQUMsQ0FBQztZQUMvQyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDWixhQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsRUFBRSxZQUFZLENBQUMsQ0FBQztZQUMvQyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDbkIsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDLENBQUMsQ0FBQztJQUNILFFBQVEsQ0FBQyxVQUFVLEVBQUU7UUFDakIsRUFBRSxDQUFDLGdDQUFnQyxFQUFFO1lBQ2pDLElBQUksWUFBWSxHQUFHLGNBQWMsQ0FBQztZQUNsQyxJQUFJLFVBQVUsR0FBRztnQkFDYixVQUFVLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQztvQkFDbEIsT0FBTyxFQUFFLEVBQUU7b0JBQ1gsSUFBSSxFQUFFLEdBQUc7aUJBQ1osQ0FBQzthQUNMLENBQUM7WUFDRixJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7WUFDakIsSUFBSSxJQUFJLEdBQUcsSUFBSSx5QkFBVyxDQUFDLEdBQUcsRUFBRSxFQUFFLEVBQUUsVUFBVSxDQUFDLENBQUM7WUFDaEQsSUFBSSxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsQ0FBQztZQUMvQixJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7WUFDYixhQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsV0FBVyxFQUFFLE1BQU0sQ0FBQyxFQUFFLFlBQVksQ0FBQyxDQUFDO1lBQ2xFLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUNuQixDQUFDLENBQUMsQ0FBQztJQUNQLENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyxDQUFDLENBQUMiLCJmaWxlIjoidGVzdC91bml0L2ZpbGVzL0dlbmVyaWNGaWxlVGVzdC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGUgR2VuZXJpY0ZpbGUgdGVzdHNcbiAqIEBhdXRob3IgVGltdXIgS3V6aGFnYWxpeWV2IDx0aW0ua3V6aEBnbWFpbC5jb20+XG4gKiBAY29weXJpZ2h0IDIwMTZcbiAqIEBsaWNlbnNlIEdQTC0zLjBcbiAqIEBzaW5jZSAwLjIuMFxuICovXG5cbmltcG9ydCAqIGFzIG1vY2sgZnJvbSAnbW9jay1mcyc7XG5pbXBvcnQgKiBhcyBmc2UgZnJvbSAnZnMtZXh0cmEnO1xuaW1wb3J0ICogYXMgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCB7YXNzZXJ0fSBmcm9tICdjaGFpJztcbmltcG9ydCB7R2VuZXJpY0ZpbGV9IGZyb20gJy4uLy4uLy4uL3NyYy9maWxlcy9HZW5lcmljRmlsZSc7XG5cbmRlc2NyaWJlKCdHZW5lcmljRmlsZScsICgpID0+IHtcbiAgICBkZXNjcmliZSgnI2dldEZ1bGxQYXRoKCknLCAoKSA9PiB7XG4gICAgICAgIGl0KCdjb21iaW5lcyBwYXRocyBjb3JyZWN0bHknLCAoKSA9PiB7XG4gICAgICAgICAgICBhc3NlcnQuZXF1YWwoXG4gICAgICAgICAgICAgICAgbmV3IEdlbmVyaWNGaWxlKCdmaXJzdCcsIFsnc2Vjb25kJywgJ3RoaXJkJ10sICdmb3VydGgudHh0JykuZ2V0RnVsbFBhdGgoKSxcbiAgICAgICAgICAgICAgICBwYXRoLmpvaW4oJ2ZpcnN0JywgJ3NlY29uZCcsICd0aGlyZCcsICdmb3VydGgudHh0JylcbiAgICAgICAgICAgICk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuICAgIGRlc2NyaWJlKCcjcmVhZCgpJywgKCkgPT4ge1xuICAgICAgICBpdCgncmVhZHMgZmlsZSBjb250ZW50cyBjb3JyZWN0bHknLCAoKSA9PiB7XG4gICAgICAgICAgICBsZXQgZmlsZUNvbnRlbnRzID0gJ0hlbGxvIHdvcmxkISc7XG4gICAgICAgICAgICBsZXQgbW9ja0NvbmZpZyA9IHtcbiAgICAgICAgICAgICAgICAndGVzdC50eHQnOiBtb2NrLmZpbGUoe1xuICAgICAgICAgICAgICAgICAgICBjb250ZW50OiBmaWxlQ29udGVudHMsXG4gICAgICAgICAgICAgICAgICAgIG1vZGU6IDc3NyxcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBtb2NrKG1vY2tDb25maWcpO1xuICAgICAgICAgICAgbGV0IGZpbGUgPSBuZXcgR2VuZXJpY0ZpbGUoJycsIFtdLCAndGVzdC50eHQnKTtcbiAgICAgICAgICAgIGZpbGUucmVhZCgpO1xuICAgICAgICAgICAgYXNzZXJ0LmVxdWFsKGZpbGUuZ2V0Q29udGVudHMoKSwgZmlsZUNvbnRlbnRzKTtcbiAgICAgICAgICAgIG1vY2sucmVzdG9yZSgpO1xuICAgICAgICB9KTtcbiAgICB9KTtcbiAgICBkZXNjcmliZSgnI3dyaXRlKCknLCAoKSA9PiB7XG4gICAgICAgIGl0KCd3cml0ZXMgZmlsZSBjb250ZW50cyBjb3JyZWN0bHknLCAoKSA9PiB7XG4gICAgICAgICAgICBsZXQgZmlsZUNvbnRlbnRzID0gJ0hlbGxvIHdvcmxkISc7XG4gICAgICAgICAgICBsZXQgbW9ja0NvbmZpZyA9IHtcbiAgICAgICAgICAgICAgICAndGVzdC50eHQnOiBtb2NrLmZpbGUoe1xuICAgICAgICAgICAgICAgICAgICBjb250ZW50OiAnJyxcbiAgICAgICAgICAgICAgICAgICAgbW9kZTogNzc3LFxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIG1vY2sobW9ja0NvbmZpZyk7XG4gICAgICAgICAgICBsZXQgZmlsZSA9IG5ldyBHZW5lcmljRmlsZSgnLycsIFtdLCAndGVzdC50eHQnKTtcbiAgICAgICAgICAgIGZpbGUuc2V0Q29udGVudHMoZmlsZUNvbnRlbnRzKTtcbiAgICAgICAgICAgIGZpbGUud3JpdGUoKTtcbiAgICAgICAgICAgIGFzc2VydC5lcXVhbChmc2UucmVhZEZpbGVTeW5jKCcvdGVzdC50eHQnLCAndXRmOCcpLCBmaWxlQ29udGVudHMpO1xuICAgICAgICAgICAgbW9jay5yZXN0b3JlKCk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xufSk7XG4iXX0=
