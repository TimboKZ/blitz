"use strict";
var path = require('path');
var ProjectInitialiser_1 = require('./ProjectInitialiser');
var Logger_1 = require('./Logger');
var Config_1 = require('./Config');
var Blitz = (function () {
    function Blitz() {
    }
    Blitz.init = function (templateName, projectPath) {
        Logger_1.Logger.log('Initialising a new project in `' +
            Logger_1.Logger.brand(projectPath) + '` using the template `' +
            Logger_1.Logger.brand(templateName) + '`...', Logger_1.LogLevel.Debug);
        var templatesPath = path.join(__dirname, '..', '..', 'templates');
        var projectInitialiser = new ProjectInitialiser_1.ProjectInitialiser(projectPath, templatesPath);
        projectInitialiser.initialise(templateName, function (error) {
            if (error) {
                Logger_1.Logger.logMany(Logger_1.Logger.split(error), Logger_1.LogLevel.Error);
                process.exit(1);
            }
            Logger_1.Logger.log('Project initialised!');
            process.exit(0);
        });
    };
    Blitz.build = function (configPath, buildDirectory) {
        Logger_1.Logger.log('Building site using `' +
            Logger_1.Logger.brand(configPath) + '` in directory `' +
            Logger_1.Logger.brand(buildDirectory) + '`...', Logger_1.LogLevel.Debug);
        var config = new Config_1.Config(configPath);
        try {
            config.load();
            config.validate();
        }
        catch (exception) {
            Logger_1.Logger.logMany(Logger_1.Logger.split(exception.message), Logger_1.LogLevel.Error);
            process.exit(1);
        }
        console.log(config.get());
    };
    Blitz.watch = function () {
    };
    Blitz.preview = function () {
    };
    return Blitz;
}());
exports.Blitz = Blitz;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9CbGl0ei50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBUUEsSUFBWSxJQUFJLFdBQU0sTUFBTSxDQUFDLENBQUE7QUFDN0IsbUNBQWlDLHNCQUFzQixDQUFDLENBQUE7QUFFeEQsdUJBQStCLFVBQVUsQ0FBQyxDQUFBO0FBQzFDLHVCQUFxQixVQUFVLENBQUMsQ0FBQTtBQU1oQztJQUFBO0lBeURBLENBQUM7SUFwRGlCLFVBQUksR0FBbEIsVUFBbUIsWUFBb0IsRUFBRSxXQUFtQjtRQUN4RCxlQUFNLENBQUMsR0FBRyxDQUFDLGlDQUFpQztZQUN4QyxlQUFNLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxHQUFHLHdCQUF3QjtZQUNwRCxlQUFNLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxHQUFHLE1BQU0sRUFBRSxpQkFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3pELElBQUksYUFBYSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsV0FBVyxDQUFDLENBQUM7UUFDbEUsSUFBSSxrQkFBa0IsR0FBRyxJQUFJLHVDQUFrQixDQUFDLFdBQVcsRUFBRSxhQUFhLENBQUMsQ0FBQztRQUM1RSxrQkFBa0IsQ0FBQyxVQUFVLENBQUMsWUFBWSxFQUFFLFVBQUMsS0FBSztZQUM5QyxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO2dCQUNSLGVBQU0sQ0FBQyxPQUFPLENBQUMsZUFBTSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsRUFBRSxpQkFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO2dCQUNwRCxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3BCLENBQUM7WUFDRCxlQUFNLENBQUMsR0FBRyxDQUFDLHNCQUFzQixDQUFDLENBQUM7WUFDbkMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNwQixDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFRYSxXQUFLLEdBQW5CLFVBQW9CLFVBQWtCLEVBQUUsY0FBc0I7UUFDMUQsZUFBTSxDQUFDLEdBQUcsQ0FBQyx1QkFBdUI7WUFDOUIsZUFBTSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsR0FBRyxrQkFBa0I7WUFDN0MsZUFBTSxDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUMsR0FBRyxNQUFNLEVBQUUsaUJBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUMzRCxJQUFJLE1BQU0sR0FBRyxJQUFJLGVBQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUNwQyxJQUFJLENBQUM7WUFDRCxNQUFNLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDZCxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDdEIsQ0FBRTtRQUFBLEtBQUssQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7WUFDakIsZUFBTSxDQUFDLE9BQU8sQ0FBQyxlQUFNLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsRUFBRSxpQkFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ2hFLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDcEIsQ0FBQztRQUNELE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7SUFDOUIsQ0FBQztJQU1hLFdBQUssR0FBbkI7SUFFQSxDQUFDO0lBTWEsYUFBTyxHQUFyQjtJQUVBLENBQUM7SUFDTCxZQUFDO0FBQUQsQ0F6REEsQUF5REMsSUFBQTtBQXpEWSxhQUFLLFFBeURqQixDQUFBIiwiZmlsZSI6InNyYy9CbGl0ei5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGUgRmlsZSBjb250YWluaW5nIHRoZSBjb3JlIG9mIEJsaXR6XG4gKiBAYXV0aG9yIFRpbXVyIEt1emhhZ2FsaXlldiA8dGltLmt1emhAZ21haWwuY29tPlxuICogQGNvcHlyaWdodCAyMDE2XG4gKiBAbGljZW5zZSBHUEwtMy4wXG4gKiBAc2luY2UgMC4yLjBcbiAqL1xuXG5pbXBvcnQgKiBhcyBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IHtQcm9qZWN0SW5pdGlhbGlzZXJ9IGZyb20gJy4vUHJvamVjdEluaXRpYWxpc2VyJztcbmltcG9ydCB7VXRpbH0gZnJvbSAnLi9VdGlsJztcbmltcG9ydCB7TG9nZ2VyLCBMb2dMZXZlbH0gZnJvbSAnLi9Mb2dnZXInO1xuaW1wb3J0IHtDb25maWd9IGZyb20gJy4vQ29uZmlnJztcblxuLyoqXG4gKiBAY2xhc3MgTWFpbiBjbGFzcyBvZiBCbGl0eiwgZXhwb3NlcyB0aGUgQVBJIGZvciBleHRlcm5hbCBtb2R1bGVzIHRvIHVzZVxuICogQHNpbmNlIDAuMC4xXG4gKi9cbmV4cG9ydCBjbGFzcyBCbGl0eiB7XG4gICAgLyoqXG4gICAgICogSW5pdGlhbGlzZXMgYSBCbGl0eiBwcm9qZWN0IGZyb20gYSB0ZW1wbGF0ZVxuICAgICAqIEBzaW5jZSAwLjIuMFxuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgaW5pdCh0ZW1wbGF0ZU5hbWU6IHN0cmluZywgcHJvamVjdFBhdGg6IHN0cmluZykge1xuICAgICAgICBMb2dnZXIubG9nKCdJbml0aWFsaXNpbmcgYSBuZXcgcHJvamVjdCBpbiBgJyArXG4gICAgICAgICAgICBMb2dnZXIuYnJhbmQocHJvamVjdFBhdGgpICsgJ2AgdXNpbmcgdGhlIHRlbXBsYXRlIGAnICtcbiAgICAgICAgICAgIExvZ2dlci5icmFuZCh0ZW1wbGF0ZU5hbWUpICsgJ2AuLi4nLCBMb2dMZXZlbC5EZWJ1Zyk7XG4gICAgICAgIGxldCB0ZW1wbGF0ZXNQYXRoID0gcGF0aC5qb2luKF9fZGlybmFtZSwgJy4uJywgJy4uJywgJ3RlbXBsYXRlcycpO1xuICAgICAgICBsZXQgcHJvamVjdEluaXRpYWxpc2VyID0gbmV3IFByb2plY3RJbml0aWFsaXNlcihwcm9qZWN0UGF0aCwgdGVtcGxhdGVzUGF0aCk7XG4gICAgICAgIHByb2plY3RJbml0aWFsaXNlci5pbml0aWFsaXNlKHRlbXBsYXRlTmFtZSwgKGVycm9yKSA9PiB7XG4gICAgICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBMb2dnZXIubG9nTWFueShMb2dnZXIuc3BsaXQoZXJyb3IpLCBMb2dMZXZlbC5FcnJvcik7XG4gICAgICAgICAgICAgICAgcHJvY2Vzcy5leGl0KDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgTG9nZ2VyLmxvZygnUHJvamVjdCBpbml0aWFsaXNlZCEnKTtcbiAgICAgICAgICAgIHByb2Nlc3MuZXhpdCgwKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQnVpbGRzIHRoZSB3ZWJzaXRlIHVzaW5nIHRoZSBzcGVjaWZpZWQgY29uZmlnLiBBc3N1bWVzIHRoYXQgYWxsIHJlbGV2YW50IGZvbGRlcnMgKGUuZy4gYGFzc2V0c2AsIGBjb250ZW50YCxcbiAgICAgKiBgcGx1Z2luc2AsIGB0ZW1wbGF0ZXNgLCBldGMuKSBleGlzdCBpbiB0aGUgc2FtZSBkaXJlY3RvcnkgYXMgdGhlIGNvbmZpZy4gVGhlIGdlbmVyYXRlZCBmaWxlcyBhcmUgcGxhY2VkIGludG8gdGhlXG4gICAgICogc3BlY2lmaWVkIGJ1aWxkIGRpcmVjdG9yeS5cbiAgICAgKiBAc2luY2UgMC4yLjBcbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIGJ1aWxkKGNvbmZpZ1BhdGg6IHN0cmluZywgYnVpbGREaXJlY3Rvcnk6IHN0cmluZykge1xuICAgICAgICBMb2dnZXIubG9nKCdCdWlsZGluZyBzaXRlIHVzaW5nIGAnICtcbiAgICAgICAgICAgIExvZ2dlci5icmFuZChjb25maWdQYXRoKSArICdgIGluIGRpcmVjdG9yeSBgJyArXG4gICAgICAgICAgICBMb2dnZXIuYnJhbmQoYnVpbGREaXJlY3RvcnkpICsgJ2AuLi4nLCBMb2dMZXZlbC5EZWJ1Zyk7XG4gICAgICAgIGxldCBjb25maWcgPSBuZXcgQ29uZmlnKGNvbmZpZ1BhdGgpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uZmlnLmxvYWQoKTtcbiAgICAgICAgICAgIGNvbmZpZy52YWxpZGF0ZSgpO1xuICAgICAgICB9IGNhdGNoIChleGNlcHRpb24pIHtcbiAgICAgICAgICAgIExvZ2dlci5sb2dNYW55KExvZ2dlci5zcGxpdChleGNlcHRpb24ubWVzc2FnZSksIExvZ0xldmVsLkVycm9yKTtcbiAgICAgICAgICAgIHByb2Nlc3MuZXhpdCgxKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zb2xlLmxvZyhjb25maWcuZ2V0KCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFdhdGNoZXMgdGhlIGN1cnJlbnQgZGlyZWN0b3J5IGFuZCByZWJ1aWxkcyBjZXJ0YWluIHBhcnRzIG9mIHRoZSB3ZWJzaXRlIHdoZW4gbmVjZXNzYXJ5XG4gICAgICogQHNpbmNlIDAuMi4wXG4gICAgICovXG4gICAgcHVibGljIHN0YXRpYyB3YXRjaCgpIHtcblxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJ1bnMgYSB3ZWIgc2VydmVyIHdpdGggdGhlIHByZXZpZXcgb2YgdGhlIHdlYnNpdGVcbiAgICAgKiBAc2luY2UgMC4yLjBcbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIHByZXZpZXcoKSB7XG5cbiAgICB9XG59XG4iXX0=
