"use strict";
var path = require('path');
var SiteDirectory_1 = require('./files/SiteDirectory');
var TemplateFile_1 = require('./files/TemplateFile');
var ContentFile_1 = require('./files/ContentFile');
var URLHelper_1 = require('./helpers/URLHelper');
var StringHelper_1 = require('./helpers/StringHelper');
var FileGenerator_1 = require('./files/FileGenerator');
var SiteFile_1 = require('./files/SiteFile');
var MapBuilder = (function () {
    function MapBuilder(config, projectRoot, buildPath) {
        this.config = config;
        this.projectRoot = projectRoot;
        this.contentRoot = path.join(projectRoot, 'content');
        this.templateRoot = path.join(projectRoot, 'template');
        this.buildPath = buildPath;
        this.directoryMap = {};
    }
    MapBuilder.prototype.build = function () {
        this.directoryMap[''] = new SiteDirectory_1.SiteDirectory(this.buildPath);
        this.parsePages('', this.config.get().pages);
    };
    MapBuilder.prototype.parsePages = function (currentUri, pages) {
        var pageCount = pages.length;
        for (var i = 0; i < pageCount; i++) {
            var page = pages[i];
            var contentFile = void 0;
            var templateFile = void 0;
            if (page.content) {
                contentFile = new ContentFile_1.ContentFile(this.contentRoot, page.content);
                contentFile.reload();
            }
            if (page.template) {
                var pageUri = void 0;
                if (page.uri && !URLHelper_1.URLHelper.empty(page.uri)) {
                    pageUri = URLHelper_1.URLHelper.trimSlashes(URLHelper_1.URLHelper.join(currentUri, page.uri));
                }
                else {
                    pageUri = URLHelper_1.URLHelper.trimSlashes(URLHelper_1.URLHelper.join(currentUri, StringHelper_1.StringHelper.stripExtension(page.template)));
                }
                var fileUri = this.fileFromUri(pageUri);
                templateFile = new TemplateFile_1.TemplateFile(this.templateRoot, page.template);
                templateFile.reload();
                var fileGenerator = new FileGenerator_1.FileGenerator(contentFile, templateFile);
                var siteFile = new SiteFile_1.SiteFile(this.buildPath, URLHelper_1.URLHelper.split(path.dirname(fileUri)), path.basename(fileUri), fileGenerator);
            }
        }
    };
    MapBuilder.prototype.getDirectory = function (uri) {
        var strippedUri = URLHelper_1.URLHelper.trimSlashes(uri);
        if (!this.directoryMap[strippedUri]) {
            this.directoryMap[''] = new SiteDirectory_1.SiteDirectory(this.buildPath);
        }
    };
    MapBuilder.prototype.fileFromUri = function (uri) {
        return URLHelper_1.URLHelper.fileFromUri(uri, this.config.get().explicit_html_extensions);
    };
    return MapBuilder;
}());
exports.MapBuilder = MapBuilder;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
