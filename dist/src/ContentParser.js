"use strict";
var fs = require('fs');
var path = require('path');
var fm = require('front-matter');
var Util_1 = require('./helpers/Util');
var ContentParser = (function () {
    function ContentParser() {
    }
    ContentParser.parse = function (content) {
        var result;
        var parsedFrontMatter = fm(content);
        if (typeof parsedFrontMatter.attributes === 'string') {
            result = {
                title: parsedFrontMatter.attributes,
            };
        }
        else {
            result = parsedFrontMatter.attributes;
        }
        result.content = Util_1.Util.parseMarkdown(parsedFrontMatter.body);
        return result;
    };
    ContentParser.parseFile = function (filePath) {
        if (this.fileCache[filePath] === undefined) {
            var fileContents = Util_1.Util.getFileContents(filePath);
            var rawData = ContentParser.parse(fileContents);
            rawData.file = path.basename(filePath);
            this.fileCache[filePath] = rawData;
        }
        return this.fileCache[filePath];
    };
    ContentParser.parseDirectory = function (directoryPath) {
        if (this.directoryCache[directoryPath] === undefined) {
            var files = fs.readdirSync(directoryPath);
            var fileCount = files.length;
            var directoryData = [];
            for (var i = 0; i < fileCount; i++) {
                var filePath = path.join(directoryPath, files[i]);
                var fileStats = fs.lstatSync(filePath);
                if (fileStats.isFile()) {
                    var fileData = ContentParser.parseFile(filePath);
                    directoryData.push(fileData);
                }
            }
            this.directoryCache[directoryPath] = directoryData;
        }
        return this.directoryCache[directoryPath];
    };
    ContentParser.directoryCache = {};
    ContentParser.fileCache = {};
    return ContentParser;
}());
exports.ContentParser = ContentParser;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9Db250ZW50UGFyc2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFRQSxJQUFZLEVBQUUsV0FBTSxJQUFJLENBQUMsQ0FBQTtBQUN6QixJQUFZLElBQUksV0FBTSxNQUFNLENBQUMsQ0FBQTtBQUM3QixJQUFZLEVBQUUsV0FBTSxjQUFjLENBQUMsQ0FBQTtBQUNuQyxxQkFBbUIsZ0JBQWdCLENBQUMsQ0FBQTtBQStCcEM7SUFBQTtJQStFQSxDQUFDO0lBekRpQixtQkFBSyxHQUFuQixVQUFvQixPQUFlO1FBQy9CLElBQUksTUFBTSxDQUFDO1FBQ1gsSUFBSSxpQkFBaUIsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDcEMsRUFBRSxDQUFDLENBQUMsT0FBTyxpQkFBaUIsQ0FBQyxVQUFVLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQztZQUNuRCxNQUFNLEdBQUc7Z0JBQ0wsS0FBSyxFQUFFLGlCQUFpQixDQUFDLFVBQVU7YUFDdEMsQ0FBQztRQUNOLENBQUM7UUFBQyxJQUFJLENBQUMsQ0FBQztZQUNKLE1BQU0sR0FBRyxpQkFBaUIsQ0FBQyxVQUFVLENBQUM7UUFDMUMsQ0FBQztRQUNELE1BQU0sQ0FBQyxPQUFPLEdBQUcsV0FBSSxDQUFDLGFBQWEsQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM1RCxNQUFNLENBQUMsTUFBTSxDQUFDO0lBQ2xCLENBQUM7SUFVYSx1QkFBUyxHQUF2QixVQUF3QixRQUFnQjtRQUNwQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUM7WUFDekMsSUFBSSxZQUFZLEdBQUcsV0FBSSxDQUFDLGVBQWUsQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUNsRCxJQUFJLE9BQU8sR0FBRyxhQUFhLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFDO1lBQy9DLE9BQWlDLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDbEUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsR0FBSSxPQUFpQyxDQUFDO1FBQ2xFLENBQUM7UUFDRCxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNwQyxDQUFDO0lBVWEsNEJBQWMsR0FBNUIsVUFBNkIsYUFBcUI7UUFDOUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxhQUFhLENBQUMsS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDO1lBQ25ELElBQUksS0FBSyxHQUFHLEVBQUUsQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDLENBQUM7WUFDMUMsSUFBSSxTQUFTLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQztZQUM3QixJQUFJLGFBQWEsR0FBVSxFQUFFLENBQUM7WUFDOUIsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxTQUFTLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztnQkFDakMsSUFBSSxRQUFRLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ2xELElBQUksU0FBUyxHQUFHLEVBQUUsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUM7Z0JBQ3ZDLEVBQUUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUM7b0JBQ3JCLElBQUksUUFBUSxHQUFHLGFBQWEsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUM7b0JBQ2pELGFBQWEsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7Z0JBQ2pDLENBQUM7WUFDTCxDQUFDO1lBQ0QsSUFBSSxDQUFDLGNBQWMsQ0FBQyxhQUFhLENBQUMsR0FBRyxhQUFhLENBQUM7UUFDdkQsQ0FBQztRQUNELE1BQU0sQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQzlDLENBQUM7SUF6RWMsNEJBQWMsR0FBMkIsRUFBRSxDQUFDO0lBTTVDLHVCQUFTLEdBQXNCLEVBQUUsQ0FBQztJQW9FckQsb0JBQUM7QUFBRCxDQS9FQSxBQStFQyxJQUFBO0FBL0VZLHFCQUFhLGdCQStFekIsQ0FBQSIsImZpbGUiOiJzcmMvQ29udGVudFBhcnNlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGUgRmlsZSBjb250YWluaW5nIGV2ZXJ5dGhpbmcgcmVsYXRlZCB0byBjb250ZW50IHBhcnNpbmdcbiAqIEBhdXRob3IgVGltdXIgS3V6aGFnYWxpeWV2IDx0aW0ua3V6aEBnbWFpbC5jb20+XG4gKiBAY29weXJpZ2h0IDIwMTZcbiAqIEBsaWNlbnNlIEdQTC0zLjBcbiAqIEBzaW5jZSAwLjAuMVxuICovXG5cbmltcG9ydCAqIGFzIGZzIGZyb20gJ2ZzJztcbmltcG9ydCAqIGFzIHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgKiBhcyBmbSBmcm9tICdmcm9udC1tYXR0ZXInO1xuaW1wb3J0IHtVdGlsfSBmcm9tICcuL2hlbHBlcnMvVXRpbCc7XG5cbi8qKlxuICogSW50ZXJmYWNlIGZvciBjb250ZW50IGNhY2hlXG4gKiBAc2luY2UgMC4wLjFcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJRGlyZWN0b3J5Q29udGVudENhY2hlIHtcbiAgICBbcGF0aDogc3RyaW5nXTogSVByb2Nlc3NlZEZpbGVDb250ZW50W107XG59XG5leHBvcnQgaW50ZXJmYWNlIElGaWxlQ29udGVudENhY2hlIHtcbiAgICBbcGF0aDogc3RyaW5nXTogSVByb2Nlc3NlZEZpbGVDb250ZW50O1xufVxuXG4vKipcbiAqIEludGVyZmFjZXMgZm9yIHByb2Nlc3NlZCBkYXRhXG4gKiBAc2luY2UgMC4xLjIgQWRkZWQgYElQcm9jZXNzZWRDb250ZW50YFxuICogQHNpbmNlIDAuMC4xXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSVByb2Nlc3NlZENvbnRlbnQge1xuICAgIHRpdGxlPzogc3RyaW5nO1xuICAgIGNvbnRlbnQ6IHN0cmluZztcbiAgICBba2V5OiBzdHJpbmddOiBhbnk7XG59XG5leHBvcnQgaW50ZXJmYWNlIElQcm9jZXNzZWRGaWxlQ29udGVudCBleHRlbmRzIElQcm9jZXNzZWRDb250ZW50IHtcbiAgICBmaWxlOiBzdHJpbmc7XG59XG5cbi8qKlxuICogQGNsYXNzIENvbGxlY3Rpb24gb2Ygc3RhdGljIG1ldGhvZHMgZm9yIGNvbnRlbnQgcGFyc2luZ1xuICogQHNpbmNlIDAuMC4xXG4gKi9cbmV4cG9ydCBjbGFzcyBDb250ZW50UGFyc2VyIHtcbiAgICAvKipcbiAgICAgKiBDYWNoZSBmb3IgdGhlIGNvbnRlbnRzIG9mIGEgZGlyZWN0b3J5XG4gICAgICogQHNpbmNlIDAuMC4xXG4gICAgICovXG4gICAgcHJpdmF0ZSBzdGF0aWMgZGlyZWN0b3J5Q2FjaGU6IElEaXJlY3RvcnlDb250ZW50Q2FjaGUgPSB7fTtcblxuICAgIC8qKlxuICAgICAqIENhY2hlIGZvciB0aGUgY29udGVudHMgb2YgYSBmaWxlXG4gICAgICogQHNpbmNlIDAuMC4xXG4gICAgICovXG4gICAgcHJpdmF0ZSBzdGF0aWMgZmlsZUNhY2hlOiBJRmlsZUNvbnRlbnRDYWNoZSA9IHt9O1xuXG4gICAgLyoqXG4gICAgICogRXh0cmFjdHMgZnJvbnQgbWF0dGVyIHVzaW5nIHRoZSBgZnJvbnQtbWF0dGVyYCBwYWNrYWdlIGFuZCBhZGRzIGEgYGNvbnRlbnRgIHByb3BlcnR5XG4gICAgICpcbiAgICAgKiBJZiBZQU1MIGV4dHJhY3RlZCBmcm9tIGZyb250IG1hdHRlciBpcyBhIHN0cmluZywgbWFrZSBpdCB0aGUgYHRpdGxlYC5cbiAgICAgKlxuICAgICAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2p4c29uL2Zyb250LW1hdHRlclxuICAgICAqIEBzaW5jZSAwLjEuMiBOb3cgdXNlcyBgZnJvbnQtbWF0dGVyYCBwYWNrYWdlXG4gICAgICogQHNpbmNlIDAuMC4xXG4gICAgICovXG4gICAgcHVibGljIHN0YXRpYyBwYXJzZShjb250ZW50OiBzdHJpbmcpOiBJUHJvY2Vzc2VkQ29udGVudCB7XG4gICAgICAgIGxldCByZXN1bHQ7XG4gICAgICAgIGxldCBwYXJzZWRGcm9udE1hdHRlciA9IGZtKGNvbnRlbnQpO1xuICAgICAgICBpZiAodHlwZW9mIHBhcnNlZEZyb250TWF0dGVyLmF0dHJpYnV0ZXMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICByZXN1bHQgPSB7XG4gICAgICAgICAgICAgICAgdGl0bGU6IHBhcnNlZEZyb250TWF0dGVyLmF0dHJpYnV0ZXMsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzdWx0ID0gcGFyc2VkRnJvbnRNYXR0ZXIuYXR0cmlidXRlcztcbiAgICAgICAgfVxuICAgICAgICByZXN1bHQuY29udGVudCA9IFV0aWwucGFyc2VNYXJrZG93bihwYXJzZWRGcm9udE1hdHRlci5ib2R5KTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBMb2FkcyBjb250ZW50IG9mIHRoZSBzdXBwbGllZCBmaWxlIGFuZCBwaXBlcyBpdCBpbnRvIGBVdGlsLnBhcnNlKClgIG9yIHJldHVybnMgZnJvbSBjYWNoZSBpZiBwb3NzaWJsZS5cbiAgICAgKlxuICAgICAqIEFkZHMgYSBwcm9wZXJ0eSBjYWxsZWQgYGZpbGVgIHRvIHRoZSByYXcgZGF0YS5cbiAgICAgKlxuICAgICAqIEBzaW5jZSAwLjEuMiBSZW1vdmVkIHRyeS9jYXRjaCBibG9ja3NcbiAgICAgKiBAc2luY2UgMC4wLjFcbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIHBhcnNlRmlsZShmaWxlUGF0aDogc3RyaW5nKTogSVByb2Nlc3NlZEZpbGVDb250ZW50IHtcbiAgICAgICAgaWYgKHRoaXMuZmlsZUNhY2hlW2ZpbGVQYXRoXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBsZXQgZmlsZUNvbnRlbnRzID0gVXRpbC5nZXRGaWxlQ29udGVudHMoZmlsZVBhdGgpO1xuICAgICAgICAgICAgbGV0IHJhd0RhdGEgPSBDb250ZW50UGFyc2VyLnBhcnNlKGZpbGVDb250ZW50cyk7XG4gICAgICAgICAgICAocmF3RGF0YSBhcyBJUHJvY2Vzc2VkRmlsZUNvbnRlbnQpLmZpbGUgPSBwYXRoLmJhc2VuYW1lKGZpbGVQYXRoKTtcbiAgICAgICAgICAgIHRoaXMuZmlsZUNhY2hlW2ZpbGVQYXRoXSA9IChyYXdEYXRhIGFzIElQcm9jZXNzZWRGaWxlQ29udGVudCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuZmlsZUNhY2hlW2ZpbGVQYXRoXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBMb2FkcyBjb250ZW50IG9mIGEgZGlyZWN0b3J5LCBhcyBhbiBhcnJheSB3aXRoIGFuIGVsZW1lbnQgZm9yIGVhY2ggZmlsZSwgb3IgcmV0dXJucyBmcm9tIGNhY2hlIGlmIHBvc3NpYmxlLlxuICAgICAqXG4gICAgICogVGhpcyBmdW5jdGlvbiBpcyBOT1QgcmVjdXJzaXZlLCBpLmUuIGl0IHdpbGwgTk9UIHBhcnNlIG5lc3RlZCBkaXJlY3Rvcmllcy5cbiAgICAgKlxuICAgICAqIEBzaW5jZSAwLjEuMiBSZW1vdmVkIHRyeS9jYXRjaCBibG9ja3NcbiAgICAgKiBAc2luY2UgMC4wLjFcbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIHBhcnNlRGlyZWN0b3J5KGRpcmVjdG9yeVBhdGg6IHN0cmluZyk6IElQcm9jZXNzZWRGaWxlQ29udGVudFtdIHtcbiAgICAgICAgaWYgKHRoaXMuZGlyZWN0b3J5Q2FjaGVbZGlyZWN0b3J5UGF0aF0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgbGV0IGZpbGVzID0gZnMucmVhZGRpclN5bmMoZGlyZWN0b3J5UGF0aCk7XG4gICAgICAgICAgICBsZXQgZmlsZUNvdW50ID0gZmlsZXMubGVuZ3RoO1xuICAgICAgICAgICAgbGV0IGRpcmVjdG9yeURhdGE6IGFueVtdID0gW107XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGZpbGVDb3VudDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgbGV0IGZpbGVQYXRoID0gcGF0aC5qb2luKGRpcmVjdG9yeVBhdGgsIGZpbGVzW2ldKTtcbiAgICAgICAgICAgICAgICBsZXQgZmlsZVN0YXRzID0gZnMubHN0YXRTeW5jKGZpbGVQYXRoKTtcbiAgICAgICAgICAgICAgICBpZiAoZmlsZVN0YXRzLmlzRmlsZSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBmaWxlRGF0YSA9IENvbnRlbnRQYXJzZXIucGFyc2VGaWxlKGZpbGVQYXRoKTtcbiAgICAgICAgICAgICAgICAgICAgZGlyZWN0b3J5RGF0YS5wdXNoKGZpbGVEYXRhKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmRpcmVjdG9yeUNhY2hlW2RpcmVjdG9yeVBhdGhdID0gZGlyZWN0b3J5RGF0YTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5kaXJlY3RvcnlDYWNoZVtkaXJlY3RvcnlQYXRoXTtcbiAgICB9XG59XG4iXX0=
