"use strict";
var mock = require('mock-fs');
var chai_1 = require('chai');
var ContentFile_1 = require('../../../src/files/ContentFile');
describe('ContentFile', function () {
    describe('#reload()', function () {
        it('extracts the content of the file correctly', function () {
            var contentString = 'Hello World!';
            var fileContents = '---\n---\n' + contentString;
            var mockConfig = {
                'test.txt': mock.file({
                    content: fileContents,
                    mode: 777,
                }),
            };
            mock(mockConfig);
            var file = new ContentFile_1.ContentFile('', 'test.txt');
            file.reload();
            var idFunction = function (input) { return input; };
            var generatedString = file.getContent().generate(idFunction, idFunction, idFunction);
            chai_1.assert.equal(generatedString, contentString);
            mock.restore();
        });
    });
    describe('#write()', function () {
        it('throws an error because operation is prohibited', function () {
            var contentFile = new ContentFile_1.ContentFile('', 'test.txt');
            chai_1.assert.throws(function () { return contentFile.write(); });
        });
    });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3Rlc3QvdW5pdC9maWxlcy9Db250ZW50RmlsZVRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQVFBLElBQVksSUFBSSxXQUFNLFNBQVMsQ0FBQyxDQUFBO0FBQ2hDLHFCQUFxQixNQUFNLENBQUMsQ0FBQTtBQUM1Qiw0QkFBMEIsZ0NBQWdDLENBQUMsQ0FBQTtBQUUzRCxRQUFRLENBQUMsYUFBYSxFQUFFO0lBQ3BCLFFBQVEsQ0FBQyxXQUFXLEVBQUU7UUFFbEIsRUFBRSxDQUFDLDRDQUE0QyxFQUFFO1lBQzdDLElBQUksYUFBYSxHQUFHLGNBQWMsQ0FBQztZQUNuQyxJQUFJLFlBQVksR0FBRyxZQUFZLEdBQUcsYUFBYSxDQUFDO1lBQ2hELElBQUksVUFBVSxHQUFHO2dCQUNiLFVBQVUsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDO29CQUNsQixPQUFPLEVBQUUsWUFBWTtvQkFDckIsSUFBSSxFQUFFLEdBQUc7aUJBQ1osQ0FBQzthQUNMLENBQUM7WUFDRixJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7WUFDakIsSUFBSSxJQUFJLEdBQUcsSUFBSSx5QkFBVyxDQUFDLEVBQUUsRUFBRSxVQUFVLENBQUMsQ0FBQztZQUMzQyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7WUFDZCxJQUFJLFVBQVUsR0FBRyxVQUFDLEtBQWEsSUFBSyxPQUFBLEtBQUssRUFBTCxDQUFLLENBQUM7WUFDMUMsSUFBSSxlQUFlLEdBQUcsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDLFFBQVEsQ0FBQyxVQUFVLEVBQUUsVUFBVSxFQUFFLFVBQVUsQ0FBQyxDQUFDO1lBQ3JGLGFBQU0sQ0FBQyxLQUFLLENBQUMsZUFBZSxFQUFFLGFBQWEsQ0FBQyxDQUFDO1lBQzdDLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUNuQixDQUFDLENBQUMsQ0FBQztJQUNQLENBQUMsQ0FBQyxDQUFDO0lBQ0gsUUFBUSxDQUFDLFVBQVUsRUFBRTtRQUNqQixFQUFFLENBQUMsaURBQWlELEVBQUU7WUFDbEQsSUFBSSxXQUFXLEdBQUcsSUFBSSx5QkFBVyxDQUFDLEVBQUUsRUFBRSxVQUFVLENBQUMsQ0FBQztZQUNsRCxhQUFNLENBQUMsTUFBTSxDQUFDLGNBQU0sT0FBQSxXQUFXLENBQUMsS0FBSyxFQUFFLEVBQW5CLENBQW1CLENBQUMsQ0FBQztRQUM3QyxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyxDQUFDLENBQUMiLCJmaWxlIjoidGVzdC91bml0L2ZpbGVzL0NvbnRlbnRGaWxlVGVzdC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGUgQ29udGVudEZpbGUgdGVzdHNcbiAqIEBhdXRob3IgVGltdXIgS3V6aGFnYWxpeWV2IDx0aW0ua3V6aEBnbWFpbC5jb20+XG4gKiBAY29weXJpZ2h0IDIwMTZcbiAqIEBsaWNlbnNlIEdQTC0zLjBcbiAqIEBzaW5jZSAwLjIuMFxuICovXG5cbmltcG9ydCAqIGFzIG1vY2sgZnJvbSAnbW9jay1mcyc7XG5pbXBvcnQge2Fzc2VydH0gZnJvbSAnY2hhaSc7XG5pbXBvcnQge0NvbnRlbnRGaWxlfSBmcm9tICcuLi8uLi8uLi9zcmMvZmlsZXMvQ29udGVudEZpbGUnO1xuXG5kZXNjcmliZSgnQ29udGVudEZpbGUnLCAoKSA9PiB7XG4gICAgZGVzY3JpYmUoJyNyZWxvYWQoKScsICgpID0+IHtcbiAgICAgICAgLy8gVE9ETzogQWRkIG1vcmUgdGVzdHMgZm9yIHJlbG9hZCgpIG9uY2UgaXRzIGNvbXBsZXRlXG4gICAgICAgIGl0KCdleHRyYWN0cyB0aGUgY29udGVudCBvZiB0aGUgZmlsZSBjb3JyZWN0bHknLCAoKSA9PiB7XG4gICAgICAgICAgICBsZXQgY29udGVudFN0cmluZyA9ICdIZWxsbyBXb3JsZCEnO1xuICAgICAgICAgICAgbGV0IGZpbGVDb250ZW50cyA9ICctLS1cXG4tLS1cXG4nICsgY29udGVudFN0cmluZztcbiAgICAgICAgICAgIGxldCBtb2NrQ29uZmlnID0ge1xuICAgICAgICAgICAgICAgICd0ZXN0LnR4dCc6IG1vY2suZmlsZSh7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IGZpbGVDb250ZW50cyxcbiAgICAgICAgICAgICAgICAgICAgbW9kZTogNzc3LFxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIG1vY2sobW9ja0NvbmZpZyk7XG4gICAgICAgICAgICBsZXQgZmlsZSA9IG5ldyBDb250ZW50RmlsZSgnJywgJ3Rlc3QudHh0Jyk7XG4gICAgICAgICAgICBmaWxlLnJlbG9hZCgpO1xuICAgICAgICAgICAgbGV0IGlkRnVuY3Rpb24gPSAoaW5wdXQ6IHN0cmluZykgPT4gaW5wdXQ7XG4gICAgICAgICAgICBsZXQgZ2VuZXJhdGVkU3RyaW5nID0gZmlsZS5nZXRDb250ZW50KCkuZ2VuZXJhdGUoaWRGdW5jdGlvbiwgaWRGdW5jdGlvbiwgaWRGdW5jdGlvbik7XG4gICAgICAgICAgICBhc3NlcnQuZXF1YWwoZ2VuZXJhdGVkU3RyaW5nLCBjb250ZW50U3RyaW5nKTtcbiAgICAgICAgICAgIG1vY2sucmVzdG9yZSgpO1xuICAgICAgICB9KTtcbiAgICB9KTtcbiAgICBkZXNjcmliZSgnI3dyaXRlKCknLCAoKSA9PiB7XG4gICAgICAgIGl0KCd0aHJvd3MgYW4gZXJyb3IgYmVjYXVzZSBvcGVyYXRpb24gaXMgcHJvaGliaXRlZCcsICgpID0+IHtcbiAgICAgICAgICAgIGxldCBjb250ZW50RmlsZSA9IG5ldyBDb250ZW50RmlsZSgnJywgJ3Rlc3QudHh0Jyk7XG4gICAgICAgICAgICBhc3NlcnQudGhyb3dzKCgpID0+IGNvbnRlbnRGaWxlLndyaXRlKCkpO1xuICAgICAgICB9KTtcbiAgICB9KTtcbn0pO1xuIl19
