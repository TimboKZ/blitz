"use strict";
var yaml = require("js-yaml");
var marked = require("marked");
var fs = require("fs");
var path = require("path");
var colors = require("colors");
var Util = (function () {
    function Util() {
    }
    Util.getPackageInfo = function () {
        if (this.packageInfoCache === undefined) {
            this.packageInfoCache = require('../../../package.json');
        }
        return this.packageInfoCache;
    };
    Util.logWithPrefix = function (prefix, object) {
        console.log(prefix + ' ' + object.toString());
    };
    Util.log = function (object) {
        Util.logWithPrefix(colors.cyan('[Blitz LOG]'), object);
    };
    Util.warn = function (object) {
        Util.logWithPrefix(colors.yellow('[Blitz WRN]'), object);
    };
    Util.error = function (object) {
        Util.logWithPrefix(colors.red('[Blitz ERR]'), object);
    };
    Util.stackTrace = function (object) {
        console.log(object);
    };
    Util.debug = function (object) {
        if (global.debug) {
            Util.logWithPrefix(colors.yellow('[Blitz DEBUG]'), object);
        }
    };
    Util.parseYaml = function (yamlString) {
        Util.debug('Parsing  YAML...');
        yamlString = yamlString.replace(/^\s+|\s+$/g, '');
        if (yamlString === '') {
            return {};
        }
        return yaml.safeLoad(yamlString);
    };
    Util.parseMarkdown = function (markdown) {
        return marked(markdown);
    };
    Util.pathExists = function (path) {
        try {
            fs.accessSync(path);
            return true;
        }
        catch (e) {
            return false;
        }
    };
    Util.writeFileFromArray = function (basePath, array, contents) {
        if (array.length === 0) {
            Util.error('Cannot write file from an empty array!');
            console.trace();
            return false;
        }
        var currentPath = basePath;
        var count = array.length;
        for (var i = 0; i < count - 1; i++) {
            currentPath = path.join(currentPath, array[i]);
            if (!Util.createDirectory(currentPath)) {
                return false;
            }
        }
        try {
            fs.writeFileSync(path.join(currentPath, array[count - 1]), contents);
        }
        catch (e) {
            Util.error('Error writing to `' + basePath + '`!');
            Util.stackTrace(e);
            return false;
        }
        return true;
    };
    Util.getFileContents = function (filePath) {
        Util.debug('Reading contents of `' + filePath + '`...');
        return fs.readFileSync(filePath, 'utf8');
    };
    Util.createDirectory = function (directoryPath) {
        try {
            if (!fs.existsSync(directoryPath)) {
                fs.mkdirSync(directoryPath);
            }
            return true;
        }
        catch (e) {
            Util.error('Error creating directory `' + directoryPath + '`.');
            Util.stackTrace(e);
            return false;
        }
    };
    Util.removeDirectory = function (directoryPath) {
        var files = [];
        try {
            if (fs.existsSync(directoryPath)) {
                files = fs.readdirSync(directoryPath);
                files.forEach(function (file) {
                    var currentPath = path.join(directoryPath, file);
                    if (fs.lstatSync(currentPath).isDirectory()) {
                        Util.removeDirectory(currentPath);
                    }
                    else {
                        fs.unlinkSync(currentPath);
                    }
                });
                fs.rmdirSync(directoryPath);
            }
        }
        catch (e) {
            Util.error('Could not recursively remove a directory!');
            Util.stackTrace(e);
            return false;
        }
        return true;
    };
    Util.stripSlashes = function (stringWithSlashes) {
        stringWithSlashes = stringWithSlashes.replace(new RegExp('^/*'), '');
        stringWithSlashes = stringWithSlashes.replace(new RegExp('/*$'), '');
        return stringWithSlashes;
    };
    Util.getUriComponents = function (uri) {
        var strippedUri = Util.stripSlashes(uri);
        var components = strippedUri.split('/');
        if (components[0] === '') {
            return [];
        }
        return components;
    };
    Util.extractFileName = function (filePath) {
        return path.basename(filePath).replace(/\.[^/.]+$/, '');
    };
    Util.generateRandomString = function (length) {
        var characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
        var result = '';
        for (var i = length; i > 0; --i) {
            result += characters[Math.floor(Math.random() * characters.length)];
        }
        return result;
    };
    Util.isEmpty = function (object) {
        return Object.keys(object).length === 0;
    };
    Util.isString = function (object) {
        return typeof object === 'string';
    };
    return Util;
}());
exports.Util = Util;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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QUFDLFFBQVEsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDNUQsQ0FBQztJQU1hLHlCQUFvQixHQUFsQyxVQUFtQyxNQUFjO1FBQzdDLElBQUksVUFBVSxHQUFHLGdFQUFnRSxDQUFDO1FBQ2xGLElBQUksTUFBTSxHQUFHLEVBQUUsQ0FBQztRQUNoQixHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDO1lBQzlCLE1BQU0sSUFBSSxVQUFVLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7UUFDeEUsQ0FBQztRQUNELE1BQU0sQ0FBQyxNQUFNLENBQUM7SUFDbEIsQ0FBQztJQU1hLFlBQU8sR0FBckIsVUFBc0IsTUFBVztRQUM3QixNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFNLEtBQUssQ0FBQyxDQUFDO0lBQzVDLENBQUM7SUFNYSxhQUFRLEdBQXRCLFVBQXVCLE1BQVc7UUFDOUIsTUFBTSxDQUFDLE9BQU8sTUFBTSxLQUFLLFFBQVEsQ0FBQztJQUN0QyxDQUFDO0lBQ0wsV0FBQztBQUFELENBN1BBLEFBNlBDLElBQUE7QUE3UFksb0JBQUkiLCJmaWxlIjoic3JjL2hlbHBlcnMvVXRpbC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGUgVXRpbGl0eSBjbGFzc2VzIGFuZCBpbnRlcmZhY2VzIGZvciBCbGl0ei5cbiAqIEBhdXRob3IgVGltdXIgS3V6aGFnYWxpeWV2IDx0aW0ua3V6aEBnbWFpbC5jb20+XG4gKiBAY29weXJpZ2h0IDIwMTZcbiAqIEBsaWNlbnNlIEdQTC0zLjBcbiAqIEBzaW5jZSAwLjAuMVxuICovXG5cbmltcG9ydCAqIGFzIHlhbWwgZnJvbSAnanMteWFtbCc7XG5pbXBvcnQgKiBhcyBtYXJrZWQgZnJvbSAnbWFya2VkJztcbmltcG9ydCAqIGFzIGZzIGZyb20gJ2ZzJztcbmltcG9ydCAqIGFzIHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgKiBhcyBjb2xvcnMgZnJvbSAnY29sb3JzJztcblxuLyoqXG4gKiBAY2xhc3MgVXRpbGl0eSBjbGFzcyBmb3IgQmxpdHouXG4gKiBAc2luY2UgMC4wLjFcbiAqL1xuZXhwb3J0IGNsYXNzIFV0aWwge1xuICAgIC8qKlxuICAgICAqIENhY2hlIGZvciBwYWNrYWdlIGluZm9cbiAgICAgKiBAc2luY2UgMC4xLjNcbiAgICAgKi9cbiAgICBwcml2YXRlIHN0YXRpYyBwYWNrYWdlSW5mb0NhY2hlOiBhbnk7XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHBhY2thZ2UgaW5mbyBmcm9tIGBwYWNrYWdlLmpzb25gXG4gICAgICogQHNpbmNlIDAuMS4zXG4gICAgICovXG4gICAgcHVibGljIHN0YXRpYyBnZXRQYWNrYWdlSW5mbygpIHtcbiAgICAgICAgaWYgKHRoaXMucGFja2FnZUluZm9DYWNoZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLnBhY2thZ2VJbmZvQ2FjaGUgPSByZXF1aXJlKCcuLi8uLi8uLi9wYWNrYWdlLmpzb24nKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5wYWNrYWdlSW5mb0NhY2hlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIExvZ3MgYW4gb2JqZWN0IHRvIGNvbnNvbGUgcHJlZml4aW5nIGl0IHdpdGggdGhlIHNwZWNpZmllZCBzdHJpbmcuXG4gICAgICogQGRlcHJlY2F0ZWQgVXNlIExvZ2dlci5sb2dXaXRoUHJlZml4KCkgaW5zdGVhZFxuICAgICAqIEBzaW5jZSAwLjAuMVxuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgbG9nV2l0aFByZWZpeChwcmVmaXg6IHN0cmluZywgb2JqZWN0OiBhbnkpIHtcbiAgICAgICAgY29uc29sZS5sb2cocHJlZml4ICsgJyAnICsgb2JqZWN0LnRvU3RyaW5nKCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIExvZ3MgZGF0YSBpbnRvIGNvbnNvbGVcbiAgICAgKiBAZGVwcmVjYXRlZCBVc2UgTG9nZ2VyLmxvZygpIGluc3RlYWRcbiAgICAgKiBAc2luY2UgMC4wLjFcbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIGxvZyhvYmplY3Q6IGFueSkge1xuICAgICAgICBVdGlsLmxvZ1dpdGhQcmVmaXgoY29sb3JzLmN5YW4oJ1tCbGl0eiBMT0ddJyksIG9iamVjdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTG9ncyBhIHdhcm5pbmcgaW50byBjb25zb2xlXG4gICAgICogQGRlcHJlY2F0ZWQgVXNlIExvZ2dlci53YXJuKCkgaW5zdGVhZFxuICAgICAqIEBzaW5jZSAwLjEuM1xuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgd2FybihvYmplY3Q6IGFueSkge1xuICAgICAgICBVdGlsLmxvZ1dpdGhQcmVmaXgoY29sb3JzLnllbGxvdygnW0JsaXR6IFdSTl0nKSwgb2JqZWN0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBMb2dzIGVycm9yIGRhdGEgaW50byBjb25zb2xlXG4gICAgICogQGRlcHJlY2F0ZWQgVXNlIExvZ2dlci5lcnJvcigpIGluc3RlYWRcbiAgICAgKiBAc2luY2UgMC4wLjFcbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIGVycm9yKG9iamVjdDogYW55KSB7XG4gICAgICAgIFV0aWwubG9nV2l0aFByZWZpeChjb2xvcnMucmVkKCdbQmxpdHogRVJSXScpLCBvYmplY3QpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFByaW50IG91dCB0aGUgZXJyb3IgYXMgaXNcbiAgICAgKiBAc2luY2UgMC4wLjFcbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIHN0YWNrVHJhY2Uob2JqZWN0OiBhbnkpIHtcbiAgICAgICAgY29uc29sZS5sb2cob2JqZWN0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBMb2dzIGRlYnVnIGRhdGEgaW50byBjb25zb2xlXG4gICAgICogQGRlcHJlY2F0ZWQgVXNlIExvZ2dlci5kZWJ1ZygpIGluc3RlYWRcbiAgICAgKiBAc2luY2UgMC4wLjFcbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIGRlYnVnKG9iamVjdDogYW55KSB7XG4gICAgICAgIGlmIChnbG9iYWwuZGVidWcpIHtcbiAgICAgICAgICAgIFV0aWwubG9nV2l0aFByZWZpeChjb2xvcnMueWVsbG93KCdbQmxpdHogREVCVUddJyksIG9iamVjdCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQcm9kdWNlcyBhbiBvYmplY3QgZnJvbSBZQU1MIHN0cmluZyBpZiBwb3NzaWJsZSwgcmV0dXJucyB1bmRlZmluZWQgb3RoZXJ3aXNlLlxuICAgICAqIEBzaW5jZSAwLjEuMiBSZXR1cm5zIGVtcHR5IG9iamVjdCBmb3IgZmlsZXMgdGhhdCBvbmx5IGhhdmUgd2hpdGVzcGFjZVxuICAgICAqIEBzaW5jZSAwLjEuMiBSZW1vdmVkIHRyeS9jYXRjaCBibG9ja1xuICAgICAqIEBzaW5jZSAwLjAuMVxuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgcGFyc2VZYW1sKHlhbWxTdHJpbmc6IHN0cmluZyk6IGFueSB7XG4gICAgICAgIFV0aWwuZGVidWcoJ1BhcnNpbmcgIFlBTUwuLi4nKTtcbiAgICAgICAgeWFtbFN0cmluZyA9IHlhbWxTdHJpbmcucmVwbGFjZSgvXlxccyt8XFxzKyQvZywgJycpO1xuICAgICAgICBpZiAoeWFtbFN0cmluZyA9PT0gJycpIHtcbiAgICAgICAgICAgIHJldHVybiB7fTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geWFtbC5zYWZlTG9hZCh5YW1sU3RyaW5nKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBNYXJrZG93biBpbnRvIEhUTUxcbiAgICAgKiBAc2luY2UgMC4wLjFcbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIHBhcnNlTWFya2Rvd24obWFya2Rvd246IHN0cmluZyk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBtYXJrZWQobWFya2Rvd24pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyB0aGF0IGEgZGlyZWN0b3J5IG9yIGEgZmlsZSBleGlzdHNcbiAgICAgKiBAc2luY2UgMC4wLjFcbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIHBhdGhFeGlzdHMocGF0aDogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBUT0RPOiBBZGQgbW9kZSB0byBgYWNjZXNzU3luYygpYFxuICAgICAgICAgICAgZnMuYWNjZXNzU3luYyhwYXRoKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGZvbGRlcnMgd2l0aCBuYW1lcyBpZGVudGljYWwgdG8gdGhhdCBpbiB0aGUgYXJyYXksIGFuZCB1c2VzIHRoZSBsYXN0IGVsZW1lbnQgaW4gdGhlIGFycmF5IGFzIHRoZSBmaWxlXG4gICAgICogbmFtZSB0byB3aGljaCB0aGUgY29udGVudHMgd2lsbCBiZSB3cml0dGVuLlxuICAgICAqIEBzaW5jZSAwLjAuMVxuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgd3JpdGVGaWxlRnJvbUFycmF5KGJhc2VQYXRoOiBzdHJpbmcsIGFycmF5OiBzdHJpbmdbXSwgY29udGVudHM6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgICAgICBpZiAoYXJyYXkubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBVdGlsLmVycm9yKCdDYW5ub3Qgd3JpdGUgZmlsZSBmcm9tIGFuIGVtcHR5IGFycmF5IScpO1xuICAgICAgICAgICAgY29uc29sZS50cmFjZSgpO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGxldCBjdXJyZW50UGF0aCA9IGJhc2VQYXRoO1xuICAgICAgICBsZXQgY291bnQgPSBhcnJheS5sZW5ndGg7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY291bnQgLSAxOyBpKyspIHtcbiAgICAgICAgICAgIGN1cnJlbnRQYXRoID0gcGF0aC5qb2luKGN1cnJlbnRQYXRoLCBhcnJheVtpXSk7XG4gICAgICAgICAgICBpZiAoIVV0aWwuY3JlYXRlRGlyZWN0b3J5KGN1cnJlbnRQYXRoKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgZnMud3JpdGVGaWxlU3luYyhwYXRoLmpvaW4oY3VycmVudFBhdGgsIGFycmF5W2NvdW50IC0gMV0pLCBjb250ZW50cyk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIFV0aWwuZXJyb3IoJ0Vycm9yIHdyaXRpbmcgdG8gYCcgKyBiYXNlUGF0aCArICdgIScpO1xuICAgICAgICAgICAgVXRpbC5zdGFja1RyYWNlKGUpO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIExvYWRzIGZpbGUgZnJvbSB0aGUgc3BlY2lmaWVkIHBhdGggaWYgcG9zc2libGUsIHJldHVybnMgdW5kZWZpbmVkIG90aGVyd2lzZVxuICAgICAqIEBkZXByZWNhdGVkIFVzZSBgZnMucmVhZEZpbGVTeW5jKClgIGRpcmVjdGx5XG4gICAgICogQHNpbmNlIDAuMS4yIFJlbW92ZWQgdHJ5L2NhdGNoIGJsb2NrXG4gICAgICogQHNpbmNlIDAuMC4xXG4gICAgICovXG4gICAgcHVibGljIHN0YXRpYyBnZXRGaWxlQ29udGVudHMoZmlsZVBhdGg6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgICAgIFV0aWwuZGVidWcoJ1JlYWRpbmcgY29udGVudHMgb2YgYCcgKyBmaWxlUGF0aCArICdgLi4uJyk7XG4gICAgICAgIHJldHVybiBmcy5yZWFkRmlsZVN5bmMoZmlsZVBhdGgsICd1dGY4Jyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGRpcmVjdG9yeSBpZiBpdCBkb2Vzbid0IGV4aXN0XG4gICAgICogQHNpbmNlIDAuMC4xXG4gICAgICovXG4gICAgcHVibGljIHN0YXRpYyBjcmVhdGVEaXJlY3RvcnkoZGlyZWN0b3J5UGF0aDogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAoIWZzLmV4aXN0c1N5bmMoZGlyZWN0b3J5UGF0aCkpIHtcbiAgICAgICAgICAgICAgICBmcy5ta2RpclN5bmMoZGlyZWN0b3J5UGF0aCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgVXRpbC5lcnJvcignRXJyb3IgY3JlYXRpbmcgZGlyZWN0b3J5IGAnICsgZGlyZWN0b3J5UGF0aCArICdgLicpO1xuICAgICAgICAgICAgVXRpbC5zdGFja1RyYWNlKGUpO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVjdXJzaXZlbHkgcmVtb3ZlcyBhIGRpcmVjdG9yeSBpZiBpdCBleGlzdHNcbiAgICAgKiBAc2luY2UgMC4wLjFcbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIHJlbW92ZURpcmVjdG9yeShkaXJlY3RvcnlQYXRoOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICAgICAgbGV0IGZpbGVzID0gW107XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAoZnMuZXhpc3RzU3luYyhkaXJlY3RvcnlQYXRoKSkge1xuICAgICAgICAgICAgICAgIGZpbGVzID0gZnMucmVhZGRpclN5bmMoZGlyZWN0b3J5UGF0aCk7XG4gICAgICAgICAgICAgICAgZmlsZXMuZm9yRWFjaCgoZmlsZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBsZXQgY3VycmVudFBhdGggPSBwYXRoLmpvaW4oZGlyZWN0b3J5UGF0aCwgZmlsZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChmcy5sc3RhdFN5bmMoY3VycmVudFBhdGgpLmlzRGlyZWN0b3J5KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFV0aWwucmVtb3ZlRGlyZWN0b3J5KGN1cnJlbnRQYXRoKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZzLnVubGlua1N5bmMoY3VycmVudFBhdGgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgZnMucm1kaXJTeW5jKGRpcmVjdG9yeVBhdGgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBVdGlsLmVycm9yKCdDb3VsZCBub3QgcmVjdXJzaXZlbHkgcmVtb3ZlIGEgZGlyZWN0b3J5IScpO1xuICAgICAgICAgICAgVXRpbC5zdGFja1RyYWNlKGUpO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYWxsIGNvbnNlcXVlbnQgbGVhZGluZyBhbmQgdHJhaWxpbmcgZm9yd2FyZCBzbGFzaGVzXG4gICAgICogQHNpbmNlIDAuMC4xXG4gICAgICovXG4gICAgcHVibGljIHN0YXRpYyBzdHJpcFNsYXNoZXMoc3RyaW5nV2l0aFNsYXNoZXM6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgICAgIHN0cmluZ1dpdGhTbGFzaGVzID0gc3RyaW5nV2l0aFNsYXNoZXMucmVwbGFjZShuZXcgUmVnRXhwKCdeLyonKSwgJycpO1xuICAgICAgICBzdHJpbmdXaXRoU2xhc2hlcyA9IHN0cmluZ1dpdGhTbGFzaGVzLnJlcGxhY2UobmV3IFJlZ0V4cCgnLyokJyksICcnKTtcbiAgICAgICAgcmV0dXJuIHN0cmluZ1dpdGhTbGFzaGVzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEJyZWFrcyBhIFVSSSBkb3duIGludG8gY29tcG9uZW50c1xuICAgICAqIEBzaW5jZSAwLjAuMVxuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgZ2V0VXJpQ29tcG9uZW50cyh1cmk6IHN0cmluZyk6IHN0cmluZ1tdIHtcbiAgICAgICAgbGV0IHN0cmlwcGVkVXJpID0gVXRpbC5zdHJpcFNsYXNoZXModXJpKTtcbiAgICAgICAgbGV0IGNvbXBvbmVudHMgPSBzdHJpcHBlZFVyaS5zcGxpdCgnLycpO1xuICAgICAgICBpZiAoY29tcG9uZW50c1swXSA9PT0gJycpIHtcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29tcG9uZW50cztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFeHRyYWN0cyB0aGUgZmlsZW5hbWUgZnJvbSBwYXRoLCByZW1vdmluZyB0aGUgZXh0ZW5zaW9uXG4gICAgICogQHNpbmNlIDAuMC4xXG4gICAgICovXG4gICAgcHVibGljIHN0YXRpYyBleHRyYWN0RmlsZU5hbWUoZmlsZVBhdGg6IHN0cmluZykge1xuICAgICAgICByZXR1cm4gcGF0aC5iYXNlbmFtZShmaWxlUGF0aCkucmVwbGFjZSgvXFwuW14vLl0rJC8sICcnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAZGVwcmVjYXRlZCBVc2UgU3RyaW5nSGVscGVyLnJhbmRvbSgpIGluc3RlYWRcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIGdlbmVyYXRlUmFuZG9tU3RyaW5nKGxlbmd0aDogbnVtYmVyKTogc3RyaW5nIHtcbiAgICAgICAgbGV0IGNoYXJhY3RlcnMgPSAnMDEyMzQ1Njc4OWFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6QUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVonO1xuICAgICAgICBsZXQgcmVzdWx0ID0gJyc7XG4gICAgICAgIGZvciAobGV0IGkgPSBsZW5ndGg7IGkgPiAwOyAtLWkpIHtcbiAgICAgICAgICAgIHJlc3VsdCArPSBjaGFyYWN0ZXJzW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGNoYXJhY3RlcnMubGVuZ3RoKV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYW4gb2JqZWN0IGlzIGVtcHR5LCBpLmUuIGlzIGB7fWBcbiAgICAgKiBAc2luY2UgMC4xLjRcbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIGlzRW1wdHkob2JqZWN0OiBhbnkpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKG9iamVjdCkubGVuZ3RoID09PSAwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgaWYgb2JqZWN0IGlzIGEgc3RyaW5nIGFuZCBmYWxzZSBvdGhlcndpc2VcbiAgICAgKiBAc2luY2UgMC4yLjBcbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIGlzU3RyaW5nKG9iamVjdDogYW55KTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0eXBlb2Ygb2JqZWN0ID09PSAnc3RyaW5nJztcbiAgICB9XG59XG4iXX0=
