"use strict";
var path = require('path');
var ProjectInitialiser_1 = require('./core/ProjectInitialiser');
var Logger_1 = require('./cli/Logger');
var ProjectWatcher_1 = require('./core/ProjectWatcher');
var events_1 = require('events');
var ProjectPreviewer_1 = require('./core/ProjectPreviewer');
var ProjectSettings_1 = require('./components/ProjectSettings');
var ProjectBuilder_1 = require('./core/ProjectBuilder');
var Blitz = (function () {
    function Blitz() {
    }
    Blitz.init = function (templateName, projectPath) {
        Logger_1.Logger.log('Initialising a new project in `' +
            Logger_1.Logger.brand(projectPath) + '` using the template `' +
            Logger_1.Logger.brand(templateName) + '`...', Logger_1.LogLevel.Debug);
        var templatesPath = path.join(__dirname, '..', '..', 'templates');
        var projectInitialiser = new ProjectInitialiser_1.ProjectInitialiser(projectPath, templatesPath);
        projectInitialiser.initialise(templateName, function (error) {
            if (error) {
                Logger_1.Logger.logMany(Logger_1.Logger.split(error), Logger_1.LogLevel.Error);
                process.exit(1);
            }
            Logger_1.Logger.log('Project initialised!');
            process.exit(0);
        });
    };
    Blitz.build = function (configPath, buildPath) {
        Logger_1.Logger.log('Building site...');
        Logger_1.Logger.log('Building site using `' +
            Logger_1.Logger.brand(configPath) + '` in directory `' +
            Logger_1.Logger.brand(buildPath) + '`...', Logger_1.LogLevel.Debug);
        var settings = new ProjectSettings_1.ProjectSettings(configPath);
        try {
            settings.config.validate();
            var builder = new ProjectBuilder_1.ProjectBuilder(settings);
            builder.build();
        }
        catch (exception) {
            Logger_1.Logger.log('Error building the project:', Logger_1.LogLevel.Error);
            Logger_1.Logger.logMany(Logger_1.Logger.split(exception.message), Logger_1.LogLevel.Error);
            console.log(exception);
            process.exit(1);
        }
    };
    Blitz.watch = function (configPath, buildPath) {
        Logger_1.Logger.log('Starting project watcher...');
        Logger_1.Logger.log('Watching the project using `' +
            Logger_1.Logger.brand(configPath) + '` with build located in `' +
            Logger_1.Logger.brand(buildPath) + '`...', Logger_1.LogLevel.Debug);
        var eventEmitter = new events_1.EventEmitter();
        var projectWatcher = new ProjectWatcher_1.ProjectWatcher(configPath, buildPath, eventEmitter);
        projectWatcher.watch();
    };
    Blitz.preview = function (configPath, buildPath) {
        Logger_1.Logger.log('Starting preview server...');
        Logger_1.Logger.log('Previewing the project using `' +
            Logger_1.Logger.brand(configPath) + '` with build located in `' +
            Logger_1.Logger.brand(buildPath) + '`...', Logger_1.LogLevel.Debug);
        var eventEmitter = new events_1.EventEmitter();
        var projectPreviewer = new ProjectPreviewer_1.ProjectPreviewer(configPath, buildPath, eventEmitter);
        projectPreviewer.startServer();
    };
    return Blitz;
}());
exports.Blitz = Blitz;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
