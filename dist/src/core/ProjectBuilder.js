"use strict";
var URLHelper_1 = require('../helpers/URLHelper');
var PathHelper_1 = require('../helpers/PathHelper');
var DEFAULT_PAGE_EXTENSION = '.html';
var DEFAULT_INDEX_PAGE = 'index' + DEFAULT_PAGE_EXTENSION;
var ProjectBuilder = (function () {
    function ProjectBuilder(projectSettings) {
        this.settings = projectSettings;
        this.config = this.settings.config.get();
    }
    ProjectBuilder.prototype.build = function () {
        this.preparePages(this.config.pages, []);
    };
    ProjectBuilder.prototype.preparePages = function (pages, currentPath) {
        var length = pages.length;
        for (var i = 0; i < length; i++) {
            this.preparePage(pages[i], currentPath);
        }
    };
    ProjectBuilder.prototype.preparePage = function (page, currentPath) {
        var relativeUriArray = ProjectBuilder.extractRelativeUriArray(page);
        var relativePagePathArray = this.determinePagePathArray(relativeUriArray);
        var pageUri = this.determineUri(relativePagePathArray);
        var fullPagePath = PathHelper_1.PathHelper.join(this.settings.buildPath, currentPath, relativePagePathArray);
        var contentFile;
        console.log(fullPagePath);
        console.log(pageUri);
    };
    ProjectBuilder.extractRelativeUriArray = function (page) {
        var relativePathArray;
        if (page.uri !== undefined) {
            relativePathArray = URLHelper_1.URLHelper.split(page.uri);
        }
        else if (page.content !== undefined) {
            relativePathArray = URLHelper_1.URLHelper.split(PathHelper_1.PathHelper.stripExtension(page.content));
        }
        else if (page.template !== undefined) {
            relativePathArray = URLHelper_1.URLHelper.split(PathHelper_1.PathHelper.stripExtension(page.template));
        }
        else {
            throw new Error('Could not determine page path!');
        }
        return relativePathArray;
    };
    ProjectBuilder.prototype.determinePagePathArray = function (uriArray) {
        var isIndex = uriArray.length === 0 || (uriArray.length === 1 && uriArray[0] === 'index');
        if (isIndex) {
            return [DEFAULT_INDEX_PAGE];
        }
        var lastIndex = uriArray.length - 1;
        if (this.config.explicit_html_extensions) {
            uriArray[lastIndex] = uriArray[lastIndex] + DEFAULT_PAGE_EXTENSION;
        }
        else {
            uriArray.push(DEFAULT_INDEX_PAGE);
        }
        return uriArray;
    };
    ProjectBuilder.prototype.determineUri = function (pagePathArray) {
        var array = pagePathArray.slice(0);
        var lastIndex = array.length - 1;
        if (array[lastIndex] === DEFAULT_INDEX_PAGE
            && !this.config.explicit_html_extensions) {
            array.pop();
        }
        return URLHelper_1.URLHelper.join(array);
    };
    return ProjectBuilder;
}());
exports.ProjectBuilder = ProjectBuilder;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jb3JlL1Byb2plY3RCdWlsZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFRQSwwQkFBd0Isc0JBQXNCLENBQUMsQ0FBQTtBQUMvQywyQkFBeUIsdUJBQXVCLENBQUMsQ0FBQTtBQUVqRCxJQUFNLHNCQUFzQixHQUFHLE9BQU8sQ0FBQztBQUN2QyxJQUFNLGtCQUFrQixHQUFHLE9BQU8sR0FBRyxzQkFBc0IsQ0FBQztBQUU1RDtJQUtJLHdCQUFZLGVBQWdDO1FBQ3hDLElBQUksQ0FBQyxRQUFRLEdBQUcsZUFBZSxDQUFDO1FBQ2hDLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDN0MsQ0FBQztJQUVNLDhCQUFLLEdBQVo7UUFDSSxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQzdDLENBQUM7SUFFTyxxQ0FBWSxHQUFwQixVQUFxQixLQUFvQixFQUFFLFdBQXFCO1FBQzVELElBQUksTUFBTSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUM7UUFDMUIsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztZQUM5QixJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxXQUFXLENBQUMsQ0FBQztRQUM1QyxDQUFDO0lBQ0wsQ0FBQztJQUVPLG9DQUFXLEdBQW5CLFVBQW9CLElBQWlCLEVBQUUsV0FBcUI7UUFDeEQsSUFBSSxnQkFBZ0IsR0FBRyxjQUFjLENBQUMsdUJBQXVCLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDcEUsSUFBSSxxQkFBcUIsR0FBRyxJQUFJLENBQUMsc0JBQXNCLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztRQUMxRSxJQUFJLE9BQU8sR0FBRyxJQUFJLENB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MEVDLElBQUE7QUExRVksc0JBQWMsaUJBMEUxQixDQUFBIiwiZmlsZSI6InNyYy9jb3JlL1Byb2plY3RCdWlsZGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAYXV0aG9yIFRpbXVyIEt1emhhZ2FsaXlldiA8dGltLmt1emhAZ21haWwuY29tPlxuICogQGNvcHlyaWdodCAyMDE3XG4gKiBAbGljZW5zZSBHUEwtMy4wXG4gKi9cblxuaW1wb3J0IHtQcm9qZWN0U2V0dGluZ3N9IGZyb20gJy4uL2NvbXBvbmVudHMvUHJvamVjdFNldHRpbmdzJztcbmltcG9ydCB7SUNvbmZpZ1BhZ2UsIElDb25maWd9IGZyb20gJy4uL2NvbXBvbmVudHMvQ29uZmlnJztcbmltcG9ydCB7VVJMSGVscGVyfSBmcm9tICcuLi9oZWxwZXJzL1VSTEhlbHBlcic7XG5pbXBvcnQge1BhdGhIZWxwZXJ9IGZyb20gJy4uL2hlbHBlcnMvUGF0aEhlbHBlcic7XG5cbmNvbnN0IERFRkFVTFRfUEFHRV9FWFRFTlNJT04gPSAnLmh0bWwnO1xuY29uc3QgREVGQVVMVF9JTkRFWF9QQUdFID0gJ2luZGV4JyArIERFRkFVTFRfUEFHRV9FWFRFTlNJT047XG5cbmV4cG9ydCBjbGFzcyBQcm9qZWN0QnVpbGRlciB7XG5cbiAgICBwcml2YXRlIHNldHRpbmdzOiBQcm9qZWN0U2V0dGluZ3M7XG4gICAgcHJpdmF0ZSBjb25maWc6IElDb25maWc7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcm9qZWN0U2V0dGluZ3M6IFByb2plY3RTZXR0aW5ncykge1xuICAgICAgICB0aGlzLnNldHRpbmdzID0gcHJvamVjdFNldHRpbmdzO1xuICAgICAgICB0aGlzLmNvbmZpZyA9IHRoaXMuc2V0dGluZ3MuY29uZmlnLmdldCgpO1xuICAgIH1cblxuICAgIHB1YmxpYyBidWlsZCgpIHtcbiAgICAgICAgdGhpcy5wcmVwYXJlUGFnZXModGhpcy5jb25maWcucGFnZXMsIFtdKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHByZXBhcmVQYWdlcyhwYWdlczogSUNvbmZpZ1BhZ2VbXSwgY3VycmVudFBhdGg6IHN0cmluZ1tdKSB7XG4gICAgICAgIGxldCBsZW5ndGggPSBwYWdlcy5sZW5ndGg7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHRoaXMucHJlcGFyZVBhZ2UocGFnZXNbaV0sIGN1cnJlbnRQYXRoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgcHJlcGFyZVBhZ2UocGFnZTogSUNvbmZpZ1BhZ2UsIGN1cnJlbnRQYXRoOiBzdHJpbmdbXSkge1xuICAgICAgICBsZXQgcmVsYXRpdmVVcmlBcnJheSA9IFByb2plY3RCdWlsZGVyLmV4dHJhY3RSZWxhdGl2ZVVyaUFycmF5KHBhZ2UpO1xuICAgICAgICBsZXQgcmVsYXRpdmVQYWdlUGF0aEFycmF5ID0gdGhpcy5kZXRlcm1pbmVQYWdlUGF0aEFycmF5KHJlbGF0aXZlVXJpQXJyYXkpO1xuICAgICAgICBsZXQgcGFnZVVyaSA9IHRoaXMuZGV0ZXJtaW5lVXJpKHJlbGF0aXZlUGFnZVBhdGhBcnJheSk7XG4gICAgICAgIGxldCBmdWxsUGFnZVBhdGggPSBQYXRoSGVscGVyLmpvaW4odGhpcy5zZXR0aW5ncy5idWlsZFBhdGgsIGN1cnJlbnRQYXRoLCByZWxhdGl2ZVBhZ2VQYXRoQXJyYXkpO1xuXG4gICAgICAgIC8vIFRPRE86IFJlY3Vyc2l2ZWx5IHByZXBhcmUgcGFnZXMvZGlyZWN0b3JpZXNcblxuICAgICAgICBsZXQgY29udGVudEZpbGVcblxuICAgICAgICBjb25zb2xlLmxvZyhmdWxsUGFnZVBhdGgpO1xuICAgICAgICBjb25zb2xlLmxvZyhwYWdlVXJpKTtcblxuICAgIH1cblxuICAgIHByaXZhdGUgc3RhdGljIGV4dHJhY3RSZWxhdGl2ZVVyaUFycmF5KHBhZ2U6IElDb25maWdQYWdlKTogc3RyaW5nW10ge1xuICAgICAgICBsZXQgcmVsYXRpdmVQYXRoQXJyYXk7XG4gICAgICAgIGlmIChwYWdlLnVyaSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZWxhdGl2ZVBhdGhBcnJheSA9IFVSTEhlbHBlci5zcGxpdChwYWdlLnVyaSk7XG4gICAgICAgIH0gZWxzZSBpZiAocGFnZS5jb250ZW50ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJlbGF0aXZlUGF0aEFycmF5ID0gVVJMSGVscGVyLnNwbGl0KFBhdGhIZWxwZXIuc3RyaXBFeHRlbnNpb24ocGFnZS5jb250ZW50KSk7XG4gICAgICAgIH0gZWxzZSBpZiAocGFnZS50ZW1wbGF0ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZWxhdGl2ZVBhdGhBcnJheSA9IFVSTEhlbHBlci5zcGxpdChQYXRoSGVscGVyLnN0cmlwRXh0ZW5zaW9uKHBhZ2UudGVtcGxhdGUpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ291bGQgbm90IGRldGVybWluZSBwYWdlIHBhdGghJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlbGF0aXZlUGF0aEFycmF5O1xuICAgIH1cblxuICAgIHByaXZhdGUgZGV0ZXJtaW5lUGFnZVBhdGhBcnJheSh1cmlBcnJheTogc3RyaW5nW10pOiBzdHJpbmdbXSB7XG4gICAgICAgIGxldCBpc0luZGV4ID0gdXJpQXJyYXkubGVuZ3RoID09PSAwIHx8ICh1cmlBcnJheS5sZW5ndGggPT09IDEgJiYgdXJpQXJyYXlbMF0gPT09ICdpbmRleCcpO1xuICAgICAgICBpZiAoaXNJbmRleCkge1xuICAgICAgICAgICAgcmV0dXJuIFtERUZBVUxUX0lOREVYX1BBR0VdO1xuICAgICAgICB9XG4gICAgICAgIGxldCBsYXN0SW5kZXggPSB1cmlBcnJheS5sZW5ndGggLSAxO1xuICAgICAgICBpZiAodGhpcy5jb25maWcuZXhwbGljaXRfaHRtbF9leHRlbnNpb25zKSB7XG4gICAgICAgICAgICB1cmlBcnJheVtsYXN0SW5kZXhdID0gdXJpQXJyYXlbbGFzdEluZGV4XSArIERFRkFVTFRfUEFHRV9FWFRFTlNJT047XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB1cmlBcnJheS5wdXNoKERFRkFVTFRfSU5ERVhfUEFHRSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVyaUFycmF5O1xuICAgIH1cblxuICAgIHByaXZhdGUgZGV0ZXJtaW5lVXJpKHBhZ2VQYXRoQXJyYXk6IHN0cmluZ1tdKTogc3RyaW5nIHtcbiAgICAgICAgbGV0IGFycmF5ID0gcGFnZVBhdGhBcnJheS5zbGljZSgwKTtcbiAgICAgICAgbGV0IGxhc3RJbmRleCA9IGFycmF5Lmxlbmd0aCAtIDE7XG4gICAgICAgIGlmIChhcnJheVtsYXN0SW5kZXhdID09PSBERUZBVUxUX0lOREVYX1BBR0VcbiAgICAgICAgICAgICYmICF0aGlzLmNvbmZpZy5leHBsaWNpdF9odG1sX2V4dGVuc2lvbnMpIHtcbiAgICAgICAgICAgIGFycmF5LnBvcCgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBVUkxIZWxwZXIuam9pbihhcnJheSk7XG4gICAgfVxuXG59XG4iXX0=
