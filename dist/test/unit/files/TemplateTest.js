"use strict";
var pug = require('pug');
var chai_1 = require('chai');
var Template_1 = require('../../../src/components/Template');
describe('Template', function () {
    describe('#prepare()', function () {
        it('extracts IDs correctly', function () {
            var template = new Template_1.Template();
            var templateString = '-- url(\'hello\')\n-- url(\'world\')\n-- url()';
            template.prepare(templateString, {}, {});
            chai_1.assert.deepEqual(template.getIds(), ['hello', 'world']);
        });
        it('extracts assets correctly', function () {
            var template = new Template_1.Template();
            var templateString = '-- asset(\'style.css\')\n-- asset(\'world.js\')';
            template.prepare(templateString, {}, {});
            chai_1.assert.deepEqual(template.getAssets(), ['style.css', 'world.js']);
        });
        it('extracts menus correctly', function () {
            var template = new Template_1.Template();
            var templateString = 'each value in menus.main\n  p= value';
            templateString += '\neach value in menus.secondary\n  p= value';
            var menusObject = {
                main: [],
                secondary: [],
            };
            template.prepare(templateString, {}, menusObject);
            chai_1.assert.deepEqual(template.getMenus(), ['main', 'secondary']);
        });
    });
    describe('#generate()', function () {
        it('throws an error if nothing was prepared', function () {
            var template = new Template_1.Template();
            chai_1.assert.throws(function () { return template.generate(); });
        });
        it('generates HTML string correctly', function () {
            var template = new Template_1.Template();
            var templateString = 'p Hello World!';
            template.prepare(templateString, {}, {});
            chai_1.assert.equal(template.generate(), pug.render(templateString));
        });
    });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3Rlc3QvdW5pdC9maWxlcy9UZW1wbGF0ZVRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQVFBLElBQVksR0FBRyxXQUFNLEtBQUssQ0FBQyxDQUFBO0FBQzNCLHFCQUFxQixNQUFNLENBQUMsQ0FBQTtBQUM1Qix5QkFBdUIsa0NBQWtDLENBQUMsQ0FBQTtBQUcxRCxRQUFRLENBQUMsVUFBVSxFQUFFO0lBQ2pCLFFBQVEsQ0FBQyxZQUFZLEVBQUU7UUFDbkIsRUFBRSxDQUFDLHdCQUF3QixFQUFFO1lBQ3pCLElBQUksUUFBUSxHQUFHLElBQUksbUJBQVEsRUFBRSxDQUFDO1lBQzlCLElBQUksY0FBYyxHQUFHLGdEQUFnRCxDQUFDO1lBQ3RFLFFBQVEsQ0FBQyxPQUFPLENBQUMsY0FBYyxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztZQUN6QyxhQUFNLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBQzVELENBQUMsQ0FBQyxDQUFDO1FBQ0gsRUFBRSxDQUFDLDJCQUEyQixFQUFFO1lBQzVCLElBQUksUUFBUSxHQUFHLElBQUksbUJBQVEsRUFBRSxDQUFDO1lBQzlCLElBQUksY0FBYyxHQUFHLGlEQUFpRCxDQUFDO1lBQ3ZFLFFBQVEsQ0FBQyxPQUFPLENBQUMsY0FBYyxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztZQUN6QyxhQUFNLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxTQUFTLEVBQUUsRUFBRSxDQUFDLFdBQVcsRUFBRSxVQUFVLENBQUMsQ0FBQyxDQUFDO1FBQ3RFLENBQUMsQ0FBQyxDQUFDO1FBQ0gsRUFBRSxDQUFDLDBCQUEwQixFQUFFO1lBQzNCLElBQUksUUFBUSxHQUFHLElBQUksbUJBQVEsRUFBRSxDQUFDO1lBQzlCLElBQUksY0FBYyxHQUFHLHNDQUFzQyxDQUFDO1lBQzVELGNBQWMsSUFBSSw2Q0FBNkMsQ0FBQztZQUNoRSxJQUFJLFdBQVcsR0FBaUI7Z0JBQzVCLElBQUksRUFBRSxFQUFFO2dCQUNSLFNBQVMsRUFBRSxFQUFFO2FBQ2hCLENBQUM7WUFDRixRQUFRLENBQUMsT0FBTyxDQUFDLGNBQWMsRUFBRSxFQUFFLEVBQUUsV0FBVyxDQUFDLENBQUM7WUFDbEQsYUFBTSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFLEVBQUUsQ0FBQyxNQUFNLEVBQUUsV0FBVyxDQUFDLENBQUMsQ0FBQztRQUNqRSxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUMsQ0FBQyxDQUFDO0lBQ0gsUUFBUSxDQUFDLGFBQWEsRUFBRTtRQUNwQixFQUFFLENBQUMseUNBQXlDLEVBQUU7WUFDMUMsSUFBSSxRQUFRLEdBQUcsSUFBSSxtQkFBUSxFQUFFLENBQUM7WUFDOUIsYUFBTSxDQUFDLE1BQU0sQ0FBQyxjQUFNLE9BQUEsUUFBUSxDQUFDLFFBQVEsRUFBRSxFQUFuQixDQUFtQixDQUFDLENBQUM7UUFDN0MsQ0FBQyxDQUFDLENBQUM7UUFDSCxFQUFFLENBQUMsaUNBQWlDLEVBQUU7WUFDbEMsSUFBSSxRQUFRLEdBQUcsSUFBSSxtQkFBUSxFQUFFLENBQUM7WUFDOUIsSUFBSSxjQUFjLEdBQUcsZ0JBQWdCLENBQUM7WUFDdEMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxjQUFjLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBQ3pDLGFBQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLFFBQVEsRUFBRSxFQUFFLEdBQUcsQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQztRQUNsRSxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyxDQUFDLENBQUMiLCJmaWxlIjoidGVzdC91bml0L2ZpbGVzL1RlbXBsYXRlVGVzdC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGUgVGVtcGxhdGUgdGVzdHNcbiAqIEBhdXRob3IgVGltdXIgS3V6aGFnYWxpeWV2IDx0aW0ua3V6aEBnbWFpbC5jb20+XG4gKiBAY29weXJpZ2h0IDIwMTZcbiAqIEBsaWNlbnNlIEdQTC0zLjBcbiAqIEBzaW5jZSAwLjIuMFxuICovXG5cbmltcG9ydCAqIGFzIHB1ZyBmcm9tICdwdWcnO1xuaW1wb3J0IHthc3NlcnR9IGZyb20gJ2NoYWknO1xuaW1wb3J0IHtUZW1wbGF0ZX0gZnJvbSAnLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvVGVtcGxhdGUnO1xuaW1wb3J0IHtJU2l0ZU1lbnVNYXB9IGZyb20gJy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL01lbnUnO1xuXG5kZXNjcmliZSgnVGVtcGxhdGUnLCAoKSA9PiB7XG4gICAgZGVzY3JpYmUoJyNwcmVwYXJlKCknLCAoKSA9PiB7XG4gICAgICAgIGl0KCdleHRyYWN0cyBJRHMgY29ycmVjdGx5JywgKCkgPT4ge1xuICAgICAgICAgICAgbGV0IHRlbXBsYXRlID0gbmV3IFRlbXBsYXRlKCk7XG4gICAgICAgICAgICBsZXQgdGVtcGxhdGVTdHJpbmcgPSAnLS0gdXJsKFxcJ2hlbGxvXFwnKVxcbi0tIHVybChcXCd3b3JsZFxcJylcXG4tLSB1cmwoKSc7XG4gICAgICAgICAgICB0ZW1wbGF0ZS5wcmVwYXJlKHRlbXBsYXRlU3RyaW5nLCB7fSwge30pO1xuICAgICAgICAgICAgYXNzZXJ0LmRlZXBFcXVhbCh0ZW1wbGF0ZS5nZXRJZHMoKSwgWydoZWxsbycsICd3b3JsZCddKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGl0KCdleHRyYWN0cyBhc3NldHMgY29ycmVjdGx5JywgKCkgPT4ge1xuICAgICAgICAgICAgbGV0IHRlbXBsYXRlID0gbmV3IFRlbXBsYXRlKCk7XG4gICAgICAgICAgICBsZXQgdGVtcGxhdGVTdHJpbmcgPSAnLS0gYXNzZXQoXFwnc3R5bGUuY3NzXFwnKVxcbi0tIGFzc2V0KFxcJ3dvcmxkLmpzXFwnKSc7XG4gICAgICAgICAgICB0ZW1wbGF0ZS5wcmVwYXJlKHRlbXBsYXRlU3RyaW5nLCB7fSwge30pO1xuICAgICAgICAgICAgYXNzZXJ0LmRlZXBFcXVhbCh0ZW1wbGF0ZS5nZXRBc3NldHMoKSwgWydzdHlsZS5jc3MnLCAnd29ybGQuanMnXSk7XG4gICAgICAgIH0pO1xuICAgICAgICBpdCgnZXh0cmFjdHMgbWVudXMgY29ycmVjdGx5JywgKCkgPT4ge1xuICAgICAgICAgICAgbGV0IHRlbXBsYXRlID0gbmV3IFRlbXBsYXRlKCk7XG4gICAgICAgICAgICBsZXQgdGVtcGxhdGVTdHJpbmcgPSAnZWFjaCB2YWx1ZSBpbiBtZW51cy5tYWluXFxuICBwPSB2YWx1ZSc7XG4gICAgICAgICAgICB0ZW1wbGF0ZVN0cmluZyArPSAnXFxuZWFjaCB2YWx1ZSBpbiBtZW51cy5zZWNvbmRhcnlcXG4gIHA9IHZhbHVlJztcbiAgICAgICAgICAgIGxldCBtZW51c09iamVjdDogSVNpdGVNZW51TWFwID0ge1xuICAgICAgICAgICAgICAgIG1haW46IFtdLFxuICAgICAgICAgICAgICAgIHNlY29uZGFyeTogW10sXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGVtcGxhdGUucHJlcGFyZSh0ZW1wbGF0ZVN0cmluZywge30sIG1lbnVzT2JqZWN0KTtcbiAgICAgICAgICAgIGFzc2VydC5kZWVwRXF1YWwodGVtcGxhdGUuZ2V0TWVudXMoKSwgWydtYWluJywgJ3NlY29uZGFyeSddKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG4gICAgZGVzY3JpYmUoJyNnZW5lcmF0ZSgpJywgKCkgPT4ge1xuICAgICAgICBpdCgndGhyb3dzIGFuIGVycm9yIGlmIG5vdGhpbmcgd2FzIHByZXBhcmVkJywgKCkgPT4ge1xuICAgICAgICAgICAgbGV0IHRlbXBsYXRlID0gbmV3IFRlbXBsYXRlKCk7XG4gICAgICAgICAgICBhc3NlcnQudGhyb3dzKCgpID0+IHRlbXBsYXRlLmdlbmVyYXRlKCkpO1xuICAgICAgICB9KTtcbiAgICAgICAgaXQoJ2dlbmVyYXRlcyBIVE1MIHN0cmluZyBjb3JyZWN0bHknLCAoKSA9PiB7XG4gICAgICAgICAgICBsZXQgdGVtcGxhdGUgPSBuZXcgVGVtcGxhdGUoKTtcbiAgICAgICAgICAgIGxldCB0ZW1wbGF0ZVN0cmluZyA9ICdwIEhlbGxvIFdvcmxkISc7XG4gICAgICAgICAgICB0ZW1wbGF0ZS5wcmVwYXJlKHRlbXBsYXRlU3RyaW5nLCB7fSwge30pO1xuICAgICAgICAgICAgYXNzZXJ0LmVxdWFsKHRlbXBsYXRlLmdlbmVyYXRlKCksIHB1Zy5yZW5kZXIodGVtcGxhdGVTdHJpbmcpKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG59KTtcbiJdfQ==
