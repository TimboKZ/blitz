"use strict";
var StringHelper_1 = require('../helpers/StringHelper');
var Content = (function () {
    function Content() {
    }
    Content.prototype.prepare = function (rawContent) {
        this.urlFunctionMap = {};
        this.assetFunctionMap = {};
        this.ids = [];
        this.assets = [];
        var preparedContent = this.parseFunction(rawContent, 'url', this.urlFunctionMap, this.ids);
        preparedContent = this.parseFunction(preparedContent, 'asset', this.assetFunctionMap, this.assets);
        this.preparedContent = preparedContent;
    };
    Content.prototype.parseFunction = function (content, functionName, map, values) {
        var regex = new RegExp('\\\\?\\$\{' + functionName + '(\|((?!}).)*)?}', 'gi');
        return content.replace(regex, function (match) {
            if (match.substr(0, 1) === '\\') {
                return match.substr(1);
            }
            var token = '<%' + functionName + '-' + StringHelper_1.StringHelper.randomString(6) + '%>';
            if (match.substr(2 + functionName.length, 1) !== '|') {
                map[token] = undefined;
            }
            else {
                var parameter = match.substr(3 + functionName.length);
                parameter = parameter.substr(0, parameter.length - 1);
                values.push(parameter);
                map[token] = parameter;
            }
            return token;
        });
    };
    Content.prototype.generate = function (urlGenerator, assetPathGenerator, contentParser) {
        if (this.preparedContent === undefined) {
            throw new Error('Cannot generate content with nothing prepared!');
        }
        var content = this.preparedContent;
        for (var urlToken in this.urlFunctionMap) {
            if (this.urlFunctionMap.hasOwnProperty(urlToken)) {
                content = content.replace(urlToken, urlGenerator(this.urlFunctionMap[urlToken]));
            }
        }
        for (var assetToken in this.assetFunctionMap) {
            if (this.assetFunctionMap.hasOwnProperty(assetToken)) {
                content = content.replace(assetToken, assetPathGenerator(this.assetFunctionMap[assetToken]));
            }
        }
        return contentParser(content);
    };
    Content.prototype.getIds = function () {
        return this.ids;
    };
    Content.prototype.getAssets = function () {
        return this.assets;
    };
    return Content;
}());
exports.Content = Content;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
