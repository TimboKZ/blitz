"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var fse = require('fs-extra');
var path = require('path');
var ProjectWatcher_1 = require('./ProjectWatcher');
var ListenerContainer_1 = require('../ListenerContainer');
var Logger_1 = require('../cli/Logger');
exports.ASSET_CHANGE_EVENT = 'assetChange';
exports.ASSET_REMOVE_EVENT = 'assetRemove';
var AssetManager = (function (_super) {
    __extends(AssetManager, _super);
    function AssetManager(sourcePath, targetPath, eventEmitter) {
        var _this = this;
        if (eventEmitter) {
            var eventListenerPairs = [];
            _super.call(this, eventEmitter, eventListenerPairs);
            eventListenerPairs.push({
                event: exports.ASSET_CHANGE_EVENT,
                listener: function (assetPath) {
                    Logger_1.Logger.log('Updating `' + Logger_1.Logger.brand(path.join('assets', assetPath)) + '`...');
                    _this.copyAsset(assetPath);
                },
            });
            eventListenerPairs.push({
                event: exports.ASSET_REMOVE_EVENT,
                listener: function (assetPath) {
                    Logger_1.Logger.log('Removing `' + Logger_1.Logger.brand(path.join('assets', assetPath)) + '`...');
                    _this.removeAsset(assetPath);
                },
            });
        }
        else {
            _super.call(this);
        }
        this.sourcePath = sourcePath;
        this.targetPath = targetPath;
    }
    AssetManager.prototype.copyAssets = function () {
        fse.copySync(this.sourcePath, this.targetPath);
    };
    AssetManager.prototype.copyAsset = function (assetPath) {
        var assetSourcePath = path.join(this.sourcePath, assetPath);
        var assetTargetPath = path.join(this.targetPath, assetPath);
        fse.ensureDirSync(path.dirname(assetTargetPath));
        fse.copySync(assetSourcePath, assetTargetPath);
        if (this.eventEmitter) {
            this.eventEmitter.emit(ProjectWatcher_1.BUILD_CHANGE_EVENT, path.join('assets', assetPath));
        }
    };
    AssetManager.prototype.removeAsset = function (assetPath) {
        fse.removeSync(path.join(this.targetPath, assetPath));
        if (this.eventEmitter) {
            this.eventEmitter.emit(ProjectWatcher_1.BUILD_CHANGE_EVENT, path.join('assets', assetPath));
        }
    };
    return AssetManager;
}(ListenerContainer_1.ListenerContainer));
exports.AssetManager = AssetManager;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jb3JlL0Fzc2V0TWFuYWdlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFRQSxJQUFZLEdBQUcsV0FBTSxVQUFVLENBQUMsQ0FBQTtBQUNoQyxJQUFZLElBQUksV0FBTSxNQUFNLENBQUMsQ0FBQTtBQUU3QiwrQkFBaUMsa0JBQWtCLENBQUMsQ0FBQTtBQUNwRCxrQ0FBZ0Msc0JBQXNCLENBQUMsQ0FBQTtBQUN2RCx1QkFBcUIsZUFBZSxDQUFDLENBQUE7QUFNeEIsMEJBQWtCLEdBQUcsYUFBYSxDQUFDO0FBTW5DLDBCQUFrQixHQUFHLGFBQWEsQ0FBQztBQU1oRDtJQUFrQyxnQ0FBaUI7SUFpQi9DLHNCQUFtQixVQUFrQixFQUFFLFVBQWtCLEVBQUUsWUFBMkI7UUFqQjFGLGlCQXlFQztRQXZETyxFQUFFLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDO1lBQ2YsSUFBSSxrQkFBa0IsR0FBRyxFQUFFLENBQUM7WUFDNUIsa0JBQU0sWUFBWSxFQUFFLGtCQUFrQixDQUFDLENBQUM7WUFDeEMsa0JBQWtCLENBQUMsSUFBSSxDQUFDO2dCQUNwQixLQUFLLEVBQUUsMEJBQWtCO2dCQUN6QixRQUFRLEVBQUUsVUFBQyxTQUFTO29CQUNoQixlQUFNLENBQUMsR0FBRyxDQUFDLFlBQVksR0FBRyxlQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUM7b0JBQ2pGLEtBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLENBQUM7Z0JBQzlCLENBQUM7YUFDSixDQUFDLENBQUM7WUFDSCxrQkFBa0IsQ0FBQyxJQUFJLENBQUM7Z0JBQ3BCLEtBQUssRUFBRSwwQkFBa0I7Z0JBQ3pCLFFBQVEsRUFBRSxVQUFDLFNBQVM7b0JBQ2hCLGVBQU0sQ0FBQyxHQUFHLENBQUMsWUFBWSxHQUFHLGVBQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsU0FBUyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQztvQkFDakYsS0FBSSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsQ0FBQztnQkFDaEMsQ0FBQzthQUNKLENBQUMsQ0FBQztRQUNQLENBQUM7UUFBQyxJQUFJLENBQUMsQ0FBQztZQUNKLGlCQUFPLENBQUM7UUFDWixDQUFDO1FBQ0QsSUFBSSxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUM7UUFDN0IsSUFBSSxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUM7SUFDakMsQ0FBQztJQU1NLGlDQUFVLEdBQWpCO1FBQ0ksR0FBRyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUNuRCxDQUFDO0lBTU0sZ0NBQVMsR0FBaEIsVUFBaUIsU0FBaUI7UUFDOUIsSUFBSSxlQUFlLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQzVELElBQUksZUFBZSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxTQUFTLENBQUMsQ0FBQztRQUM1RCxHQUFHLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQztRQUNqRCxHQUFHLENBQUMsUUFBUSxDQUFDLGVBQWUsRUFBRSxlQUFlLENBQUMsQ0FBQztRQUMvQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQztZQUNwQixJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxtQ0FBa0IsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDO1FBQy9FLENBQUM7SUFDTCxDQUFDO0lBS00sa0NBQVcsR0FBbEIsVUFBbUIsU0FBaUI7UUFDaEMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQztRQUN0RCxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQztZQUNwQixJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxtQ0FBa0IsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDO1FBQy9FLENBQUM7SUFDTCxDQUFDO0lBQ0wsbUJBQUM7QUFBRCxDQXpFQSxBQXlFQyxDQXpFaUMscUNBQWlCLEdBeUVsRDtBQXpFWSxvQkFBWSxlQXlFeEIsQ0FBQSIsImZpbGUiOiJzcmMvY29yZS9Bc3NldE1hbmFnZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlIENvbnRhaW5zIGNvZGUgcmVsYXRlZCB0byB3ZWJzaXRlIGFzc2V0c1xuICogQGF1dGhvciBUaW11ciBLdXpoYWdhbGl5ZXYgPHRpbS5rdXpoQGdtYWlsLmNvbT5cbiAqIEBjb3B5cmlnaHQgMjAxNlxuICogQGxpY2Vuc2UgR1BMLTMuMFxuICogQHNpbmNlIDAuMi4wXG4gKi9cblxuaW1wb3J0ICogYXMgZnNlIGZyb20gJ2ZzLWV4dHJhJztcbmltcG9ydCAqIGFzIHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQge0V2ZW50RW1pdHRlcn0gZnJvbSAnZXZlbnRzJztcbmltcG9ydCB7QlVJTERfQ0hBTkdFX0VWRU5UfSBmcm9tICcuL1Byb2plY3RXYXRjaGVyJztcbmltcG9ydCB7TGlzdGVuZXJDb250YWluZXJ9IGZyb20gJy4uL0xpc3RlbmVyQ29udGFpbmVyJztcbmltcG9ydCB7TG9nZ2VyfSBmcm9tICcuLi9jbGkvTG9nZ2VyJztcblxuLyoqXG4gKiBFdmVudCB0cmlnZ2VyZWQgd2hlbiBhbiBhc3NldCBpcyBjaGFuZ2VkIG9yIGNyZWF0ZWRcbiAqIEBzaW5jZSAwLjIuMFxuICovXG5leHBvcnQgY29uc3QgQVNTRVRfQ0hBTkdFX0VWRU5UID0gJ2Fzc2V0Q2hhbmdlJztcblxuLyoqXG4gKiBFdmVudCB0cmlnZ2VyZWQgd2hlbiBhbiBhc3NldCBpcyBkZWxldGVkXG4gKiBAc2luY2UgMC4yLjBcbiAqL1xuZXhwb3J0IGNvbnN0IEFTU0VUX1JFTU9WRV9FVkVOVCA9ICdhc3NldFJlbW92ZSc7XG5cbi8qKlxuICogQGNsYXNzIFJlc3BvbnNpYmxlIGZvciBjb3B5aW5nIGFuZFxuICogQHNpbmNlIDAuMi4wXG4gKi9cbmV4cG9ydCBjbGFzcyBBc3NldE1hbmFnZXIgZXh0ZW5kcyBMaXN0ZW5lckNvbnRhaW5lciB7XG4gICAgLyoqXG4gICAgICogRm9sZGVyIGluIHdoaWNoIHByb2plY3QgYXNzZXRzIGFyZSBsb2NhdGVkXG4gICAgICogQHNpbmNlIDAuMi4wXG4gICAgICovXG4gICAgcHJpdmF0ZSBzb3VyY2VQYXRoOiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBBc3NldHMgZm9sZGVyIGluc2lkZSB0aGUgYGJ1aWxkYCBkaXJlY3RvcnlcbiAgICAgKiBAc2luY2UgMC4yLjBcbiAgICAgKi9cbiAgICBwcml2YXRlIHRhcmdldFBhdGg6IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEFzc2V0TWFuYWdlciBjb25zdHJ1Y3RvclxuICAgICAqIEBzaW5jZSAwLjIuMFxuICAgICAqL1xuICAgIHB1YmxpYyBjb25zdHJ1Y3Rvcihzb3VyY2VQYXRoOiBzdHJpbmcsIHRhcmdldFBhdGg6IHN0cmluZywgZXZlbnRFbWl0dGVyPzogRXZlbnRFbWl0dGVyKSB7XG4gICAgICAgIGlmIChldmVudEVtaXR0ZXIpIHtcbiAgICAgICAgICAgIGxldCBldmVudExpc3RlbmVyUGFpcnMgPSBbXTtcbiAgICAgICAgICAgIHN1cGVyKGV2ZW50RW1pdHRlciwgZXZlbnRMaXN0ZW5lclBhaXJzKTtcbiAgICAgICAgICAgIGV2ZW50TGlzdGVuZXJQYWlycy5wdXNoKHtcbiAgICAgICAgICAgICAgICBldmVudDogQVNTRVRfQ0hBTkdFX0VWRU5ULFxuICAgICAgICAgICAgICAgIGxpc3RlbmVyOiAoYXNzZXRQYXRoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIExvZ2dlci5sb2coJ1VwZGF0aW5nIGAnICsgTG9nZ2VyLmJyYW5kKHBhdGguam9pbignYXNzZXRzJywgYXNzZXRQYXRoKSkgKyAnYC4uLicpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvcHlBc3NldChhc3NldFBhdGgpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGV2ZW50TGlzdGVuZXJQYWlycy5wdXNoKHtcbiAgICAgICAgICAgICAgICBldmVudDogQVNTRVRfUkVNT1ZFX0VWRU5ULFxuICAgICAgICAgICAgICAgIGxpc3RlbmVyOiAoYXNzZXRQYXRoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIExvZ2dlci5sb2coJ1JlbW92aW5nIGAnICsgTG9nZ2VyLmJyYW5kKHBhdGguam9pbignYXNzZXRzJywgYXNzZXRQYXRoKSkgKyAnYC4uLicpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZUFzc2V0KGFzc2V0UGF0aCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNvdXJjZVBhdGggPSBzb3VyY2VQYXRoO1xuICAgICAgICB0aGlzLnRhcmdldFBhdGggPSB0YXJnZXRQYXRoO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvcGllcyBhbGwgYXNzZXRzIGludG8gdGhlIGJ1aWxkIGZvbGRlclxuICAgICAqIEBzaW5jZSAwLjIuMFxuICAgICAqL1xuICAgIHB1YmxpYyBjb3B5QXNzZXRzKCkge1xuICAgICAgICBmc2UuY29weVN5bmModGhpcy5zb3VyY2VQYXRoLCB0aGlzLnRhcmdldFBhdGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvcGllcyBhIHNpbmdsZSBhc3NldCwgb3ZlcndyaXRpbmcgdGhlIGZpbGUgaW4gdGFyZ2V0IGRpcmVjdG9yeSBpZiBuZWVkZWRcbiAgICAgKiBAc2luY2UgMC4yLjBcbiAgICAgKi9cbiAgICBwdWJsaWMgY29weUFzc2V0KGFzc2V0UGF0aDogc3RyaW5nKSB7XG4gICAgICAgIGxldCBhc3NldFNvdXJjZVBhdGggPSBwYXRoLmpvaW4odGhpcy5zb3VyY2VQYXRoLCBhc3NldFBhdGgpO1xuICAgICAgICBsZXQgYXNzZXRUYXJnZXRQYXRoID0gcGF0aC5qb2luKHRoaXMudGFyZ2V0UGF0aCwgYXNzZXRQYXRoKTtcbiAgICAgICAgZnNlLmVuc3VyZURpclN5bmMocGF0aC5kaXJuYW1lKGFzc2V0VGFyZ2V0UGF0aCkpO1xuICAgICAgICBmc2UuY29weVN5bmMoYXNzZXRTb3VyY2VQYXRoLCBhc3NldFRhcmdldFBhdGgpO1xuICAgICAgICBpZiAodGhpcy5ldmVudEVtaXR0ZXIpIHtcbiAgICAgICAgICAgIHRoaXMuZXZlbnRFbWl0dGVyLmVtaXQoQlVJTERfQ0hBTkdFX0VWRU5ULCBwYXRoLmpvaW4oJ2Fzc2V0cycsIGFzc2V0UGF0aCkpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHNpbmNlIDAuMi4wXG4gICAgICovXG4gICAgcHVibGljIHJlbW92ZUFzc2V0KGFzc2V0UGF0aDogc3RyaW5nKSB7XG4gICAgICAgIGZzZS5yZW1vdmVTeW5jKHBhdGguam9pbih0aGlzLnRhcmdldFBhdGgsIGFzc2V0UGF0aCkpO1xuICAgICAgICBpZiAodGhpcy5ldmVudEVtaXR0ZXIpIHtcbiAgICAgICAgICAgIHRoaXMuZXZlbnRFbWl0dGVyLmVtaXQoQlVJTERfQ0hBTkdFX0VWRU5ULCBwYXRoLmpvaW4oJ2Fzc2V0cycsIGFzc2V0UGF0aCkpO1xuICAgICAgICB9XG4gICAgfVxufVxuIl19
