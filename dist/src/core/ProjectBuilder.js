"use strict";
var path = require('path');
var URLHelper_1 = require('../helpers/URLHelper');
var PathHelper_1 = require('../helpers/PathHelper');
var SiteFile_1 = require('../files/SiteFile');
var TemplateFile_1 = require('../files/TemplateFile');
var AssetManager_1 = require('../components/AssetManager');
var ContentFile_1 = require('../files/ContentFile');
var StringHelper_1 = require('../helpers/StringHelper');
var DEFAULT_PAGE_EXTENSION = '.html';
var DEFAULT_INDEX_PAGE = 'index' + DEFAULT_PAGE_EXTENSION;
var ProjectBuilder = (function () {
    function ProjectBuilder(projectSettings) {
        this.settings = projectSettings;
        this.config = this.settings.config.get();
    }
    ProjectBuilder.prototype.build = function () {
        var assetManager = new AssetManager_1.AssetManager(this.settings);
        assetManager.setupListeners();
        assetManager.copyAssets();
        this.preparePages(this.config.pages, []);
    };
    ProjectBuilder.prototype.preparePages = function (pages, currentPath) {
        var length = pages.length;
        for (var i = 0; i < length; i++) {
            this.preparePage(pages[i], currentPath);
        }
    };
    ProjectBuilder.prototype.preparePage = function (page, currentPath) {
        var relativeUriArray = ProjectBuilder.extractRelativeUriArray(page);
        var contentFile;
        if (page.content) {
            var contentPath = PathHelper_1.PathHelper.join(this.settings.contentPath, page.content);
            contentFile = new ContentFile_1.ContentFile(contentPath);
            contentFile.reload();
        }
        if (page.template) {
            var relativePagePathArray = this.determinePagePathArray(relativeUriArray);
            var relativeUrl = URLHelper_1.URLHelper.join(relativePagePathArray);
            var fullPagePath = PathHelper_1.PathHelper.join(this.settings.buildPath, currentPath, relativePagePathArray);
            var urlGenerator = URLHelper_1.URLHelper.prepareUrlGenerator(relativeUrl);
            for (var i = 0; i < page.menus.length; i++) {
                var menu = page.menus[i];
                var itemTitle = this.determineMenuItemTitle(menu, contentFile.getAttributes());
                if (itemTitle === undefined) {
                    itemTitle = path.basename(fullPagePath, DEFAULT_PAGE_EXTENSION);
                }
            }
            var locals = {
                url: urlGenerator,
                asset: '',
                menus: {},
                hash: StringHelper_1.StringHelper.randomString(8),
                site_url: this.config.site_url,
                site_root: this.config.site_root,
            };
            var templatePath = PathHelper_1.PathHelper.join(this.settings.templatePath, page.template);
            var templateFile = new TemplateFile_1.TemplateFile(templatePath);
            templateFile.reload();
            var siteFile = new SiteFile_1.SiteFile(fullPagePath, templateFile);
            siteFile.rebuild();
            siteFile.write();
        }
        else {
        }
    };
    ProjectBuilder.extractRelativeUriArray = function (page) {
        var relativePathArray;
        if (page.uri !== undefined) {
            relativePathArray = URLHelper_1.URLHelper.split(page.uri);
        }
        else if (page.content !== undefined) {
            relativePathArray = URLHelper_1.URLHelper.split(PathHelper_1.PathHelper.stripExtension(page.content));
        }
        else if (page.template !== undefined) {
            relativePathArray = URLHelper_1.URLHelper.split(PathHelper_1.PathHelper.stripExtension(page.template));
        }
        else {
            throw new Error('Could not determine page path!');
        }
        return relativePathArray;
    };
    ProjectBuilder.prototype.determinePagePathArray = function (uriArray) {
        var isIndex = uriArray.length === 0 || (uriArray.length === 1 && uriArray[0] === 'index');
        if (isIndex) {
            return [DEFAULT_INDEX_PAGE];
        }
        var lastIndex = uriArray.length - 1;
        if (this.config.explicit_html_extensions) {
            uriArray[lastIndex] = uriArray[lastIndex] + DEFAULT_PAGE_EXTENSION;
        }
        else {
            uriArray.push(DEFAULT_INDEX_PAGE);
        }
        return uriArray;
    };
    ProjectBuilder.prototype.determineMenuItemTitle = function (menu, contentAttributes) {
        var title;
        if (menu.title_key && contentAttributes[menu.title_key]) {
            title = contentAttributes[menu.title_key];
        }
        else if (menu.title) {
            title = menu.title;
        }
        else if (contentAttributes.menu_title) {
            title = contentAttributes.menu_title;
        }
        else if (contentAttributes.title) {
            title = contentAttributes.title;
        }
        return title;
    };
    return ProjectBuilder;
}());
exports.ProjectBuilder = ProjectBuilder;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
